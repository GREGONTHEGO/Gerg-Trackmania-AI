{"op":"1.27.12 (next, Public, 2025-07-01)","functions":[{"ns":"string","name":"Join","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":268438875,"typename":"array","typedecl":"string[]","typeflags":5,"name":"arr"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"delimiter"}],"decl":"string Join(const string[]&in arr, const string&in delimiter)","group":"Core","desc":"Join an array of strings into a single where each item is separated using the given delimiter.","flags":[]},{"ns":"string","name":"Repeat","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"},{"typedecl":"int","typeflags":0,"name":"count"}],"decl":"string Repeat(const string&in str, int count)","group":"Core","desc":"Repeats a the given string `count` times.","flags":[]},{"name":"await","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850727,"typename":"awaitable","typedecl":"awaitable@","typeflags":0,"name":""}],"decl":"void await(awaitable@)","group":"Core","desc":"Yields the current execution until the given awaitable has finished.","flags":[]},{"name":"await","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1342180700,"typename":"array","typedecl":"awaitable@[]@","typeflags":0,"name":""}],"decl":"void await(awaitable@[]@)","group":"Core","desc":"Yields the current execution until all the given awaitables have finished.","flags":[]},{"name":"awaitany","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1342180700,"typename":"array","typedecl":"awaitable@[]@","typeflags":0,"name":""}],"decl":"void awaitany(awaitable@[]@)","group":"Core","desc":"Yields the current execution until at least 1 of the given awaitables have finished.","flags":[]},{"ns":"mat3","name":"Identity","returntypeid":67108912,"returntypename":"mat3","returntypedecl":"mat3","returntypeflags":0,"args":[],"decl":"mat3 Identity()","group":"Math","desc":"","flags":[]},{"ns":"mat3","name":"Translate","returntypeid":67108912,"returntypename":"mat3","returntypedecl":"mat3","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"v"}],"decl":"mat3 Translate(const vec2&in v)","group":"Math","desc":"","flags":[]},{"ns":"mat3","name":"Rotate","returntypeid":67108912,"returntypename":"mat3","returntypedecl":"mat3","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"angle"}],"decl":"mat3 Rotate(float angle)","group":"Math","desc":"","flags":[]},{"ns":"mat3","name":"Scale","returntypeid":67108912,"returntypename":"mat3","returntypedecl":"mat3","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"scale"}],"decl":"mat3 Scale(const vec2&in scale)","group":"Math","desc":"","flags":[]},{"ns":"mat3","name":"Scale","returntypeid":67108912,"returntypename":"mat3","returntypedecl":"mat3","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"scale"}],"decl":"mat3 Scale(float scale)","group":"Math","desc":"","flags":[]},{"ns":"mat3","name":"Inverse","returntypeid":67108912,"returntypename":"mat3","returntypedecl":"mat3","returntypeflags":0,"args":[{"typeid":67108912,"typename":"mat3","typedecl":"mat3","typeflags":5,"name":""}],"decl":"mat3 Inverse(const mat3&in)","group":"Math","desc":"","flags":[]},{"ns":"mat3","name":"Transpose","returntypeid":67108912,"returntypename":"mat3","returntypedecl":"mat3","returntypeflags":0,"args":[{"typeid":67108912,"typename":"mat3","typedecl":"mat3","typeflags":5,"name":""}],"decl":"mat3 Transpose(const mat3&in)","group":"Math","desc":"","flags":[]},{"ns":"mat4","name":"Identity","returntypeid":67108914,"returntypename":"mat4","returntypedecl":"mat4","returntypeflags":0,"args":[],"decl":"mat4 Identity()","group":"Math","desc":"","flags":[]},{"ns":"mat4","name":"Translate","returntypeid":67108914,"returntypename":"mat4","returntypedecl":"mat4","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"v"}],"decl":"mat4 Translate(const vec3&in v)","group":"Math","desc":"","flags":[]},{"ns":"mat4","name":"Rotate","returntypeid":67108914,"returntypename":"mat4","returntypedecl":"mat4","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"angle"},{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"dir"}],"decl":"mat4 Rotate(float angle, const vec3&in dir)","group":"Math","desc":"","flags":[]},{"ns":"mat4","name":"Scale","returntypeid":67108914,"returntypename":"mat4","returntypedecl":"mat4","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"scale"}],"decl":"mat4 Scale(const vec3&in scale)","group":"Math","desc":"","flags":[]},{"ns":"mat4","name":"Scale","returntypeid":67108914,"returntypename":"mat4","returntypedecl":"mat4","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"scale"}],"decl":"mat4 Scale(float scale)","group":"Math","desc":"","flags":[]},{"ns":"mat4","name":"Perspective","returntypeid":67108914,"returntypename":"mat4","returntypedecl":"mat4","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"yFov"},{"typedecl":"float","typeflags":0,"name":"aspect"},{"typedecl":"float","typeflags":0,"name":"nearZ"},{"typedecl":"float","typeflags":0,"name":"farZ"}],"decl":"mat4 Perspective(float yFov, float aspect, float nearZ, float farZ)","group":"Math","desc":"","flags":[]},{"ns":"mat4","name":"Inverse","returntypeid":67108914,"returntypename":"mat4","returntypedecl":"mat4","returntypeflags":0,"args":[{"typeid":67108914,"typename":"mat4","typedecl":"mat4","typeflags":5,"name":""}],"decl":"mat4 Inverse(const mat4&in)","group":"Math","desc":"","flags":[]},{"ns":"mat4","name":"LookAt","returntypeid":67108914,"returntypename":"mat4","returntypedecl":"mat4","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"eye"},{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"center"},{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"up"}],"decl":"mat4 LookAt(const vec3&in eye, const vec3&in center, const vec3&in up)","group":"Math","desc":"","flags":[]},{"ns":"mat4","name":"Transpose","returntypeid":67108914,"returntypename":"mat4","returntypedecl":"mat4","returntypeflags":0,"args":[{"typeid":67108914,"typename":"mat4","typedecl":"mat4","typeflags":5,"name":""}],"decl":"mat4 Transpose(const mat4&in)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Abs","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"i"}],"decl":"int Abs(int i)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Abs","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Abs(float f)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Sin","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Sin(float f)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Asin","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Asin(float f)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Cos","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Cos(float f)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Acos","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Acos(float f)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Tan","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Tan(float f)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Atan","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Atan(float f)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Atan2","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"x"}],"decl":"float Atan2(float y, float x)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Exp","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Exp(float f)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Pow","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"}],"decl":"float Pow(float x, float y)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Sqrt","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Sqrt(float f)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"ToDeg","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"rad"}],"decl":"float ToDeg(float rad)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"ToRad","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"deg"}],"decl":"float ToRad(float deg)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Rand","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"min"},{"typedecl":"float","typeflags":0,"name":"max"}],"decl":"float Rand(float min, float max)","group":"Math","desc":"Generate a random floating point value between min (inclusive) and max (exclusive).","flags":[]},{"ns":"Math","name":"Rand","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"min"},{"typedecl":"int","typeflags":0,"name":"max"}],"decl":"int Rand(int min, int max)","group":"Math","desc":"Generate a random integer between min (inclusive) and max (exclusive).","flags":[]},{"ns":"Math","name":"Log","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Log(float f)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Log2","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Log2(float f)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Log10","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Log10(float f)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Log1p","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Log1p(float f)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Logb","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Logb(float f)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Floor","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Floor(float f)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Ceil","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Ceil(float f)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Round","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"float Round(float f)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Round","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"f"},{"typedecl":"int","typeflags":0,"name":"decimals"}],"decl":"float Round(float f, int decimals)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"InvLerp","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":5,"name":"min"},{"typedecl":"float","typeflags":5,"name":"max"},{"typedecl":"float","typeflags":5,"name":"value"}],"decl":"float InvLerp(const float&in min, const float&in max, const float&in value)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"InvLerp","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"int","typeflags":5,"name":"min"},{"typedecl":"int","typeflags":5,"name":"max"},{"typedecl":"int","typeflags":5,"name":"value"}],"decl":"float InvLerp(const int&in min, const int&in max, const int&in value)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Lerp","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":5,"name":"min"},{"typedecl":"float","typeflags":5,"name":"max"},{"typedecl":"float","typeflags":0,"name":"x"}],"decl":"float Lerp(const float&in min, const float&in max, float x)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Lerp","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"min"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"max"},{"typedecl":"float","typeflags":0,"name":"x"}],"decl":"vec2 Lerp(const vec2&in min, const vec2&in max, float x)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Lerp","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"min"},{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"max"},{"typedecl":"float","typeflags":0,"name":"x"}],"decl":"vec3 Lerp(const vec3&in min, const vec3&in max, float x)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Lerp","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"min"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"max"},{"typedecl":"float","typeflags":0,"name":"x"}],"decl":"vec4 Lerp(const vec4&in min, const vec4&in max, float x)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Distance2","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"a"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"b"}],"decl":"float Distance2(const vec2&in a, const vec2&in b)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Distance2","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"a"},{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"b"}],"decl":"float Distance2(const vec3&in a, const vec3&in b)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Distance","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"a"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"b"}],"decl":"float Distance(const vec2&in a, const vec2&in b)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Distance","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"a"},{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"b"}],"decl":"float Distance(const vec3&in a, const vec3&in b)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Dot","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"a"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"b"}],"decl":"float Dot(const vec2&in a, const vec2&in b)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Dot","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"a"},{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"b"}],"decl":"float Dot(const vec3&in a, const vec3&in b)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Angle","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"a"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"b"}],"decl":"float Angle(const vec2&in a, const vec2&in b)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Angle","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"a"},{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"b"}],"decl":"float Angle(const vec3&in a, const vec3&in b)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Cross","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"a"},{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"b"}],"decl":"vec3 Cross(const vec3&in a, const vec3&in b)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Min","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"x"},{"typedecl":"int","typeflags":0,"name":"y"}],"decl":"int Min(int x, int y)","group":"Math","desc":"Returns `x` or `y`, whichever is lower.","flags":[]},{"ns":"Math","name":"Min","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"}],"decl":"float Min(float x, float y)","group":"Math","desc":"Returns `x` or `y`, whichever is lower.","flags":[]},{"ns":"Math","name":"Max","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"x"},{"typedecl":"int","typeflags":0,"name":"y"}],"decl":"int Max(int x, int y)","group":"Math","desc":"Returns `x` or `y`, whichever is higher.","flags":[]},{"ns":"Math","name":"Max","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"}],"decl":"float Max(float x, float y)","group":"Math","desc":"Returns `x` or `y`, whichever is higher.","flags":[]},{"ns":"Math","name":"Clamp","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"x"},{"typedecl":"int","typeflags":0,"name":"min"},{"typedecl":"int","typeflags":0,"name":"max"}],"decl":"int Clamp(int x, int min, int max)","group":"Math","desc":"Clamps the value `x` between `min` and `max`. Throws an exception when `min` is higher than `max`.","flags":[]},{"ns":"Math","name":"Clamp","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"min"},{"typedecl":"float","typeflags":0,"name":"max"}],"decl":"float Clamp(float x, float min, float max)","group":"Math","desc":"Clamps the value `x` between `min` and `max`. Throws an exception when `min` is higher than `max`.","flags":[]},{"ns":"Math","name":"IsNaN","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"bool IsNaN(float)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"IsInf","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"bool IsInf(float)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"SwapBytes","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"uint16","typeflags":0,"name":""}],"decl":"uint16 SwapBytes(uint16)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"SwapBytes","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"uint SwapBytes(uint)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"SwapBytes","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":""}],"decl":"uint64 SwapBytes(uint64)","group":"Math","desc":"","flags":[]},{"ns":"Math","name":"Slerp","returntypeid":67108915,"returntypename":"quat","returntypedecl":"quat","returntypeflags":0,"args":[{"typeid":67108915,"typename":"quat","typedecl":"quat","typeflags":5,"name":"a"},{"typeid":67108915,"typename":"quat","typedecl":"quat","typeflags":5,"name":"b"},{"typedecl":"float","typeflags":0,"name":"x"}],"decl":"quat Slerp(const quat&in a, const quat&in b, float x)"},{"ns":"Time","name":"get_Now","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 get_Now()","group":"Time","desc":"Gets the time (in milliseconds) since the game started.","flags":[]},{"ns":"Time","name":"get_Stamp","returntypedecl":"int64","returntypeflags":0,"args":[],"decl":"int64 get_Stamp()","group":"Time","desc":"Gets the current machine timestamp in seconds. Also commonly referred to as epoch time.","flags":[]},{"ns":"Time","name":"get_FrameCount","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 get_FrameCount()","group":"Time","desc":"Gets the number of frames that Openplanet has processed. Note that this is not the same as the game's own frame counter; it may be off by a number of frames.","flags":[]},{"ns":"Time","name":"FormatString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format","desc":"Refer to <https://en.cppreference.com/w/c/chrono/strftime>"},{"typedecl":"int64","typeflags":0,"name":"stamp","default":"-1","desc":"The timestamp to format, or -1 to format the current time."}],"decl":"string FormatString(const string&in format, int64 stamp = -1)","group":"Time","desc":"Format a time into the given format as specified by strftime in the local time.","flags":[]},{"ns":"Time","name":"FormatStringUTC","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format","desc":"Refer to <https://en.cppreference.com/w/c/chrono/strftime>"},{"typedecl":"int64","typeflags":0,"name":"stamp","default":"-1","desc":"The timestamp to format, or -1 to format the current time."}],"decl":"string FormatStringUTC(const string&in format, int64 stamp = -1)","group":"Time","desc":"Format a time into the given format as specified by strftime in UTC.","flags":[]},{"ns":"Time","name":"ParseFormatString","returntypedecl":"int64","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format","desc":"Refer to <https://en.cppreference.com/w/cpp/chrono/parse>"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"stamp","desc":"The timestamp to parse."}],"decl":"int64 ParseFormatString(const string&in format, const string&in stamp)","group":"Time","desc":"Parses a time from a string into a timestamp.","flags":[]},{"ns":"Time","name":"Format","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"time"},{"typedecl":"bool","typeflags":0,"name":"fractions","default":"true"},{"typedecl":"bool","typeflags":0,"name":"forceMinutes","default":"true"},{"typedecl":"bool","typeflags":0,"name":"forceHours","default":"false"},{"typedecl":"bool","typeflags":0,"name":"short","default":"false"}],"decl":"string Format(uint64 time, bool fractions = true, bool forceMinutes = true, bool forceHours = false, bool short = false)","group":"Time","desc":"Format a game time (in milliseconds) to its race time representation. For example, 61234 will be \"1:01.234\".","flags":[]},{"ns":"Time","name":"Format","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":0,"name":"time"},{"typedecl":"bool","typeflags":0,"name":"fractions","default":"true"},{"typedecl":"bool","typeflags":0,"name":"forceMinutes","default":"true"},{"typedecl":"bool","typeflags":0,"name":"forceHours","default":"false"},{"typedecl":"bool","typeflags":0,"name":"short","default":"false"}],"decl":"string Format(int64 time, bool fractions = true, bool forceMinutes = true, bool forceHours = false, bool short = false)","group":"Time","desc":"Format a game time (in milliseconds) to its race time representation. For example, 61234 will be \"1:01.234\".","flags":[]},{"ns":"Time","name":"ParseRelativeTime","returntypedecl":"uint64","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"time"}],"decl":"uint64 ParseRelativeTime(const string&in time)","group":"Time","desc":"Parses a relative game time from its race time representation.","flags":[]},{"ns":"Time","name":"Parse","returntypeid":67108921,"returntypename":"Info","returntypedecl":"Time::Info","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":0,"name":"stamp","default":"-1"}],"decl":"Info Parse(int64 stamp = -1)","group":"Time","desc":"Parses a time into a structure containing individial time components in the local time.","flags":[]},{"ns":"Time","name":"ParseUTC","returntypeid":67108921,"returntypename":"Info","returntypedecl":"Time::Info","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":0,"name":"stamp","default":"-1"}],"decl":"Info ParseUTC(int64 stamp = -1)","group":"Time","desc":"Parses a time into a structure containing individial time components in UTC.","flags":[]},{"ns":"Text","name":"ParseInt","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"},{"typedecl":"int","typeflags":0,"name":"base","default":"10","desc":"The base to use when parsing. To parse hexadecimal numbers, use base 16. Pass 0 to automatically determine the base."}],"decl":"int ParseInt(const string&in str, int base = 10)","group":"Text","desc":"Parses the given string as an integer.","flags":[]},{"ns":"Text","name":"ParseInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"},{"typedecl":"int","typeflags":0,"name":"base","default":"10","desc":"The base to use when parsing. To parse hexadecimal numbers, use base 16. Pass 0 to automatically determine the base."}],"decl":"int64 ParseInt64(const string&in str, int base = 10)","group":"Text","desc":"Parses the given string as a 64 bit integer.","flags":[]},{"ns":"Text","name":"ParseUInt","returntypedecl":"uint","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"},{"typedecl":"int","typeflags":0,"name":"base","default":"10","desc":"The base to use when parsing. To parse hexadecimal numbers, use base 16. Pass 0 to automatically determine the base."}],"decl":"uint ParseUInt(const string&in str, int base = 10)","group":"Text","desc":"Parses the given string as an unsigned integer.","flags":[]},{"ns":"Text","name":"ParseUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"},{"typedecl":"int","typeflags":0,"name":"base","default":"10","desc":"The base to use when parsing. To parse hexadecimal numbers, use base 16. Pass 0 to automatically determine the base."}],"decl":"uint64 ParseUInt64(const string&in str, int base = 10)","group":"Text","desc":"Parses the given string as a 64 bit unsigned integer.","flags":[]},{"ns":"Text","name":"ParseFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"float ParseFloat(const string&in str)","group":"Text","desc":"Parses the given string as a float.","flags":[]},{"ns":"Text","name":"ParseDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"double ParseDouble(const string&in str)","group":"Text","desc":"Parses the given string as a double.","flags":[]},{"ns":"Text","name":"ParseHexColor","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"str"}],"decl":"vec4 ParseHexColor(string str)","group":"Text","desc":"Parses the given string as a hexadecimal color such as \"#FF0000\".","flags":[]},{"ns":"Text","name":"TryParseInt","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"},{"typedecl":"int","typeflags":2,"name":""},{"typedecl":"int","typeflags":0,"name":"base","default":"10","desc":"The base to use when parsing the integer. To parse hexadecimal numbers, use base 16. Pass 0 to automatically determine the base."}],"decl":"bool TryParseInt(const string&in str, int&out, int base = 10)","group":"Text","desc":"Tries to parse the given string as an integer. This will return true only if the string was parsed entirely and was not empty.","flags":[]},{"ns":"Text","name":"TryParseInt64","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"},{"typedecl":"int64","typeflags":2,"name":""},{"typedecl":"int","typeflags":0,"name":"base","default":"10","desc":"The base to use when parsing the integer. To parse hexadecimal numbers, use base 16. Pass 0 to automatically determine the base."}],"decl":"bool TryParseInt64(const string&in str, int64&out, int base = 10)","group":"Text","desc":"Tries to parse the given string as a 64 bit integer. This will return true only if the string was parsed entirely and was not empty.","flags":[]},{"ns":"Text","name":"TryParseUInt","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"},{"typedecl":"int","typeflags":2,"name":""},{"typedecl":"int","typeflags":0,"name":"base","default":"10","desc":"The base to use when parsing the integer. To parse hexadecimal numbers, use base 16. Pass 0 to automatically determine the base."}],"decl":"bool TryParseUInt(const string&in str, int&out, int base = 10)","group":"Text","desc":"Tries to parse the given string as an unsigned integer. This will return true only if the string was parsed entirely and was not empty.","flags":[]},{"ns":"Text","name":"TryParseUInt64","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"},{"typedecl":"int64","typeflags":2,"name":""},{"typedecl":"int","typeflags":0,"name":"base","default":"10","desc":"The base to use when parsing the integer. To parse hexadecimal numbers, use base 16. Pass 0 to automatically determine the base."}],"decl":"bool TryParseUInt64(const string&in str, int64&out, int base = 10)","group":"Text","desc":"Tries to parse the given string as a 64 bit unsigned integer. This will return true only if the string was parsed entirely and was not empty.","flags":[]},{"ns":"Text","name":"TryParseFloat","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"},{"typedecl":"float","typeflags":2,"name":""}],"decl":"bool TryParseFloat(const string&in str, float&out)","group":"Text","desc":"Parses the given string as a float. This will return true only if the string was parsed entirely and was not empty.","flags":[]},{"ns":"Text","name":"TryParseDouble","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"},{"typedecl":"double","typeflags":2,"name":""}],"decl":"bool TryParseDouble(const string&in str, double&out)","group":"Text","desc":"Parses the given string as a double. This will return true only if the string was parsed entirely and was not empty.","flags":[]},{"ns":"Text","name":"TryParseHexColor","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"str"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":2,"name":""}],"decl":"bool TryParseHexColor(string str, vec4&out)","group":"Text","desc":"Parses the given string as a hexadecimal color such as \"#FF0000\". This will return true only if the string was parsed entirely and was not empty.","flags":[]},{"ns":"Text","name":"Format","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"int8","typeflags":0,"name":""}],"decl":"string Format(const string&in format, int8)","group":"Text","desc":"","flags":[]},{"ns":"Text","name":"Format","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"int16","typeflags":0,"name":""}],"decl":"string Format(const string&in format, int16)","group":"Text","desc":"","flags":[]},{"ns":"Text","name":"Format","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"int","typeflags":0,"name":""}],"decl":"string Format(const string&in format, int)","group":"Text","desc":"","flags":[]},{"ns":"Text","name":"Format","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"int64","typeflags":0,"name":""}],"decl":"string Format(const string&in format, int64)","group":"Text","desc":"","flags":[]},{"ns":"Text","name":"Format","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"uint8","typeflags":0,"name":""}],"decl":"string Format(const string&in format, uint8)","group":"Text","desc":"","flags":[]},{"ns":"Text","name":"Format","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"uint16","typeflags":0,"name":""}],"decl":"string Format(const string&in format, uint16)","group":"Text","desc":"","flags":[]},{"ns":"Text","name":"Format","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"uint","typeflags":0,"name":""}],"decl":"string Format(const string&in format, uint)","group":"Text","desc":"","flags":[]},{"ns":"Text","name":"Format","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"uint64","typeflags":0,"name":""}],"decl":"string Format(const string&in format, uint64)","group":"Text","desc":"","flags":[]},{"ns":"Text","name":"Format","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"float","typeflags":0,"name":""}],"decl":"string Format(const string&in format, float)","group":"Text","desc":"","flags":[]},{"ns":"Text","name":"Format","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format"},{"typedecl":"double","typeflags":0,"name":""}],"decl":"string Format(const string&in format, double)","group":"Text","desc":"","flags":[]},{"ns":"Text","name":"FormatPointer","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"string FormatPointer(uint64 ptr)","group":"Text","desc":"Formats a pointer to its more representative hexadecimal format, for example: 0x12345678","flags":[]},{"ns":"Text","name":"FormatGameColor","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"rgb"}],"decl":"string FormatGameColor(const vec3&in rgb)","group":"Text","desc":"Formats a color in Maniaplanet-style color formatting, for example: \"$f00\"","flags":[]},{"ns":"Text","name":"FormatOpenplanetColor","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"rgb"}],"decl":"string FormatOpenplanetColor(const vec3&in rgb)","group":"Text","desc":"Formats a color in Openplanet-style UI color formatting, for example: \"\\$f00\"","flags":[]},{"ns":"Text","name":"StripFormatCodes","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"s"}],"decl":"string StripFormatCodes(const string&in s)","group":"Text","desc":"Strips all Maniaplanet-style formatting codes from a string.","flags":[]},{"ns":"Text","name":"StripNonColorFormatCodes","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"s"}],"decl":"string StripNonColorFormatCodes(const string&in s)","group":"Text","desc":"Strips all non-color Maniaplanet-style formatting codes from a string.","flags":[]},{"ns":"Text","name":"OpenplanetFormatCodes","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"s"}],"decl":"string OpenplanetFormatCodes(const string&in s)","group":"Text","desc":"Takes a string, converts Maniaplanet-style formatting codes and turns them into Openplanet UI formatting codes. This will also get rid of all Openplanet-unsupported formatting codes.","flags":[]},{"ns":"Text","name":"StripOpenplanetFormatCodes","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"s"}],"decl":"string StripOpenplanetFormatCodes(const string&in s)","group":"Text","desc":"Strips all Openplanet-supported formatting codes from a string.","flags":[]},{"ns":"Text","name":"EncodeHex","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""},{"typedecl":"bool","typeflags":0,"name":"upper","default":"false","desc":"Whether to output uppercase characters."}],"decl":"string EncodeHex(const string&in, bool upper = false)","group":"Text","desc":"Encodes a string so that all characters are encoded as a sequence of hexadecimal bytes. Note that if you want to encode binary data, you should probably use MemoryBuffer::ReadToHex instead.","flags":[]},{"ns":"Text","name":"DecodeHex","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"string DecodeHex(const string&in)","group":"Text","desc":"Decodes a string where characters are encoded as a sequence of hexadecimal bytes. Note that if you want to decode binary data, you should probably use MemoryBuffer::WriteFromHex instead.","flags":[]},{"ns":"Text","name":"EncodeBase64","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""},{"typedecl":"bool","typeflags":0,"name":"url","default":"false","desc":"Whether to use URL-encoded unpadded base64 encoding or not."}],"decl":"string EncodeBase64(const string&in, bool url = false)","group":"Text","desc":"Encode a string as a base64 encoded string. Note that if you want to encode binary data, you should probably use MemoryBuffer::ReadToBase64 instead.","flags":[]},{"ns":"Text","name":"DecodeBase64","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""},{"typedecl":"bool","typeflags":0,"name":"url","default":"false","desc":"Whether to use URL-encoded unpadded base64 decoding or not."}],"decl":"string DecodeBase64(const string&in, bool url = false)","group":"Text","desc":"Decode a base64 encoded string to a string. Note that if you want to decode binary data, you should probably use MemoryBuffer::WriteFromBase64 instead.","flags":[]},{"ns":"Json","name":"Object","returntypeid":1140850702,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[],"decl":"Value@ Object()","group":"Json","desc":"Create a new Json object value.","flags":[]},{"ns":"Json","name":"Array","returntypeid":1140850702,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[],"decl":"Value@ Array()","group":"Json","desc":"Create a new Json array value.","flags":[]},{"ns":"Json","name":"Parse","returntypeid":1140850702,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"json"}],"decl":"Value@ Parse(const string&in json)","group":"Json","desc":"Deserializes (parses) a string into a Json value tree.","flags":[]},{"ns":"Json","name":"Write","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":1677721614,"typename":"Value","typedecl":"const Json::Value@","typeflags":0,"name":"value"},{"typedecl":"bool","typeflags":0,"name":"pretty","default":"false"}],"decl":"string Write(const Value@ value, bool pretty = false)","group":"Json","desc":"Serializes a Json value tree to a string.","flags":[]},{"ns":"Json","name":"FromFile","returntypeid":1140850702,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"Value@ FromFile(const string&in filename)","group":"Json","desc":"Deserialize (parses) contents of a file into a Json value tree. This can either be a file on disk or a file that's part of the plugin hierarchy.","flags":[]},{"ns":"Json","name":"ToFile","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"},{"typeid":1677721614,"typename":"Value","typedecl":"const Json::Value@","typeflags":0,"name":"value"},{"typedecl":"bool","typeflags":0,"name":"pretty","default":"false"}],"decl":"void ToFile(const string&in filename, const Value@ value, bool pretty = false)","group":"Json","desc":"Serializes a Json value tree to a file.","flags":[]},{"ns":"Net","name":"HttpGet","returntypeid":1140850748,"returntypename":"HttpRequest","returntypedecl":"Net::HttpRequest@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"url"}],"decl":"HttpRequest@ HttpGet(const string&in url)","group":"Net","desc":"Creates an HTTP GET request to the given URL and automatically starts the request.","flags":[]},{"ns":"Net","name":"HttpPost","returntypeid":1140850748,"returntypename":"HttpRequest","returntypedecl":"Net::HttpRequest@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"url"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"data","default":"\"\""},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"contentType","default":"\"application/x-www-form-urlencoded\""}],"decl":"HttpRequest@ HttpPost(const string&in url, const string&in data = \"\", const string&in contentType = \"application/x-www-form-urlencoded\")","group":"Net","desc":"Creates an HTTP POST request to the given URL and automatically starts the request.","flags":[]},{"ns":"Net","name":"HttpHead","returntypeid":1140850748,"returntypename":"HttpRequest","returntypedecl":"Net::HttpRequest@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"url"}],"decl":"HttpRequest@ HttpHead(const string&in url)","group":"Net","desc":"Creates an HTTP HEAD request to the given URL and automatically starts the request.","flags":[]},{"ns":"Net","name":"HttpPut","returntypeid":1140850748,"returntypename":"HttpRequest","returntypedecl":"Net::HttpRequest@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"url"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"data","default":"\"\""},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"contentType","default":"\"application/x-www-form-urlencoded\""}],"decl":"HttpRequest@ HttpPut(const string&in url, const string&in data = \"\", const string&in contentType = \"application/x-www-form-urlencoded\")","group":"Net","desc":"Creates an HTTP PUT request to the given URL and automatically starts the request.","flags":[]},{"ns":"Net","name":"HttpDelete","returntypeid":1140850748,"returntypename":"HttpRequest","returntypedecl":"Net::HttpRequest@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"url"}],"decl":"HttpRequest@ HttpDelete(const string&in url)","group":"Net","desc":"Creates an HTTP DELETE request to the given URL and automatically starts the request.","flags":[]},{"ns":"Net","name":"HttpPatch","returntypeid":1140850748,"returntypename":"HttpRequest","returntypedecl":"Net::HttpRequest@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"url"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"data","default":"\"\""},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"contentType","default":"\"application/x-www-form-urlencoded\""}],"decl":"HttpRequest@ HttpPatch(const string&in url, const string&in data = \"\", const string&in contentType = \"application/x-www-form-urlencoded\")","group":"Net","desc":"Creates an HTTP PATCH request to the given URL and automatically starts the request.","flags":[]},{"ns":"Net","name":"UrlEncode","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"string UrlEncode(const string&in str)","group":"Net","desc":"URL encode a string.","flags":[]},{"ns":"Net","name":"UrlDecode","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"string UrlDecode(const string&in str)","group":"Net","desc":"URL decode a string.","flags":[]},{"ns":"Reflection","name":"GetType","returntypeid":1677721664,"returntypename":"MwClassInfo","returntypedecl":"const Reflection::MwClassInfo@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"const MwClassInfo@ GetType(const string&in name)","group":"Reflection","desc":"Get the type info of the given name.","flags":[]},{"ns":"Reflection","name":"GetType","returntypeid":1677721664,"returntypename":"MwClassInfo","returntypedecl":"const Reflection::MwClassInfo@","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"id"}],"decl":"const MwClassInfo@ GetType(uint id)","group":"Reflection","desc":"Get the type info of the given ID.","flags":[]},{"ns":"Reflection","name":"TypeOf","returntypeid":1677721664,"returntypename":"MwClassInfo","returntypedecl":"const Reflection::MwClassInfo@","returntypeflags":0,"args":[{"typeid":1140850701,"typename":"CMwNod","typedecl":"CMwNod@","typeflags":0,"name":"nod"}],"decl":"const MwClassInfo@ TypeOf(CMwNod@ nod)","group":"Reflection","desc":"Get the type info of the given nod.","flags":[]},{"ns":"Reflection","name":"GetRefCount","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":1140850701,"typename":"CMwNod","typedecl":"CMwNod@","typeflags":0,"name":"nod"}],"decl":"int GetRefCount(CMwNod@ nod)","group":"Reflection","desc":"Get the reference count of the given nod.","flags":[]},{"ns":"Meta","name":"StartWithRunContext","returntypeid":1140850727,"returntypename":"awaitable","returntypedecl":"awaitable@","returntypeflags":0,"args":[{"typeid":74,"typename":"RunContext","typedecl":"Meta::RunContext","typeflags":0,"name":"runContext"},{"typeid":1140850720,"typename":"CoroutineFunc","typedecl":"CoroutineFunc@","typeflags":0,"name":"func"}],"decl":"awaitable@ StartWithRunContext(RunContext runContext, CoroutineFunc@ func)","group":"Core","desc":"Starts a new yieldable coroutine from the given function. Function should be a declaration of 'void Func()'.","flags":[]},{"ns":"Meta","name":"StartWithRunContext","returntypeid":1140850727,"returntypename":"awaitable","returntypedecl":"awaitable@","returntypeflags":0,"args":[{"typeid":74,"typename":"RunContext","typedecl":"Meta::RunContext","typeflags":0,"name":"runContext"},{"typeid":1140850721,"typename":"CoroutineFuncUserdata","typedecl":"CoroutineFuncUserdata@","typeflags":0,"name":"func"},{"typeid":67108895,"typename":"ref","typedecl":"ref","typeflags":0,"name":"userdata"}],"decl":"awaitable@ StartWithRunContext(RunContext runContext, CoroutineFuncUserdata@ func, ref userdata)","group":"Core","desc":"Starts a new yieldable coroutine from the given function which also provides a userdata handle parameter. Function should be a declaration of 'void Func(ref@)'.","flags":[]},{"ns":"Meta","name":"StartWithRunContext","returntypeid":1140850727,"returntypename":"awaitable","returntypedecl":"awaitable@","returntypeflags":0,"args":[{"typeid":74,"typename":"RunContext","typedecl":"Meta::RunContext","typeflags":0,"name":"runContext"},{"typeid":1140850722,"typename":"CoroutineFuncUserdataInt64","typedecl":"CoroutineFuncUserdataInt64@","typeflags":0,"name":"func"},{"typedecl":"int","typeflags":4,"name":"userdata"}],"decl":"awaitable@ StartWithRunContext(RunContext runContext, CoroutineFuncUserdataInt64@ func, const int userdata)","group":"Core","desc":"Starts a new yieldable coroutine from the given function which also provides a userdata signed integer. Function should be a declaration of 'void Func(int64)'.","flags":[]},{"ns":"Meta","name":"StartWithRunContext","returntypeid":1140850727,"returntypename":"awaitable","returntypedecl":"awaitable@","returntypeflags":0,"args":[{"typeid":74,"typename":"RunContext","typedecl":"Meta::RunContext","typeflags":0,"name":"runContext"},{"typeid":1140850722,"typename":"CoroutineFuncUserdataInt64","typedecl":"CoroutineFuncUserdataInt64@","typeflags":0,"name":"func"},{"typedecl":"int64","typeflags":4,"name":"userdata"}],"decl":"awaitable@ StartWithRunContext(RunContext runContext, CoroutineFuncUserdataInt64@ func, const int64 userdata)","group":"Core","desc":"Starts a new yieldable coroutine from the given function which also provides a userdata signed integer. Function should be a declaration of 'void Func(int64)'.","flags":[]},{"ns":"Meta","name":"StartWithRunContext","returntypeid":1140850727,"returntypename":"awaitable","returntypedecl":"awaitable@","returntypeflags":0,"args":[{"typeid":74,"typename":"RunContext","typedecl":"Meta::RunContext","typeflags":0,"name":"runContext"},{"typeid":1140850723,"typename":"CoroutineFuncUserdataUint64","typedecl":"CoroutineFuncUserdataUint64@","typeflags":0,"name":"func"},{"typedecl":"uint","typeflags":4,"name":"userdata"}],"decl":"awaitable@ StartWithRunContext(RunContext runContext, CoroutineFuncUserdataUint64@ func, const uint userdata)","group":"Core","desc":"Starts a new yieldable coroutine from the given function which also provides a userdata unsigned integer. Function should be a declaration of 'void Func(uint64)'.","flags":[]},{"ns":"Meta","name":"StartWithRunContext","returntypeid":1140850727,"returntypename":"awaitable","returntypedecl":"awaitable@","returntypeflags":0,"args":[{"typeid":74,"typename":"RunContext","typedecl":"Meta::RunContext","typeflags":0,"name":"runContext"},{"typeid":1140850723,"typename":"CoroutineFuncUserdataUint64","typedecl":"CoroutineFuncUserdataUint64@","typeflags":0,"name":"func"},{"typedecl":"uint64","typeflags":4,"name":"userdata"}],"decl":"awaitable@ StartWithRunContext(RunContext runContext, CoroutineFuncUserdataUint64@ func, const uint64 userdata)","group":"Core","desc":"Starts a new yieldable coroutine from the given function which also provides a userdata unsigned integer. Function should be a declaration of 'void Func(uint64)'.","flags":[]},{"ns":"Meta","name":"StartWithRunContext","returntypeid":1140850727,"returntypename":"awaitable","returntypedecl":"awaitable@","returntypeflags":0,"args":[{"typeid":74,"typename":"RunContext","typedecl":"Meta::RunContext","typeflags":0,"name":"runContext"},{"typeid":1140850724,"typename":"CoroutineFuncUserdataDouble","typedecl":"CoroutineFuncUserdataDouble@","typeflags":0,"name":"func"},{"typedecl":"double","typeflags":4,"name":"userdata"}],"decl":"awaitable@ StartWithRunContext(RunContext runContext, CoroutineFuncUserdataDouble@ func, const double userdata)","group":"Core","desc":"Starts a new yieldable coroutine from the given function which also provides a userdata floating point number. Function should be a declaration of 'void Func(double)'.","flags":[]},{"ns":"Meta","name":"StartWithRunContext","returntypeid":1140850727,"returntypename":"awaitable","returntypedecl":"awaitable@","returntypeflags":0,"args":[{"typeid":74,"typename":"RunContext","typedecl":"Meta::RunContext","typeflags":0,"name":"runContext"},{"typeid":1140850726,"typename":"CoroutineFuncUserdataString","typedecl":"CoroutineFuncUserdataString@","typeflags":0,"name":"func"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"userdata"}],"decl":"awaitable@ StartWithRunContext(RunContext runContext, CoroutineFuncUserdataString@ func, const string&in userdata)","group":"Core","desc":"Starts a new yieldable coroutine from the given function which also provides a userdata string. Function should be a declaration of 'void Func(const string &in)'.","flags":[]},{"ns":"Meta","name":"GetPreferredTextEditor","returntypeid":65,"returntypename":"TextEditorType","returntypedecl":"Meta::TextEditorType","returntypeflags":0,"args":[],"decl":"TextEditorType GetPreferredTextEditor()","group":"Meta","desc":"Gets the preferred text editor.","flags":[]},{"ns":"Meta","name":"OpenTextEditor","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path","desc":"The path to open. This can be either a filename or a directory."},{"typedecl":"int","typeflags":0,"name":"line","default":"0","desc":"The line number to navigate to in the editor. Only works when passing a filename in `path`."}],"decl":"void OpenTextEditor(const string&in path, int line = 0)","group":"Meta","desc":"Opens the preferred text editor with the given path and line number.","flags":[]},{"ns":"Meta","name":"ExecutingPlugin","returntypeid":1140850758,"returntypename":"Plugin","returntypedecl":"Meta::Plugin@","returntypeflags":0,"args":[],"decl":"Plugin@ ExecutingPlugin()","group":"Meta","desc":"Gets the currently executing plugin.","flags":[]},{"ns":"Meta","name":"AllPlugins","returntypeid":1342180701,"returntypename":"array","returntypedecl":"Meta::Plugin@[]@","returntypeflags":0,"args":[],"decl":"Plugin@[]@ AllPlugins()","group":"Meta","desc":"Gets all plugins that are loaded.","flags":[]},{"ns":"Meta","name":"UnloadedPlugins","returntypeid":1342180702,"returntypename":"array","returntypedecl":"Meta::UnloadedPluginInfo[]@","returntypeflags":0,"args":[],"decl":"UnloadedPluginInfo[]@ UnloadedPlugins()","group":"Meta","desc":"Gets the identifiers of all unloaded plugins. Note that this function may be slow!","flags":[]},{"ns":"Meta","name":"GetPluginFromID","returntypeid":1140850758,"returntypename":"Plugin","returntypedecl":"Meta::Plugin@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"id"}],"decl":"Plugin@ GetPluginFromID(const string&in id)","group":"Meta","desc":"Gets a plugin from its ID.","flags":[]},{"ns":"Meta","name":"GetPluginFromSiteID","returntypeid":1140850758,"returntypename":"Plugin","returntypedecl":"Meta::Plugin@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"siteID"}],"decl":"Plugin@ GetPluginFromSiteID(int siteID)","group":"Meta","desc":"Gets a plugin from its site ID, if set.","flags":[]},{"ns":"Meta","name":"LoadPlugin","returntypeid":1140850758,"returntypename":"Plugin","returntypedecl":"Meta::Plugin@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"},{"typeid":67,"typename":"PluginSource","typedecl":"Meta::PluginSource","typeflags":0,"name":"source"},{"typeid":66,"typename":"PluginType","typedecl":"Meta::PluginType","typeflags":0,"name":"type"}],"decl":"Plugin@ LoadPlugin(const string&in path, PluginSource source, PluginType type)","group":"Meta","desc":"Loads a plugin into memory from the given absolute path and returns a handle to the plugin.","flags":[]},{"ns":"Meta","name":"UnloadPlugin","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850758,"typename":"Plugin","typedecl":"Meta::Plugin@","typeflags":0,"name":"plugin"}],"decl":"void UnloadPlugin(Plugin@ plugin)","group":"Meta","desc":"Queues a plugin to be unloaded from memory completely when it is safe to do so. Note that this will invalidate the plugin object passed in on the next frame! Do not use the Plugin handle after calling this!","flags":[]},{"ns":"Meta","name":"ReloadPlugin","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850758,"typename":"Plugin","typedecl":"Meta::Plugin@","typeflags":0,"name":"plugin"}],"decl":"void ReloadPlugin(Plugin@ plugin)","group":"Meta","desc":"Queues a plugin to be reloaded when it is safe to do so. Note that this will invalidate the plugin object passed in on the next frame! Do not use the Plugin handle after calling this!","flags":[]},{"ns":"Meta","name":"SaveSettings","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void SaveSettings()","group":"Meta","desc":"Forces Openplanet to save its settings immediately. Normally this happens on game shutdown or when the settings window is closed. You should not have to call this function unless you know you really need to!","flags":[]},{"ns":"Meta","name":"IsDeveloperMode","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsDeveloperMode()","group":"Meta","desc":"Returns true if developer mode is currently enabled.","flags":[]},{"ns":"Meta","name":"IsSchoolModeWhitelisted","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsSchoolModeWhitelisted()","group":"Meta","desc":"Returns true when the current session is whitelisted by school mode, and school mode is enabled. If you want to check if school mode is enabled, use the `SIG_SCHOOL` preprocessor define instead.","flags":[]},{"ns":"Meta","name":"OpenplanetVersion","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string OpenplanetVersion()","group":"Core","desc":"Returns the current version of Openplanet.","flags":[]},{"ns":"Meta","name":"OpenplanetVersionDate","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string OpenplanetVersionDate()","group":"Core","desc":"Returns the current date of Openplanet's build.","flags":[]},{"ns":"Meta","name":"OpenplanetBuildInfo","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string OpenplanetBuildInfo()","group":"Core","desc":"Returns the current build info of Openplanet's build.","flags":[]},{"ns":"Meta","name":"LoadOverlayStyle","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"void LoadOverlayStyle(const string&in path)"},{"ns":"Meta","name":"ReloadOverlayStyle","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void ReloadOverlayStyle()"},{"ns":"Meta","name":"ResetOverlayStyle","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void ResetOverlayStyle()"},{"ns":"Meta","name":"Terminate","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Terminate()","group":"Meta","desc":"Immediately terminates the game process. This is the same as clicking \"Exit\" in the Openplanet menu.","flags":[]},{"ns":"Dev","name":"Sleep","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"ms"}],"decl":"void Sleep(uint ms)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"BaseAddress","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 BaseAddress()","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"BaseAddressEnd","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 BaseAddressEnd()","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"FindPattern","returntypedecl":"uint64","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"pattern"}],"decl":"uint64 FindPattern(const string&in pattern)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Patch","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"pattern"}],"decl":"string Patch(uint64 ptr, const string&in pattern)","group":"Dev","desc":"Returns the original bytes as a backup.","flags":[]},{"ns":"Dev","name":"Hook","returntypeid":1140850766,"returntypename":"HookInfo","returntypedecl":"Dev::HookInfo@","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr","desc":"The pointer"},{"typedecl":"int","typeflags":0,"name":"padding","desc":"The padding"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"func","desc":"The name of the function to call"},{"typedecl":"int","typeflags":0,"name":"pushRegisters","default":"0","desc":"Which registers to push (see `Dev::PushRegisters`)"}],"decl":"HookInfo@ Hook(uint64 ptr, int padding, const string&in func, int pushRegisters = 0)","group":"Dev","desc":"Hooks directly into game code. You should unhook this manually using `Dev::Unhook()`. The function accepts arbitrarily-ordered parameters named as x86 registers. For example, you could set a parameter `CMwNod@ rcx`.","flags":[]},{"ns":"Dev","name":"Unhook","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850766,"typename":"HookInfo","typedecl":"Dev::HookInfo@","typeflags":0,"name":"hook"}],"decl":"void Unhook(HookInfo@ hook)","group":"Dev","desc":"Unhooks a registered hook.","flags":[]},{"ns":"Dev","name":"InterceptProc","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"className"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"procName"},{"typeid":1140850767,"typename":"ProcIntercept","typedecl":"Dev::ProcIntercept@","typeflags":0,"name":"func"}],"decl":"void InterceptProc(const string&in className, const string&in procName, ProcIntercept@ func)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"InterceptProc","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"className"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"procName"},{"typeid":1140850768,"typename":"ProcInterceptEx","typedecl":"Dev::ProcInterceptEx@","typeflags":0,"name":"func"}],"decl":"void InterceptProc(const string&in className, const string&in procName, ProcInterceptEx@ func)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ResetInterceptProc","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"className"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"procName"}],"decl":"void ResetInterceptProc(const string&in className, const string&in procName)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ResetInterceptProc","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"className"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"procName"},{"typeid":1140850767,"typename":"ProcIntercept","typedecl":"Dev::ProcIntercept@","typeflags":0,"name":"func"}],"decl":"void ResetInterceptProc(const string&in className, const string&in procName, ProcIntercept@ func)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ResetInterceptProc","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"className"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"procName"},{"typeid":1140850768,"typename":"ProcInterceptEx","typedecl":"Dev::ProcInterceptEx@","typeflags":0,"name":"func"}],"decl":"void ResetInterceptProc(const string&in className, const string&in procName, ProcInterceptEx@ func)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Allocate","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"size"},{"typedecl":"bool","typeflags":0,"name":"executable","default":"false"}],"decl":"uint64 Allocate(uint size, bool executable = false)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Free","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"void Free(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"DebugBreak","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void DebugBreak()","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Read","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"uint64","typeflags":0,"name":"size"}],"decl":"string Read(uint64 ptr, uint64 size)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"int8 ReadInt8(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"int16 ReadInt16(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"int ReadInt32(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"int64 ReadInt64(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"uint8 ReadUInt8(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"uint16 ReadUInt16(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"uint ReadUInt32(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"uint64 ReadUInt64(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"float ReadFloat(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"double ReadDouble(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadVec2","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"vec2 ReadVec2(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadVec3","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"vec3 ReadVec3(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadVec4","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"vec4 ReadVec4(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadInt2","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"int2 ReadInt2(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadInt3","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"int3 ReadInt3(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadNat2","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"nat2 ReadNat2(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadNat3","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"nat3 ReadNat3(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadIso3","returntypeid":67108911,"returntypename":"iso3","returntypedecl":"iso3","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"iso3 ReadIso3(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadIso4","returntypeid":67108913,"returntypename":"iso4","returntypedecl":"iso4","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"iso4 ReadIso4(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadCString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"uint","typeflags":0,"name":"length"}],"decl":"string ReadCString(uint64 ptr, uint length)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"ReadCString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"string ReadCString(uint64 ptr)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SafeRead","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"uint64","typeflags":0,"name":"size"}],"decl":"string SafeRead(uint64 ptr, uint64 size)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeReadInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"int8 SafeReadInt8(uint64 ptr)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeReadInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"int16 SafeReadInt16(uint64 ptr)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeReadInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"int SafeReadInt32(uint64 ptr)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeReadInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"int64 SafeReadInt64(uint64 ptr)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeReadUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"uint8 SafeReadUInt8(uint64 ptr)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeReadUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"uint16 SafeReadUInt16(uint64 ptr)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeReadUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"uint SafeReadUInt32(uint64 ptr)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeReadUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"uint64 SafeReadUInt64(uint64 ptr)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeReadFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"float SafeReadFloat(uint64 ptr)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeReadDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"double SafeReadDouble(uint64 ptr)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeReadVec2","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"vec2 SafeReadVec2(uint64 ptr)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeReadVec3","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"vec3 SafeReadVec3(uint64 ptr)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeReadVec4","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"vec4 SafeReadVec4(uint64 ptr)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeReadInt2","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"int2 SafeReadInt2(uint64 ptr)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeReadInt3","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"int3 SafeReadInt3(uint64 ptr)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeReadNat2","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"nat2 SafeReadNat2(uint64 ptr)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeReadNat3","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"nat3 SafeReadNat3(uint64 ptr)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeReadIso3","returntypeid":67108911,"returntypename":"iso3","returntypedecl":"iso3","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"iso3 SafeReadIso3(uint64 ptr)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeReadIso4","returntypeid":67108913,"returntypename":"iso4","returntypedecl":"iso4","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"}],"decl":"iso4 SafeReadIso4(uint64 ptr)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeReadCString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"uint","typeflags":0,"name":"length"}],"decl":"string SafeReadCString(uint64 ptr, uint length)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"pattern"}],"decl":"void Write(uint64 ptr, const string&in pattern)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"int8","typeflags":0,"name":"i"}],"decl":"void Write(uint64 ptr, int8 i)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"int16","typeflags":0,"name":"i"}],"decl":"void Write(uint64 ptr, int16 i)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"int","typeflags":0,"name":"i"}],"decl":"void Write(uint64 ptr, int i)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"int64","typeflags":0,"name":"i"}],"decl":"void Write(uint64 ptr, int64 i)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"uint8","typeflags":0,"name":"i"}],"decl":"void Write(uint64 ptr, uint8 i)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"uint16","typeflags":0,"name":"i"}],"decl":"void Write(uint64 ptr, uint16 i)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"uint","typeflags":0,"name":"i"}],"decl":"void Write(uint64 ptr, uint i)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"uint64","typeflags":0,"name":"i"}],"decl":"void Write(uint64 ptr, uint64 i)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"void Write(uint64 ptr, float f)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"double","typeflags":0,"name":"f"}],"decl":"void Write(uint64 ptr, double f)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"v"}],"decl":"void Write(uint64 ptr, const vec2&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"v"}],"decl":"void Write(uint64 ptr, const vec3&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"v"}],"decl":"void Write(uint64 ptr, const vec4&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108907,"typename":"int2","typedecl":"int2","typeflags":5,"name":"v"}],"decl":"void Write(uint64 ptr, const int2&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108908,"typename":"int3","typedecl":"int3","typeflags":5,"name":"v"}],"decl":"void Write(uint64 ptr, const int3&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108909,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":"v"}],"decl":"void Write(uint64 ptr, const nat2&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108910,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":"v"}],"decl":"void Write(uint64 ptr, const nat3&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108911,"typename":"iso3","typedecl":"iso3","typeflags":5,"name":"v"}],"decl":"void Write(uint64 ptr, const iso3&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108913,"typename":"iso4","typedecl":"iso4","typeflags":5,"name":"v"}],"decl":"void Write(uint64 ptr, const iso4&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"WriteCString","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"void WriteCString(uint64 ptr, const string&in str)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SafeWrite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"pattern"}],"decl":"void SafeWrite(uint64 ptr, const string&in pattern)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeWrite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"int8","typeflags":0,"name":"i"}],"decl":"void SafeWrite(uint64 ptr, int8 i)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeWrite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"int16","typeflags":0,"name":"i"}],"decl":"void SafeWrite(uint64 ptr, int16 i)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeWrite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"int","typeflags":0,"name":"i"}],"decl":"void SafeWrite(uint64 ptr, int i)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeWrite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"int64","typeflags":0,"name":"i"}],"decl":"void SafeWrite(uint64 ptr, int64 i)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeWrite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"uint8","typeflags":0,"name":"i"}],"decl":"void SafeWrite(uint64 ptr, uint8 i)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeWrite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"uint16","typeflags":0,"name":"i"}],"decl":"void SafeWrite(uint64 ptr, uint16 i)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeWrite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"uint","typeflags":0,"name":"i"}],"decl":"void SafeWrite(uint64 ptr, uint i)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeWrite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"uint64","typeflags":0,"name":"i"}],"decl":"void SafeWrite(uint64 ptr, uint64 i)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeWrite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"float","typeflags":0,"name":"f"}],"decl":"void SafeWrite(uint64 ptr, float f)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeWrite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typedecl":"double","typeflags":0,"name":"f"}],"decl":"void SafeWrite(uint64 ptr, double f)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeWrite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"v"}],"decl":"void SafeWrite(uint64 ptr, const vec2&in v)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeWrite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"v"}],"decl":"void SafeWrite(uint64 ptr, const vec3&in v)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeWrite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"v"}],"decl":"void SafeWrite(uint64 ptr, const vec4&in v)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeWrite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108907,"typename":"int2","typedecl":"int2","typeflags":5,"name":"v"}],"decl":"void SafeWrite(uint64 ptr, const int2&in v)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeWrite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108908,"typename":"int3","typedecl":"int3","typeflags":5,"name":"v"}],"decl":"void SafeWrite(uint64 ptr, const int3&in v)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeWrite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108909,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":"v"}],"decl":"void SafeWrite(uint64 ptr, const nat2&in v)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeWrite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108910,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":"v"}],"decl":"void SafeWrite(uint64 ptr, const nat3&in v)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeWrite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108911,"typename":"iso3","typedecl":"iso3","typeflags":5,"name":"v"}],"decl":"void SafeWrite(uint64 ptr, const iso3&in v)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeWrite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108913,"typename":"iso4","typedecl":"iso4","typeflags":5,"name":"v"}],"decl":"void SafeWrite(uint64 ptr, const iso4&in v)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"SafeWriteCString","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ptr"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"void SafeWriteCString(uint64 ptr, const string&in str)","group":"Dev","desc":"Safe version of the simpler function. Note that this has significant overhead.","flags":[]},{"ns":"Dev","name":"Get","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"T Get<T>(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"int8 GetOffsetInt8(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"int16 GetOffsetInt16(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"int GetOffsetInt32(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"int64 GetOffsetInt64(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetUint8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"uint8 GetOffsetUint8(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetUint16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"uint16 GetOffsetUint16(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetUint32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"uint GetOffsetUint32(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetUint64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"uint64 GetOffsetUint64(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"float GetOffsetFloat(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"double GetOffsetDouble(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetVec2","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"vec2 GetOffsetVec2(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetVec3","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"vec3 GetOffsetVec3(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetVec4","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"vec4 GetOffsetVec4(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetInt2","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"int2 GetOffsetInt2(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetInt3","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"int3 GetOffsetInt3(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetNat2","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"nat2 GetOffsetNat2(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetNat3","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"nat3 GetOffsetNat3(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetIso3","returntypeid":67108911,"returntypename":"iso3","returntypedecl":"iso3","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"iso3 GetOffsetIso3(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetIso4","returntypeid":67108913,"returntypename":"iso4","returntypedecl":"iso4","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"iso4 GetOffsetIso4(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"CMwNod@ GetOffsetNod(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"GetOffsetString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"}],"decl":"string GetOffsetString(const ?&in nod, uint offset)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"Set","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typeid":67112287,"typename":"T","typedecl":"T","typeflags":5,"name":"v"}],"decl":"void Set<T>(const ?&in nod, uint offset, const T&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typedecl":"int8","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const int8&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typedecl":"int16","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const int16&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typedecl":"int","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const int&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typedecl":"int64","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const int64&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typedecl":"uint8","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const uint8&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typedecl":"uint16","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const uint16&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typedecl":"uint","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const uint&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typedecl":"uint64","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const uint64&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typedecl":"float","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const float&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typedecl":"double","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const double&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const vec2&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const vec3&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const vec4&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typeid":67108907,"typename":"int2","typedecl":"int2","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const int2&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typeid":67108908,"typename":"int3","typedecl":"int3","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const int3&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typeid":67108909,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const nat2&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typeid":67108910,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const nat3&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typeid":67108911,"typename":"iso3","typedecl":"iso3","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const iso3&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typeid":67108913,"typename":"iso4","typedecl":"iso4","typeflags":5,"name":"v"}],"decl":"void SetOffset(const ?&in nod, uint offset, const iso4&in v)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typeid":1140850701,"typename":"CMwNod","typedecl":"CMwNod@","typeflags":0,"name":"newNod"}],"decl":"void SetOffset(const ?&in nod, uint offset, CMwNod@ newNod)","group":"Dev","desc":"","flags":[]},{"ns":"Dev","name":"SetOffset","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":"nod"},{"typedecl":"uint","typeflags":0,"name":"offset"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"void SetOffset(const ?&in nod, uint offset, const string&in str)","group":"Dev","desc":"","flags":[]},{"ns":"Permissions","name":"DisplayClubAds","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool DisplayClubAds()","group":"Permissions","desc":"User can see ads about club edition","flags":[]},{"ns":"Permissions","name":"DisplayStandardAds","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool DisplayStandardAds()","group":"Permissions","desc":"User can see ads about standard edition","flags":[]},{"ns":"Permissions","name":"CanRemoveAds","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CanRemoveAds()","group":"Permissions","desc":"User can remove ads","flags":[]},{"ns":"Permissions","name":"CreateItemAndMod","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateItemAndMod()","group":"Permissions","desc":"User can create items and mods","flags":[]},{"ns":"Permissions","name":"CreateLocalMap","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateLocalMap()","group":"Permissions","desc":"User can create a map locally","flags":[]},{"ns":"Permissions","name":"CreateLocalReplay","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateLocalReplay()","group":"Permissions","desc":"User can save a video in the replay editor","flags":[]},{"ns":"Permissions","name":"CreateLocalSkin","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateLocalSkin()","group":"Permissions","desc":"User can create a skin locally","flags":[]},{"ns":"Permissions","name":"PlayRecords","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayRecords()","group":"Permissions","desc":"User can play against map's records","flags":[]},{"ns":"Permissions","name":"ViewRecords","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool ViewRecords()","group":"Permissions","desc":"User can view the map's records","flags":[]},{"ns":"Permissions","name":"ViewPBGhostMultiplayer","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool ViewPBGhostMultiplayer()","group":"Permissions","desc":"User can view their PB ghost when playing in multiplayer modes","flags":[]},{"ns":"Permissions","name":"InGameChat","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool InGameChat()","group":"Permissions","desc":"User can chat ingame","flags":[]},{"ns":"Permissions","name":"OpenAdvancedMapEditor","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool OpenAdvancedMapEditor()","group":"Permissions","desc":"User can open the advanced map editor","flags":[]},{"ns":"Permissions","name":"OpenReplayEditor","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool OpenReplayEditor()","group":"Permissions","desc":"User can open the replay editor","flags":[]},{"ns":"Permissions","name":"OpenSimpleMapEditor","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool OpenSimpleMapEditor()","group":"Permissions","desc":"User can open the simple map editor","flags":[]},{"ns":"Permissions","name":"OpenSkinEditor","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool OpenSkinEditor()","group":"Permissions","desc":"User can open the skin editor","flags":[]},{"ns":"Permissions","name":"PlayAgainstReplay","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayAgainstReplay()","group":"Permissions","desc":"User can play against a replay","flags":[]},{"ns":"Permissions","name":"PlayArcadeChannel","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayArcadeChannel()","group":"Permissions","desc":"User can play on the arcade channel","flags":[]},{"ns":"Permissions","name":"PlayCurrentOfficialMonthlyCampaign","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayCurrentOfficialMonthlyCampaign()","group":"Permissions","desc":"User can play the current official monthly campaign","flags":[]},{"ns":"Permissions","name":"PlayCurrentOfficialQuarterlyCampaign","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayCurrentOfficialQuarterlyCampaign()","group":"Permissions","desc":"User can play the current official quarterly campaign","flags":[]},{"ns":"Permissions","name":"PlayHotSeat","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayHotSeat()","group":"Permissions","desc":"User can play the HotSeat mode","flags":[]},{"ns":"Permissions","name":"PlayLocalMap","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayLocalMap()","group":"Permissions","desc":"User can play a local map","flags":[]},{"ns":"Permissions","name":"PlayMatchmaking","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayMatchmaking()","group":"Permissions","desc":"User can play matchmaking","flags":[]},{"ns":"Permissions","name":"PlayOnlineCompetition","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayOnlineCompetition()","group":"Permissions","desc":"User can play online competitions","flags":[]},{"ns":"Permissions","name":"PlayPastOfficialMonthlyCampaign","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayPastOfficialMonthlyCampaign()","group":"Permissions","desc":"User can play the past official monthly campaigns","flags":[]},{"ns":"Permissions","name":"PlayPastOfficialQuarterlyCampaign","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayPastOfficialQuarterlyCampaign()","group":"Permissions","desc":"User can play the past official quarterly campaigns","flags":[]},{"ns":"Permissions","name":"PlayPublicClubCampaign","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayPublicClubCampaign()","group":"Permissions","desc":"User can play public club campaigns","flags":[]},{"ns":"Permissions","name":"PlayPublicClubRoom","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayPublicClubRoom()","group":"Permissions","desc":"User can play on the public club rooms","flags":[]},{"ns":"Permissions","name":"PlaySplitscreen","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlaySplitscreen()","group":"Permissions","desc":"User can play the splitscreen mode","flags":[]},{"ns":"Permissions","name":"PlayTOTDChannel","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayTOTDChannel()","group":"Permissions","desc":"User can play the TOTD channel and COTD","flags":[]},{"ns":"Permissions","name":"CreateClub","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateClub()","group":"Permissions","desc":"User can create a club","flags":[]},{"ns":"Permissions","name":"CreateActivity","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateActivity()","group":"Permissions","desc":"User can create a club activity","flags":[]},{"ns":"Permissions","name":"CreateClubCompetition","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateClubCompetition()","group":"Permissions","desc":"User can create a competition in a club","flags":[]},{"ns":"Permissions","name":"ViewClub","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool ViewClub()","group":"Permissions","desc":"User can display a club page","flags":[]},{"ns":"Permissions","name":"JoinClub","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool JoinClub()","group":"Permissions","desc":"User can join a club","flags":[]},{"ns":"Permissions","name":"PlayPrivateActivity","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool PlayPrivateActivity()","group":"Permissions","desc":"User can play a private club activity","flags":[]},{"ns":"Permissions","name":"UseCustomCollection","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool UseCustomCollection()","group":"Permissions","desc":"User can use a custom item collection","flags":[]},{"ns":"Permissions","name":"AccessServerReview","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool AccessServerReview()","group":"Permissions","desc":"User can access the server review","flags":[]},{"ns":"Permissions","name":"CreateAndUploadMap","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateAndUploadMap()","group":"Permissions","desc":"User can upload a map to server review","flags":[]},{"ns":"Permissions","name":"CreateGameMode","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateGameMode()","group":"Permissions","desc":"User can create game modes","flags":[]},{"ns":"Permissions","name":"CreateLocalServer","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateLocalServer()","group":"Permissions","desc":"User can create a local server","flags":[]},{"ns":"Permissions","name":"FindLocalServer","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool FindLocalServer()","group":"Permissions","desc":"User can find a local server","flags":[]},{"ns":"Permissions","name":"CreateAndUploadSkin","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CreateAndUploadSkin()","group":"Permissions","desc":"User can save a skin (upload)","flags":[]},{"ns":"Permissions","name":"UseCustomSkin","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool UseCustomSkin()","group":"Permissions","desc":"User can use a custom skin","flags":[]},{"ns":"Permissions","name":"CanSubscribeToClub","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CanSubscribeToClub()","group":"Permissions","desc":"User can upgrade its game to the club edition","flags":[]},{"ns":"Permissions","name":"CanSubscribeToStandard","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CanSubscribeToStandard()","group":"Permissions","desc":"User can upgrade its game to the standard edition","flags":[]},{"ns":"Permissions","name":"GainXP","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool GainXP()","group":"Permissions","desc":"User can play gain experience points","flags":[]},{"ns":"Regex","name":"Replace","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"source"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"pattern"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"replace"},{"typedecl":"int","typeflags":0,"name":"flags","default":"Regex::Flags::ECMAScript"}],"decl":"string Replace(const string&in source, const string&in pattern, const string&in replace, int flags = Regex::Flags::ECMAScript)","group":"Regex","desc":"Perform a regex search and replace on the given string.","flags":[]},{"ns":"Regex","name":"IsMatch","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"source"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"pattern"},{"typedecl":"int","typeflags":0,"name":"flags","default":"Regex::Flags::ECMAScript"}],"decl":"bool IsMatch(const string&in source, const string&in pattern, int flags = Regex::Flags::ECMAScript)","group":"Regex","desc":"Perform a regex match on the source string and returns true if it matches.","flags":[]},{"ns":"Regex","name":"Contains","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"source"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"pattern"},{"typedecl":"int","typeflags":0,"name":"flags","default":"Regex::Flags::ECMAScript"}],"decl":"bool Contains(const string&in source, const string&in pattern, int flags = Regex::Flags::ECMAScript)","group":"Regex","desc":"Perform a regex match on the source string and returns true if it contains the pattern.","flags":[]},{"ns":"Regex","name":"Match","returntypeid":1342180699,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"source"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"pattern"},{"typedecl":"int","typeflags":0,"name":"flags","default":"Regex::Flags::ECMAScript"}],"decl":"string[]@ Match(const string&in source, const string&in pattern, int flags = Regex::Flags::ECMAScript)","group":"Regex","desc":"Performs a regex match on the source string and returns the matched groups if it matches, or an empty array if it doesn't.","flags":[]},{"ns":"Regex","name":"Search","returntypeid":1342180699,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"source"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"pattern"},{"typedecl":"int","typeflags":0,"name":"flags","default":"Regex::Flags::ECMAScript"}],"decl":"string[]@ Search(const string&in source, const string&in pattern, int flags = Regex::Flags::ECMAScript)","group":"Regex","desc":"Searches for a regex match on the source string and returns the matched groups if it matches, or an empty array if it doesn't.","flags":[]},{"ns":"Regex","name":"SearchAll","returntypeid":1140850770,"returntypename":"SearchAllResult","returntypedecl":"Regex::SearchAllResult@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"source"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"pattern"},{"typedecl":"int","typeflags":0,"name":"flags","default":"Regex::Flags::ECMAScript"}],"decl":"SearchAllResult@ SearchAll(const string&in source, const string&in pattern, int flags = Regex::Flags::ECMAScript)","group":"Regex","desc":"Searches for a regex match on the source string and returns all the matches.","flags":[]},{"ns":"Audio","name":"LoadSample","returntypeid":1140850771,"returntypename":"Sample","returntypedecl":"Audio::Sample@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename","desc":"The path of the sound to load. Must be relative to the root of your plugin. If you want to load samples from other locations, use LoadSampleFromAbsolutePath instead."},{"typedecl":"bool","typeflags":0,"name":"streamed","default":"false","desc":"Whether or not the sample should be streamed. This helps reduce memory usage when you're loading very big audio files such as music."}],"decl":"Sample@ LoadSample(const string&in filename, bool streamed = false)","group":"Resources","desc":"Loads a sound.","flags":[]},{"ns":"Audio","name":"LoadSample","returntypeid":1140850771,"returntypename":"Sample","returntypedecl":"Audio::Sample@","returntypeflags":0,"args":[{"typeid":67108919,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":1,"name":"buffer"},{"typedecl":"bool","typeflags":0,"name":"streamed","default":"false","desc":"Whether or not the sample should be streamed. This helps reduce memory usage when you're loading very big audio files such as music."}],"decl":"Sample@ LoadSample(MemoryBuffer&in buffer, bool streamed = false)","group":"Resources","desc":"Loads a sound from a memory buffer.","flags":[]},{"ns":"Audio","name":"LoadSampleFromAbsolutePath","returntypeid":1140850771,"returntypename":"Sample","returntypedecl":"Audio::Sample@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename","desc":"The absolute path of the sound to load. If you want to load samples from your plugin's resources, use LoadSample instead."},{"typedecl":"bool","typeflags":0,"name":"streamed","default":"false","desc":"Whether or not the sample should be streamed. This helps reduce memory usage when you're loading very big audio files such as music."}],"decl":"Sample@ LoadSampleFromAbsolutePath(const string&in filename, bool streamed = false)","group":"Resources","desc":"Loads a sound from an absolute path.","flags":[]},{"ns":"Audio","name":"Play","returntypeid":1140850772,"returntypename":"Voice","returntypedecl":"Audio::Voice@","returntypeflags":0,"args":[{"typeid":1140850771,"typename":"Sample","typedecl":"Audio::Sample@","typeflags":0,"name":"sample"},{"typedecl":"float","typeflags":0,"name":"gain","default":"1.0f"}],"decl":"Voice@ Play(Sample@ sample, float gain = 1.0f)","group":"Audio","desc":"Plays the given sample and returns the voice, immediately starting playback.","flags":[]},{"ns":"Audio","name":"Start","returntypeid":1140850772,"returntypename":"Voice","returntypedecl":"Audio::Voice@","returntypeflags":0,"args":[{"typeid":1140850771,"typename":"Sample","typedecl":"Audio::Sample@","typeflags":0,"name":"sample"}],"decl":"Voice@ Start(Sample@ sample)","group":"Audio","desc":"Starts the given sample and returns the voice, but does not immediately begin playback. Use this if you want to modify voice parameters before the first audio frames play. Note that if you don't let a sample play out, it will leak memory!","flags":[]},{"ns":"Auth","name":"GetToken","returntypeid":1140850773,"returntypename":"PluginAuthTask","returntypedecl":"Auth::PluginAuthTask@","returntypeflags":0,"args":[],"decl":"PluginAuthTask@ GetToken()","group":"Auth","desc":"Starts a task that authenticates the current user with the Openplanet and Nadeo backends. This is useful to authenticate users with external third party services securely. Note that you must have authentication enabled in your plugin admin panel for this to work. The resulting token must be sent to your server, which should validate it using the Openplanet.dev API.","flags":[]},{"ns":"Import","name":"GetLibrary","returntypeid":1140850776,"returntypename":"Library","returntypedecl":"Import::Library@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"Library@ GetLibrary(const string&in path)","group":"Import","desc":"Gets a library. If it's already loaded, this will return a handle to the already loaded library.","flags":[]},{"ns":"Internal::NadeoServices","name":"GetAccountID","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string GetAccountID()","group":"","desc":"","flags":["internal"]},{"ns":"Internal::NadeoServices","name":"GetCoreToken","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string GetCoreToken()","group":"","desc":"","flags":["internal"]},{"ns":"IO","name":"FromStorageFolder","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"string FromStorageFolder(const string&in filename)","group":"IO","desc":"Gets the absolute path for a file in your plugin's storage folder. This is typically C:\\Users\\Username\\OpenplanetNext\\PluginStorage\\YourPluginIdentifier. When calling this function and the folder doesn't exist yet, it will automatically be created for you.","flags":[]},{"ns":"IO","name":"FromDataFolder","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"string FromDataFolder(const string&in filename)","group":"IO","desc":"Gets the absolute path for a file in the data folder. This is typically C:\\Users\\Username\\OpenplanetNext","flags":[]},{"ns":"IO","name":"FromAppFolder","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"string FromAppFolder(const string&in filename)","group":"IO","desc":"Gets the absolute path for a file in the game's applicationfolder. This is where your game is installed, for example D:\\Games\\Trackmania","flags":[]},{"ns":"IO","name":"FromUserGameFolder","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"string FromUserGameFolder(const string&in filename)","group":"IO","desc":"Gets the absolute path for a file in the game's user folder. This is what the game considers the user folder, for example C:\\Users\\Username\\Documents\\Trackmania. Note that it is possible for this function to return only the given filename without any absolute path, in case the game doesn't have the necessary info, but you should consider this to happen very rarely (if ever).","flags":[]},{"ns":"IO","name":"FileExists","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"bool FileExists(const string&in filename)","group":"IO","desc":"Checks if the given path exists.","flags":[]},{"ns":"IO","name":"FileSize","returntypedecl":"uint64","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"uint64 FileSize(const string&in filename)","group":"IO","desc":"Gets the size of the given file.","flags":[]},{"ns":"IO","name":"FileCreatedTime","returntypedecl":"int64","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"int64 FileCreatedTime(const string&in filename)","group":"IO","desc":"Gets the created time of the given file.","flags":[]},{"ns":"IO","name":"FileModifiedTime","returntypedecl":"int64","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"int64 FileModifiedTime(const string&in filename)","group":"IO","desc":"Gets the last modified time of the given file.","flags":[]},{"ns":"IO","name":"Delete","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"void Delete(const string&in filename)","group":"IO","desc":"Deletes the given file.","flags":[]},{"ns":"IO","name":"Copy","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"target"}],"decl":"void Copy(const string&in path, const string&in target)","group":"IO","desc":"Copies the given file.","flags":[]},{"ns":"IO","name":"Move","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"target"}],"decl":"void Move(const string&in path, const string&in target)","group":"IO","desc":"Moves the given file or directory.","flags":[]},{"ns":"IO","name":"FolderExists","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"bool FolderExists(const string&in path)","group":"IO","desc":"Checks if the given path exists.","flags":[]},{"ns":"IO","name":"CreateFolder","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"},{"typedecl":"bool","typeflags":0,"name":"recursive","default":"true"}],"decl":"void CreateFolder(const string&in path, bool recursive = true)","group":"IO","desc":"Creates a folder at the given location.","flags":[]},{"ns":"IO","name":"DeleteFolder","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"},{"typedecl":"bool","typeflags":0,"name":"recursive","default":"false"}],"decl":"void DeleteFolder(const string&in path, bool recursive = false)","group":"IO","desc":"Deletes the folder at the given location. When `recursive` is false, the directory is only deleted if it is empty. Please be careful when setting recursive to true.","flags":[]},{"ns":"IO","name":"IndexFolder","returntypeid":1342180699,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"},{"typedecl":"bool","typeflags":0,"name":"recursive"}],"decl":"string[]@ IndexFolder(const string&in path, bool recursive)","group":"IO","desc":"Lists files and folders in the current folder. If recursive is true, it will only return files.","flags":[]},{"ns":"IO","name":"SetClipboard","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"text"}],"decl":"void SetClipboard(const string&in text)","group":"IO","desc":"Copies text on the clipboard.","flags":[]},{"ns":"Path","name":"GetExtension","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"string GetExtension(const string&in path)","group":"Path","desc":"Gets the file extension for the given path, including the period. If there is no file extension, this returns an empty string. For example, `hello.txt` will return `.txt`.","flags":[]},{"ns":"Path","name":"HasExtension","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"bool HasExtension(const string&in path)","group":"Path","desc":"Returns true if the given path has a file extension.","flags":[]},{"ns":"Path","name":"ChangeExtension","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path","desc":"The original path."},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"extension","desc":"The new extension for the given path. This does not need to start with a period, but including a period is accepted."}],"decl":"string ChangeExtension(const string&in path, const string&in extension)","group":"Path","desc":"Changes the file extension in the given path and returns the new path. If the original path has no file extension, this will add the given file extension.","flags":[]},{"ns":"Path","name":"RemoveExtension","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"string RemoveExtension(const string&in path)","group":"Path","desc":"Removes the file extension from the given path. If there is no file extension, this returns the original path. For example, `hello.txt` will return `hello`.","flags":[]},{"ns":"Path","name":"Join","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"a"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"b"}],"decl":"string Join(const string&in a, const string&in b)","group":"Path","desc":"Combines two paths into one. This automatically glues the paths with forward slashes where needed. For example, passing `hello` and `world` will return `hello/world`, but so will passing `hello/` and `world`. You should not combine multiple absolute paths using this function.","flags":[]},{"ns":"Path","name":"Equals","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"a"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"b"},{"typedecl":"bool","typeflags":0,"name":"caseSensitive","default":"false","desc":"Whether to test for case sensitivity. This is typically only used for Linux paths."}],"decl":"bool Equals(const string&in a, const string&in b, bool caseSensitive = false)","group":"Path","desc":"Returns true if the given 2 paths can be considered equal.","flags":[]},{"ns":"Path","name":"GetDirectoryName","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"string GetDirectoryName(const string&in path)","group":"Path","desc":"Returns the path to the directory of the containing path, including the path separator, excluding the filename. For example, `hello/world/foo.txt` will return `hello/world/`.","flags":[]},{"ns":"Path","name":"GetFileName","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"string GetFileName(const string&in path)","group":"Path","desc":"Gets the file name and extension of the given path. For example, `hello/world/foo.txt` will return `foo.txt`.","flags":[]},{"ns":"Path","name":"GetFileNameWithoutExtension","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"string GetFileNameWithoutExtension(const string&in path)","group":"Path","desc":"Gets the file name of the given path without the extension. For example, `hello/world/foo.txt` will return `foo`.","flags":[]},{"ns":"Path","name":"SanitizeFileName","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"string SanitizeFileName(const string&in name)","group":"IO","desc":"Sanitizes the given filename and replaces invalid characters with underscores. You may use this for both file names and folder names.","flags":[]},{"ns":"Crypto","name":"MD5","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str","desc":"The string to hash."}],"decl":"string MD5(const string&in str)","group":"Crypto","desc":"Calculate the MD5 hash of the given string.","flags":[]},{"ns":"Crypto","name":"Sha1","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str","desc":"The string to hash."}],"decl":"string Sha1(const string&in str)","group":"Crypto","desc":"Calculate the SHA1 hash of the given string.","flags":[]},{"ns":"Crypto","name":"Sha256","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str","desc":"The string to hash."}],"decl":"string Sha256(const string&in str)","group":"Crypto","desc":"Calculate the SHA256 hash of the given string.","flags":[]},{"ns":"Crypto","name":"Random","returntypeid":1140850743,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"length","desc":"The number of bytes to generate."}],"decl":"MemoryBuffer@ Random(int length)","group":"Crypto","desc":"Generates cryptographically secure random bytes and returns the buffer.","flags":[]},{"ns":"Crypto","name":"RandomBase64","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"length","desc":"The number of bytes to generate. Note that this is the length of the encoded bytes, not the length of the base64 string."},{"typedecl":"bool","typeflags":0,"name":"url","default":"false","desc":"Whether to use URL-encoded unpadded base64 encoding or not."}],"decl":"string RandomBase64(int length, bool url = false)","group":"Crypto","desc":"Generates cryptographically secure random bytes and returns its base64 string.","flags":[]},{"ns":"Icons","name":"GetAll","returntypeid":1140850717,"returntypename":"dictionary","returntypedecl":"dictionary@","returntypeflags":0,"args":[],"decl":"dictionary@ GetAll()"},{"ns":"Discord","name":"Initialize","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"applicationId"}],"decl":"void Initialize(const string&in applicationId)","group":"Discord","desc":"Initialize the Discord RPC API.","flags":[]},{"ns":"Discord","name":"Shutdown","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Shutdown()","group":"Discord","desc":"Shutdown the Discord RPC API.","flags":[]},{"ns":"Discord","name":"IsReady","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsReady()","group":"Discord","desc":"Check if the Discord RPC API is ready.","flags":[]},{"ns":"Discord","name":"GetUser","returntypeid":1140850788,"returntypename":"User","returntypedecl":"Discord::User@","returntypeflags":0,"args":[],"decl":"User@ GetUser()","group":"Discord","desc":"Gets the currently logged in Discord user.","flags":[]},{"ns":"Discord","name":"SetStatus","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108963,"typename":"Status","typedecl":"Discord::Status","typeflags":5,"name":"status"}],"decl":"void SetStatus(const Status&in status)","group":"Discord","desc":"Sets the current Discord rich presence status.","flags":[]},{"ns":"Discord","name":"Respond","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"userId"},{"typeid":98,"typename":"Response","typedecl":"Discord::Response","typeflags":0,"name":"reply"}],"decl":"void Respond(const string&in userId, Response reply)","group":"Discord","desc":"Respond to a join request.","flags":[]},{"ns":"Discord","name":"GetQueuedJoin","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string GetQueuedJoin()","group":"Discord","desc":"Get the queued up join secret to join.","flags":[]},{"ns":"Discord","name":"GetQueuedSpectate","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string GetQueuedSpectate()","group":"Discord","desc":"Get the queued up spectate secret to join.","flags":[]},{"ns":"Discord","name":"GetNumJoinRequests","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int GetNumJoinRequests()","group":"Discord","desc":"Get the amount of queued up join requests received.","flags":[]},{"ns":"Discord","name":"GetQueuedJoinRequest","returntypeid":1140850788,"returntypename":"User","returntypedecl":"Discord::User@","returntypeflags":0,"args":[],"decl":"User@ GetQueuedJoinRequest()","group":"Discord","desc":"Gets the first queued up join request. Returns null if there's no more join requests.","flags":[]},{"ns":"nvg","name":"LoadTexture","returntypeid":1140850789,"returntypename":"Texture","returntypedecl":"nvg::Texture@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename","desc":"The path of the texture to load. Must be relative to the root of your plugin. For legacy reasons, this can also be the user textures folder, or Openplanet's own textures folder."},{"typedecl":"int","typeflags":0,"name":"flags","default":"0"}],"decl":"Texture@ LoadTexture(const string&in filename, int flags = 0)","group":"NanoVG","desc":"Load a texture for the NanoVG API.","flags":[]},{"ns":"nvg","name":"LoadTexture","returntypeid":1140850789,"returntypename":"Texture","returntypedecl":"nvg::Texture@","returntypeflags":0,"args":[{"typeid":67108919,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":1,"name":"buffer","desc":"The buffer to load the texture from. This must contain the raw bytes of an encoded image."},{"typedecl":"int","typeflags":0,"name":"flags","default":"0"}],"decl":"Texture@ LoadTexture(MemoryBuffer&in buffer, int flags = 0)","group":"NanoVG","desc":"Load a texture for the NanoVG API from a memory buffer.","flags":[]},{"ns":"nvg","name":"LoadFont","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename","desc":"The path of the font to load. Must be relative to the root of your plugin. For legacy reasons, this can also be the user fonts folder, or Openplanet's own fonts folder."},{"typedecl":"bool","typeflags":0,"name":"fallbackIcons","default":"false","desc":"Deprecated value, doesn't do anything anymore."},{"typedecl":"bool","typeflags":0,"name":"fallbackArial","default":"false","desc":"Deprecated value, doesn't do anything anymore."}],"decl":"int LoadFont(const string&in filename, bool fallbackIcons = false, bool fallbackArial = false)","group":"NanoVG","desc":"Load a font for use in the NanoVG API.","flags":[]},{"ns":"nvg","name":"Save","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Save()","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"Restore","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Restore()","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"Reset","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Reset()","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"ShapeAntiAlias","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"bool","typeflags":0,"name":"enabled"}],"decl":"void ShapeAntiAlias(bool enabled)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"StrokeColor","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"}],"decl":"void StrokeColor(const vec4&in color)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"StrokePaint","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108967,"typename":"Paint","typedecl":"nvg::Paint","typeflags":5,"name":"paint"}],"decl":"void StrokePaint(const Paint&in paint)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"FillColor","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"}],"decl":"void FillColor(const vec4&in color)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"FillPaint","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108967,"typename":"Paint","typedecl":"nvg::Paint","typeflags":5,"name":"paint"}],"decl":"void FillPaint(const Paint&in paint)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"MiterLimit","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"limit"}],"decl":"void MiterLimit(float limit)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"StrokeWidth","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"size"}],"decl":"void StrokeWidth(float size)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"LineCap","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":104,"typename":"LineCapType","typedecl":"nvg::LineCapType","typeflags":0,"name":"cap"}],"decl":"void LineCap(LineCapType cap)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"LineJoin","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":104,"typename":"LineCapType","typedecl":"nvg::LineCapType","typeflags":0,"name":"join"}],"decl":"void LineJoin(LineCapType join)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"GlobalAlpha","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"alpha"}],"decl":"void GlobalAlpha(float alpha)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"ResetTransform","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void ResetTransform()","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"SetTransform","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108912,"typename":"mat3","typedecl":"mat3","typeflags":5,"name":"t"}],"decl":"void SetTransform(const mat3&in t)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"CurrentTransform","returntypeid":67108912,"returntypename":"mat3","returntypedecl":"mat3","returntypeflags":0,"args":[],"decl":"mat3 CurrentTransform()","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"Transform","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108912,"typename":"mat3","typedecl":"mat3","typeflags":5,"name":"t"}],"decl":"void Transform(const mat3&in t)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"Translate","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"}],"decl":"void Translate(float x, float y)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"Translate","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"void Translate(const vec2&in)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"Rotate","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"angle"}],"decl":"void Rotate(float angle)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"SkewX","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"angle"}],"decl":"void SkewX(float angle)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"SkewY","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"angle"}],"decl":"void SkewY(float angle)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"Scale","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"}],"decl":"void Scale(float x, float y)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"Scale","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"void Scale(const vec2&in)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"LinearGradient","returntypeid":67108967,"returntypename":"Paint","returntypedecl":"nvg::Paint","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"start"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"end"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color1"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color2"}],"decl":"Paint LinearGradient(const vec2&in start, const vec2&in end, const vec4&in color1, const vec4&in color2)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"BoxGradient","returntypeid":67108967,"returntypename":"Paint","returntypedecl":"nvg::Paint","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"w"},{"typedecl":"float","typeflags":0,"name":"h"},{"typedecl":"float","typeflags":0,"name":"r"},{"typedecl":"float","typeflags":0,"name":"f"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color1"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color2"}],"decl":"Paint BoxGradient(float x, float y, float w, float h, float r, float f, const vec4&in color1, const vec4&in color2)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"BoxGradient","returntypeid":67108967,"returntypename":"Paint","returntypedecl":"nvg::Paint","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"float","typeflags":0,"name":"r"},{"typedecl":"float","typeflags":0,"name":"f"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color1"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color2"}],"decl":"Paint BoxGradient(const vec2&in pos, const vec2&in size, float r, float f, const vec4&in color1, const vec4&in color2)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"RadialGradient","returntypeid":67108967,"returntypename":"Paint","returntypedecl":"nvg::Paint","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"center"},{"typedecl":"float","typeflags":0,"name":"inr"},{"typedecl":"float","typeflags":0,"name":"outr"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color1"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color2"}],"decl":"Paint RadialGradient(const vec2&in center, float inr, float outr, const vec4&in color1, const vec4&in color2)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"TexturePattern","returntypeid":67108967,"returntypename":"Paint","returntypedecl":"nvg::Paint","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"origin"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"float","typeflags":0,"name":"angle"},{"typeid":1140850789,"typename":"Texture","typedecl":"nvg::Texture@","typeflags":0,"name":"texture"},{"typedecl":"float","typeflags":0,"name":"alpha"}],"decl":"Paint TexturePattern(const vec2&in origin, const vec2&in size, float angle, Texture@ texture, float alpha)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"Scissor","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"w"},{"typedecl":"float","typeflags":0,"name":"h"}],"decl":"void Scissor(float x, float y, float w, float h)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"IntersectScissor","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"w"},{"typedecl":"float","typeflags":0,"name":"h"}],"decl":"void IntersectScissor(float x, float y, float w, float h)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"ResetScissor","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void ResetScissor()","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"AddFallbackFont","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"baseFont"},{"typedecl":"int","typeflags":0,"name":"fallbackFont"}],"decl":"void AddFallbackFont(int baseFont, int fallbackFont)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"FontFace","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"font"}],"decl":"void FontFace(int font)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"FontSize","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"size"}],"decl":"void FontSize(float size)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"FontBlur","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"blur"}],"decl":"void FontBlur(float blur)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"TextLetterSpacing","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"spacing"}],"decl":"void TextLetterSpacing(float spacing)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"TextLineHeight","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"lineHeight"}],"decl":"void TextLineHeight(float lineHeight)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"TextAlign","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"align"}],"decl":"void TextAlign(int align)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"Text","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x","desc":"The X position of the text."},{"typedecl":"float","typeflags":0,"name":"y","desc":"The Y position of the text."},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str","desc":"The text to draw."}],"decl":"float Text(float x, float y, const string&in str)","group":"NanoVG","desc":"Draws text using the current font settings.","flags":[]},{"ns":"nvg","name":"Text","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos","desc":"The position of the text."},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str","desc":"The text to draw."}],"decl":"float Text(const vec2&in pos, const string&in str)","group":"NanoVG","desc":"Draws text using the current font settings.","flags":[]},{"ns":"nvg","name":"TextBox","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x","desc":"The X position of the box."},{"typedecl":"float","typeflags":0,"name":"y","desc":"The Y position of the box."},{"typedecl":"float","typeflags":0,"name":"w","desc":"The width of the box. Word wrapping will be applied at this width."},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str","desc":"The text to draw."}],"decl":"void TextBox(float x, float y, float w, const string&in str)","group":"NanoVG","desc":"Draws text inside of a word wrapping box using the current font settings.","flags":[]},{"ns":"nvg","name":"TextBox","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos","desc":"The position of the box."},{"typedecl":"float","typeflags":0,"name":"w","desc":"The width of the box. Word wrapping will be applied at this width."},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str","desc":"The text to draw."}],"decl":"void TextBox(const vec2&in pos, float w, const string&in str)","group":"NanoVG","desc":"Draws text inside of a word wrapping box using the current font settings.","flags":[]},{"ns":"nvg","name":"TextBounds","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"vec2 TextBounds(const string&in str)","group":"NanoVG","desc":"Measures the size of the given text using the current font settings.","flags":[]},{"ns":"nvg","name":"TextBoxBounds","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"w"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"vec2 TextBoxBounds(float w, const string&in str)","group":"NanoVG","desc":"Measures the size of the given text inside of a word wrapping box using the current font settings.","flags":[]},{"ns":"nvg","name":"BeginPath","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void BeginPath()","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"MoveTo","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"}],"decl":"void MoveTo(const vec2&in pos)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"LineTo","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"}],"decl":"void LineTo(const vec2&in pos)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"BezierTo","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"c1"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"c2"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"}],"decl":"void BezierTo(const vec2&in c1, const vec2&in c2, const vec2&in pos)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"QuadTo","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"c"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"}],"decl":"void QuadTo(const vec2&in c, const vec2&in pos)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"ArcTo","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos1"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos2"},{"typedecl":"float","typeflags":0,"name":"radius"}],"decl":"void ArcTo(const vec2&in pos1, const vec2&in pos2, float radius)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"ClosePath","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void ClosePath()","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"PathWinding","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":105,"typename":"Winding","typedecl":"nvg::Winding","typeflags":0,"name":"dir"}],"decl":"void PathWinding(Winding dir)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"Arc","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"center"},{"typedecl":"float","typeflags":0,"name":"r"},{"typedecl":"float","typeflags":0,"name":"a0"},{"typedecl":"float","typeflags":0,"name":"a1"},{"typeid":105,"typename":"Winding","typedecl":"nvg::Winding","typeflags":0,"name":"dir"}],"decl":"void Arc(const vec2&in center, float r, float a0, float a1, Winding dir)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"Rect","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"w"},{"typedecl":"float","typeflags":0,"name":"h"}],"decl":"void Rect(float x, float y, float w, float h)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"Rect","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"}],"decl":"void Rect(const vec2&in pos, const vec2&in size)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"RoundedRect","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"w"},{"typedecl":"float","typeflags":0,"name":"h"},{"typedecl":"float","typeflags":0,"name":"r"}],"decl":"void RoundedRect(float x, float y, float w, float h, float r)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"RoundedRect","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"float","typeflags":0,"name":"r"}],"decl":"void RoundedRect(const vec2&in pos, const vec2&in size, float r)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"RoundedRectVarying","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"w"},{"typedecl":"float","typeflags":0,"name":"h"},{"typedecl":"float","typeflags":0,"name":"rtl"},{"typedecl":"float","typeflags":0,"name":"rtr"},{"typedecl":"float","typeflags":0,"name":"rbr"},{"typedecl":"float","typeflags":0,"name":"rbl"}],"decl":"void RoundedRectVarying(float x, float y, float w, float h, float rtl, float rtr, float rbr, float rbl)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"RoundedRectVarying","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"float","typeflags":0,"name":"rtl"},{"typedecl":"float","typeflags":0,"name":"rtr"},{"typedecl":"float","typeflags":0,"name":"rbr"},{"typedecl":"float","typeflags":0,"name":"rbl"}],"decl":"void RoundedRectVarying(const vec2&in pos, const vec2&in size, float rtl, float rtr, float rbr, float rbl)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"Ellipse","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"center"},{"typedecl":"float","typeflags":0,"name":"rx"},{"typedecl":"float","typeflags":0,"name":"ry"}],"decl":"void Ellipse(const vec2&in center, float rx, float ry)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"Circle","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"center"},{"typedecl":"float","typeflags":0,"name":"r"}],"decl":"void Circle(const vec2&in center, float r)","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"Fill","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Fill()","group":"NanoVG","desc":"","flags":[]},{"ns":"nvg","name":"Stroke","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Stroke()","group":"NanoVG","desc":"","flags":[]},{"ns":"UI","name":"LoadTexture","returntypeid":1140850795,"returntypename":"Texture","returntypedecl":"UI::Texture@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename","desc":"The path of the texture to load. Must be relative to the root of your plugin. For legacy reasons, this can also be the user textures folder, or Openplanet's own textures folder."}],"decl":"Texture@ LoadTexture(const string&in filename)","group":"UI","desc":"Load a texture for the UI API.","flags":[]},{"ns":"UI","name":"LoadTexture","returntypeid":1140850795,"returntypename":"Texture","returntypedecl":"UI::Texture@","returntypeflags":0,"args":[{"typeid":67108919,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":1,"name":"buffer","desc":"The buffer to load the texture from. This must contain the raw bytes of an encoded image."}],"decl":"Texture@ LoadTexture(MemoryBuffer&in buffer)","group":"UI","desc":"Load a texture for the UI API from a memory buffer.","flags":[]},{"ns":"UI::Font","name":"get_Default","returntypeid":1140850796,"returntypename":"Font","returntypedecl":"UI::Font@","returntypeflags":0,"args":[],"decl":"UI::Font@ get_Default()","group":"UI","desc":"Openplanet's default font. Includes icons.","flags":[]},{"ns":"UI::Font","name":"get_Default20","returntypeid":1140850796,"returntypename":"Font","returntypedecl":"UI::Font@","returntypeflags":0,"args":[],"decl":"UI::Font@ get_Default20()","group":"UI","desc":"Openplanet's default font with point size 20. Includes icons.","flags":[]},{"ns":"UI::Font","name":"get_Default26","returntypeid":1140850796,"returntypename":"Font","returntypedecl":"UI::Font@","returntypeflags":0,"args":[],"decl":"UI::Font@ get_Default26()","group":"UI","desc":"Openplanet's default font with point size 26. Includes icons.","flags":[]},{"ns":"UI::Font","name":"get_DefaultBold","returntypeid":1140850796,"returntypename":"Font","returntypedecl":"UI::Font@","returntypeflags":0,"args":[],"decl":"UI::Font@ get_DefaultBold()","group":"UI","desc":"Openplanet's default bold font. Includes icons.","flags":[]},{"ns":"UI::Font","name":"get_DefaultMono","returntypeid":1140850796,"returntypename":"Font","returntypedecl":"UI::Font@","returntypeflags":0,"args":[],"decl":"UI::Font@ get_DefaultMono()","group":"UI","desc":"Openplanet's default monospaced font. Includes icons.","flags":[]},{"ns":"UI","name":"LoadFont","returntypeid":1140850796,"returntypename":"Font","returntypedecl":"UI::Font@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename","desc":"The path of the font to load. Must be relative to the root of your plugin. For legacy reasons, this can also be the user fonts folder, or Openplanet's own fonts folder."},{"typedecl":"float","typeflags":0,"name":"size","default":"16.0f","desc":"The size of the font in pixels. The size is automatically scaled by UI::GetScale()."},{"typeid":1879051616,"typename":"array","typedecl":"const uint[]@","typeflags":0,"name":"ranges","default":"null","desc":"A range of characters to add to the font. Leave this null to use the default (0x20 through 0xFF), which is typically fine."},{"typedecl":"bool","typeflags":0,"name":"fallback","default":"false","desc":"Whether to load icon fonts as a fallback. **Warning**: Don't use fallback fonts if you don't need them! Fallback fonts cost a lot of memory!"},{"typedecl":"bool","typeflags":0,"name":"fallbackExtendedIcons","default":"false","desc":"Whether to load extended icons (emojis & symbols) as part of the fallback. For this to work, `fallback` must be true."},{"typedecl":"bool","typeflags":0,"name":"fallbackArial","default":"false","desc":"Whether to load Arial as part of the fallback. This allows for many more Unicode characters to render. For this to work, `fallback` must be true."}],"decl":"Font@ LoadFont(const string&in filename, float size = 16.0f, const uint[]@ ranges = null, bool fallback = false, bool fallbackExtendedIcons = false, bool fallbackArial = false)","group":"UI","desc":"Loads a font for use in the UI API. Note that fonts can take up a lot of memory, so be careful in how many characters you request here! The defaults are usually enough. The font loads instantly (is a free call) for the following font combinations: \"DroidSans-Bold.ttf\" at size 16, \"DroidSansMono.ttf\" at size 16, \"DroidSans.ttf\" at size 20 or 26.","flags":[]},{"ns":"UI","name":"LoadFont","returntypeid":1140850796,"returntypename":"Font","returntypedecl":"UI::Font@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename","desc":"The path of the font to load. Must be relative to the root of your plugin. For legacy reasons, this can also be the user fonts folder, or Openplanet's own fonts folder."},{"typedecl":"float","typeflags":0,"name":"size","desc":"The size of the font in pixels. The size is automatically scaled by UI::GetScale()."},{"typedecl":"int","typeflags":0,"name":"minChars","desc":"The first character to add to the font. Use -1 to start from 0x20."},{"typedecl":"int","typeflags":0,"name":"maxChars","desc":"The last character to add to the font. Use -1 to end at 0xFF."},{"typedecl":"bool","typeflags":0,"name":"fallback","default":"false","desc":"Whether to load icon fonts as a fallback. **Warning**: Don't use fallback fonts if you don't need them! Fallback fonts cost a lot of memory!"},{"typedecl":"bool","typeflags":0,"name":"fallbackExtendedIcons","default":"false","desc":"Whether to load extended icons (emojis & symbols) as part of the fallback. For this to work, `fallback` must be true."},{"typedecl":"bool","typeflags":0,"name":"fallbackArial","default":"false","desc":"Whether to load Arial as part of the fallback. This allows for many more Unicode characters to render. For this to work, `fallback` must be true."}],"decl":"Font@ LoadFont(const string&in filename, float size, int minChars, int maxChars, bool fallback = false, bool fallbackExtendedIcons = false, bool fallbackArial = false)","group":"UI","desc":"Loads a font for use in the UI API. Consider using the first `LoadFont` overload instead of this one, as it is slightly simpler. Note that fonts can take up a lot of memory, so be careful in how many characters you request here! The defaults are usually enough. The font loads instantly (is a free call) for the following font combinations: \"DroidSans-Bold.ttf\" at size 16, \"DroidSansMono.ttf\" at size 16, \"DroidSans.ttf\" at size 20 or 26.","flags":[]},{"ns":"UI","name":"WantCaptureMouse","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool WantCaptureMouse()","group":"UI","desc":"Return true when Dear ImGui will use mouse inputs.","flags":[]},{"ns":"UI","name":"WantCaptureKeyboard","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool WantCaptureKeyboard()","group":"UI","desc":"Return true when Dear ImGui will use keyboard inputs.","flags":[]},{"ns":"UI","name":"Begin","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"title"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::WindowFlags::NoCollapse"}],"decl":"bool Begin(const string&in title, int flags = UI::WindowFlags::NoCollapse)","group":"UI","desc":"Begins an imgui window.","flags":[]},{"ns":"UI","name":"Begin","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"title"},{"typedecl":"bool","typeflags":2,"name":"open"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::WindowFlags::NoCollapse"}],"decl":"bool Begin(const string&in title, bool&out open, int flags = UI::WindowFlags::NoCollapse)","group":"UI","desc":"Begins an imgui window.","flags":[]},{"ns":"UI","name":"End","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void End()","group":"UI","desc":"Ends an imgui window. Must always be called even if Begin returns false!","flags":[]},{"ns":"UI","name":"BeginGroup","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void BeginGroup()","group":"UI","desc":"Begins a new group.","flags":[]},{"ns":"UI","name":"EndGroup","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndGroup()","group":"UI","desc":"Ends a group.","flags":[]},{"ns":"UI","name":"BeginFormattingGroup","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void BeginFormattingGroup()","group":"UI","desc":"Begins the formatting group for $-style formatting. This means that 2 consecutive widgets will share the color stack (and the default text color) of the first widget.","flags":[]},{"ns":"UI","name":"EndFormattingGroup","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndFormattingGroup()","group":"UI","desc":"Ends the formatting group.","flags":[]},{"ns":"UI","name":"BeginDisabled","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"bool","typeflags":0,"name":"disabled","default":"true"}],"decl":"void BeginDisabled(bool disabled = true)","group":"UI","desc":"Begins a group of disabled widgets.","flags":[]},{"ns":"UI","name":"EndDisabled","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndDisabled()","group":"UI","desc":"Ends a group of disabled widgets.","flags":[]},{"ns":"UI","name":"PushStyleColor","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":115,"typename":"Col","typedecl":"UI::Col","typeflags":0,"name":"idx"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"col"}],"decl":"void PushStyleColor(Col idx, const vec4&in col)","group":"UI","desc":"Temporarily pushes a color change for the next widgets. You must call PopStyleColor() sometime after!","flags":[]},{"ns":"UI","name":"PopStyleColor","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"count","default":"1"}],"decl":"void PopStyleColor(int count = 1)","group":"UI","desc":"Pops one or more temporary color changes.","flags":[]},{"ns":"UI","name":"GetStyleColor","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":115,"typename":"Col","typedecl":"UI::Col","typeflags":0,"name":"idx"}],"decl":"vec4 GetStyleColor(Col idx)","group":"UI","desc":"Gets the current style color.","flags":[]},{"ns":"UI","name":"GetStyleColorName","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":115,"typename":"Col","typedecl":"UI::Col","typeflags":0,"name":"idx"}],"decl":"string GetStyleColorName(Col idx)","group":"UI","desc":"Gets the name of the given style color.","flags":[]},{"ns":"UI","name":"PushStyleVar","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":116,"typename":"StyleVar","typedecl":"UI::StyleVar","typeflags":0,"name":"var"},{"typedecl":"float","typeflags":0,"name":"value"}],"decl":"void PushStyleVar(StyleVar var, float value)","group":"UI","desc":"Temporarily pushes a style change for the next widgets. You must call PopStyleVar() sometime after!","flags":[]},{"ns":"UI","name":"PushStyleVar","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":116,"typename":"StyleVar","typedecl":"UI::StyleVar","typeflags":0,"name":"var"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"value"}],"decl":"void PushStyleVar(StyleVar var, const vec2&in value)","group":"UI","desc":"Temporarily pushes a style change for the next widgets. You must call PopStyleVar() sometime after!","flags":[]},{"ns":"UI","name":"PopStyleVar","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"count","default":"1"}],"decl":"void PopStyleVar(int count = 1)","group":"UI","desc":"Pops one or more temporary style changes.","flags":[]},{"ns":"UI","name":"GetStyleVarFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":116,"typename":"StyleVar","typedecl":"UI::StyleVar","typeflags":0,"name":"var"}],"decl":"float GetStyleVarFloat(StyleVar var)","group":"UI","desc":"Gets the current float value of a style variable.","flags":[]},{"ns":"UI","name":"GetStyleVarVec2","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":116,"typename":"StyleVar","typedecl":"UI::StyleVar","typeflags":0,"name":"var"}],"decl":"vec2 GetStyleVarVec2(StyleVar var)","group":"UI","desc":"Gets the current vector value of a style variable.","flags":[]},{"ns":"UI","name":"GetScrollX","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetScrollX()","group":"UI","desc":"Get scrolling amount, from 0 to GetScrollMaxX().","flags":[]},{"ns":"UI","name":"GetScrollY","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetScrollY()","group":"UI","desc":"Get scrolling amount, from 0 to GetScrollMaxY().","flags":[]},{"ns":"UI","name":"SetScrollX","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"}],"decl":"void SetScrollX(float x)","group":"UI","desc":"Set scrolling amount, from 0 to GetScrollMaxX().","flags":[]},{"ns":"UI","name":"SetScrollY","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"y"}],"decl":"void SetScrollY(float y)","group":"UI","desc":"Set scrolling amount, from 0 to GetScrollMaxY().","flags":[]},{"ns":"UI","name":"GetScrollMaxX","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetScrollMaxX()","group":"UI","desc":"Get maximum horizontal scrolling amount.","flags":[]},{"ns":"UI","name":"GetScrollMaxY","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetScrollMaxY()","group":"UI","desc":"Get maximum vertical scrolling amount.","flags":[]},{"ns":"UI","name":"SetScrollHereX","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"center_x_ratio","default":"0.5f"}],"decl":"void SetScrollHereX(float center_x_ratio = 0.5f)","group":"UI","desc":"Adjust scrolling amount to make current cursor position visible. center_x_ratio=0.0: left, 0.5: center, 1.0: right. When using to make a \"default / current item\" visible, consider using SetItemDefaultFocus() instead.","flags":[]},{"ns":"UI","name":"SetScrollHereY","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"center_y_ratio","default":"0.5f"}],"decl":"void SetScrollHereY(float center_y_ratio = 0.5f)","group":"UI","desc":"Adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a \"default / current item\" visible, consider using SetItemDefaultFocus() instead.","flags":[]},{"ns":"UI","name":"SetScrollFromPosX","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"local_x"},{"typedecl":"float","typeflags":0,"name":"center_x_ratio","default":"0.5f"}],"decl":"void SetScrollFromPosX(float local_x, float center_x_ratio = 0.5f)","group":"UI","desc":"Adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.","flags":[]},{"ns":"UI","name":"SetScrollFromPosY","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"local_y"},{"typedecl":"float","typeflags":0,"name":"center_y_ratio","default":"0.5f"}],"decl":"void SetScrollFromPosY(float local_y, float center_y_ratio = 0.5f)","group":"UI","desc":"Adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.","flags":[]},{"ns":"UI","name":"SetNextWindowSize","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"w"},{"typedecl":"int","typeflags":0,"name":"h"},{"typeid":133,"typename":"Cond","typedecl":"UI::Cond","typeflags":0,"name":"cond","default":"UI::Cond::Appearing"}],"decl":"void SetNextWindowSize(int w, int h, Cond cond = UI::Cond::Appearing)","group":"UI","desc":"Sets the size for the next window created with UI::Begin(). The size is automatically scaled by UI::GetScale().","flags":[]},{"ns":"UI","name":"SetNextWindowPos","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"x"},{"typedecl":"int","typeflags":0,"name":"y"},{"typeid":133,"typename":"Cond","typedecl":"UI::Cond","typeflags":0,"name":"cond","default":"UI::Cond::Appearing"},{"typedecl":"float","typeflags":0,"name":"pivotx","default":"0.0f"},{"typedecl":"float","typeflags":0,"name":"pivoty","default":"0.0f"}],"decl":"void SetNextWindowPos(int x, int y, Cond cond = UI::Cond::Appearing, float pivotx = 0.0f, float pivoty = 0.0f)","group":"UI","desc":"Sets the position for the next window created with UI::Begin(). Pivot floats can be used to align the window on the given point. The position is automatically scaled by UI::GetScale().","flags":[]},{"ns":"UI","name":"SetNextWindowContentSize","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"w"},{"typedecl":"int","typeflags":0,"name":"h","default":"0"}],"decl":"void SetNextWindowContentSize(int w, int h = 0)","group":"UI","desc":"Sets the size for the next window contents. Set height to 0 to only set width. The size is automatically scaled by UI::GetScale().","flags":[]},{"ns":"UI","name":"SetNextItemWidth","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"w"}],"decl":"void SetNextItemWidth(float w)","group":"UI","desc":"Sets the width of the next item. The width is automatically scaled by UI::GetScale().","flags":[]},{"ns":"UI","name":"SetNextItemOpen","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"bool","typeflags":0,"name":"is_open"},{"typeid":133,"typename":"Cond","typedecl":"UI::Cond","typeflags":0,"name":"cond","default":"UI::Cond::None"}],"decl":"void SetNextItemOpen(bool is_open, Cond cond = UI::Cond::None)","group":"UI","desc":"Sets whether the next item should be open.","flags":[]},{"ns":"UI","name":"PushID","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"void PushID(const ?&in)","group":"UI","desc":"Pushes an ID to the stack.","flags":[]},{"ns":"UI","name":"PushID","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"id"}],"decl":"void PushID(int id)","group":"UI","desc":"Pushes an ID to the stack.","flags":[]},{"ns":"UI","name":"PushID","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"id"}],"decl":"void PushID(const string&in id)","group":"UI","desc":"Pushes an ID to the stack.","flags":[]},{"ns":"UI","name":"PopID","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void PopID()","group":"UI","desc":"Pops an ID from the stack.","flags":[]},{"ns":"UI","name":"PushFont","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850796,"typename":"Font","typedecl":"UI::Font@","typeflags":0,"name":"font"}],"decl":"void PushFont(Font@ font)","group":"UI","desc":"Pushes a font to the stack.","flags":[]},{"ns":"UI","name":"PopFont","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void PopFont()","group":"UI","desc":"Pops a font from the stack.","flags":[]},{"ns":"UI","name":"PushItemWidth","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"item_width"}],"decl":"void PushItemWidth(float item_width)","group":"UI","desc":"Pushes width of items.","flags":[]},{"ns":"UI","name":"PopItemWidth","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void PopItemWidth()","group":"UI","desc":"Pops width of items.","flags":[]},{"ns":"UI","name":"SameLine","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"offset_from_start_x","default":"0.0f","desc":"Use 0 for the next item to follow right after previous item. Other values align to the specified X position (relative to window/group left)."},{"typedecl":"float","typeflags":0,"name":"spacing","default":"-1.0f","desc":"For negative spacing, use default spacing if `offset_from_start_x` == 0, no spacing if `offset_from_start_x` != 0. For 0 and positive values, enforce spacing amount."}],"decl":"void SameLine(float offset_from_start_x = 0.0f, float spacing = -1.0f)","group":"UI","desc":"Marks the next control to be drawn on the same line as the last one.","flags":[]},{"ns":"UI","name":"NewLine","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void NewLine()","group":"UI","desc":"Marks the next control to be drawn on the next line rather than the current line.","flags":[]},{"ns":"UI","name":"Indent","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"w","default":"0.0f"}],"decl":"void Indent(float w = 0.0f)","group":"UI","desc":"Move content position toward the right, by w, or style.IndentSpacing if w <= 0.","flags":[]},{"ns":"UI","name":"Unindent","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"w","default":"0.0f"}],"decl":"void Unindent(float w = 0.0f)","group":"UI","desc":"move content position back to the left, by w, or style.IndentSpacing if w <= 0.","flags":[]},{"ns":"UI","name":"Separator","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Separator()","group":"UI","desc":"Separator line.","flags":[]},{"ns":"UI","name":"Separator","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"flags"},{"typedecl":"float","typeflags":0,"name":"thickness","default":"1.0f"}],"decl":"void Separator(int flags, float thickness = 1.0f)","group":"UI","desc":"Separator line with custom flags and thickness.","flags":[]},{"ns":"UI","name":"SeparatorText","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"}],"decl":"void SeparatorText(const string&in label)","group":"UI","desc":"Separator line with text in it.","flags":[]},{"ns":"UI","name":"SeparatorTextOpenplanet","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"}],"decl":"void SeparatorTextOpenplanet(const string&in label)","group":"UI","desc":"Separator line with text in it, where the text is the same color as the line. This matches Openplanet's own UI.","flags":[]},{"ns":"UI","name":"Dummy","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"}],"decl":"void Dummy(const vec2&in size)","group":"UI","desc":"Dummy space.","flags":[]},{"ns":"UI","name":"Dummy","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"float","typeflags":0,"name":"text_baseline_y"}],"decl":"void Dummy(const vec2&in size, float text_baseline_y)","group":"UI","desc":"Dummy space with a custom baseline.","flags":[]},{"ns":"UI","name":"PushTextWrapPos","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"wrap_local_pos_x","default":"0.0f"}],"decl":"void PushTextWrapPos(float wrap_local_pos_x = 0.0f)","group":"UI","desc":"Push word-wrapping position for Text*() commands. Less than 0: no wrapping; 0: wrap to end of window (or column); > 0: wrap at the given position in window local space.","flags":[]},{"ns":"UI","name":"PopTextWrapPos","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void PopTextWrapPos()","group":"UI","desc":"Pops word-wrapping position for Text*() commands.","flags":[]},{"ns":"UI","name":"CalcWordWrapPosition","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"scale"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"text"},{"typedecl":"float","typeflags":0,"name":"wrap_width"},{"typedecl":"int","typeflags":0,"name":"text_offset","default":"0"},{"typeid":1140850796,"typename":"Font","typedecl":"UI::Font@","typeflags":0,"name":"font","default":"null"}],"decl":"int CalcWordWrapPosition(float scale, const string&in text, float wrap_width, int text_offset = 0, Font@ font = null)","group":"UI","desc":"Calculates the word wrapping position of the given string.","flags":[]},{"ns":"UI","name":"Button","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size","default":"vec2()"}],"decl":"bool Button(const string&in label, const vec2&in size = vec2())","group":"UI","desc":"Clickable button. Returns true if it was clicked.","flags":[]},{"ns":"UI","name":"ButtonColored","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"float","typeflags":0,"name":"h"},{"typedecl":"float","typeflags":0,"name":"s","default":"0.6f"},{"typedecl":"float","typeflags":0,"name":"v","default":"0.6f"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size","default":"vec2()"}],"decl":"bool ButtonColored(const string&in label, float h, float s = 0.6f, float v = 0.6f, const vec2&in size = vec2())","group":"UI","desc":"Clickable button with a specific color. Returns true if it was clicked.","flags":[]},{"ns":"UI","name":"InvisibleButton","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"id"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::ButtonFlags::None"}],"decl":"bool InvisibleButton(const string&in id, const vec2&in size, int flags = UI::ButtonFlags::None)","group":"UI","desc":"Clickable invisible button. Returns true if it was clicked.","flags":[]},{"ns":"UI","name":"Text","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"text"},{"typedecl":"int","typeflags":0,"name":"length","default":"-1"}],"decl":"void Text(const string&in text, int length = -1)","group":"UI","desc":"Simple text label with an optional length.","flags":[]},{"ns":"UI","name":"TextWrapped","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"text"}],"decl":"void TextWrapped(const string&in text)","group":"UI","desc":"Simple text label with word wrapping.","flags":[]},{"ns":"UI","name":"TextWrappedWindow","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"text"},{"typedecl":"float","typeflags":0,"name":"new_line_padding","default":"0"},{"typedecl":"float","typeflags":0,"name":"extra_wrap_size","default":"0"}],"decl":"void TextWrappedWindow(const string&in text, float new_line_padding = 0, float extra_wrap_size = 0)","group":"UI","desc":"Simple text label with word wrapping, but the text resets to the start of the window instead of the starting cursor position.","flags":[]},{"ns":"UI","name":"TextDisabled","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"text"}],"decl":"void TextDisabled(const string&in text)","group":"UI","desc":"Simple text label, but in its disabled color.","flags":[]},{"ns":"UI","name":"LabelText","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"text"}],"decl":"void LabelText(const string&in label, const string&in text)","group":"UI","desc":"Text label with a value.","flags":[]},{"ns":"UI","name":"TextLink","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"}],"decl":"bool TextLink(const string&in label)","group":"UI","desc":"Hyperlink text button. Returns true when clicked.","flags":[]},{"ns":"UI","name":"TextLinkOpenURL","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"url"}],"decl":"void TextLinkOpenURL(const string&in label, const string&in url)","group":"UI","desc":"Hyperlink text button. Automatically opens the given URL when clicked.","flags":[]},{"ns":"UI","name":"PlotLines","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":268438881,"typename":"array","typedecl":"float[]","typeflags":5,"name":"values"},{"typedecl":"int","typeflags":0,"name":"offset","default":"0"},{"typedecl":"float","typeflags":0,"name":"height","default":"0.0f"}],"decl":"void PlotLines(const string&in label, const float[]&in values, int offset = 0, float height = 0.0f)","group":"UI","desc":"Line graph.","flags":[]},{"ns":"UI","name":"PlotHistogram","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":268438881,"typename":"array","typedecl":"float[]","typeflags":5,"name":"values"},{"typedecl":"int","typeflags":0,"name":"offset","default":"0"},{"typedecl":"float","typeflags":0,"name":"height","default":"0.0f"}],"decl":"void PlotHistogram(const string&in label, const float[]&in values, int offset = 0, float height = 0.0f)","group":"UI","desc":"Histogram graph.","flags":[]},{"ns":"UI","name":"Checkbox","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"bool","typeflags":0,"name":"value"}],"decl":"bool Checkbox(const string&in label, bool value)","group":"UI","desc":"Checkbox. For value, pass the current value. The return value is the new value.","flags":[]},{"ns":"UI","name":"RadioButton","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"bool","typeflags":0,"name":"active"}],"decl":"bool RadioButton(const string&in label, bool active)","group":"UI","desc":"Radio button. For active, pass whether the current value is active. Returns true if the button was pressed.","flags":[]},{"ns":"UI","name":"ProgressBar","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"fraction","desc":"The progress value between 0 and 1"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size","default":"vec2(-1, 0)","desc":"For each axis, < 0.0f: align to end, 0.0f: auto, > 0.0f: specified size"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"overlay","default":"\"\""}],"decl":"void ProgressBar(float fraction, const vec2&in size = vec2(-1, 0), const string&in overlay = \"\")","group":"UI","desc":"Progress bar.","flags":[]},{"ns":"UI","name":"BeginMenuBar","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool BeginMenuBar()","group":"UI","desc":"Begins an imgui menu bar.","flags":[]},{"ns":"UI","name":"EndMenuBar","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndMenuBar()","group":"UI","desc":"Ends an imgui menu bar.","flags":[]},{"ns":"UI","name":"BeginMenu","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"bool","typeflags":0,"name":"enabled","default":"true"}],"decl":"bool BeginMenu(const string&in label, bool enabled = true)","group":"UI","desc":"Begins an imgui menu.","flags":[]},{"ns":"UI","name":"EndMenu","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndMenu()","group":"UI","desc":"Ends an imgui menu.","flags":[]},{"ns":"UI","name":"MenuItem","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"shortcut","default":"\"\""},{"typedecl":"bool","typeflags":0,"name":"selected","default":"false"},{"typedecl":"bool","typeflags":0,"name":"enabled","default":"true"}],"decl":"bool MenuItem(const string&in label, const string&in shortcut = \"\", bool selected = false, bool enabled = true)","group":"UI","desc":"Clickable menu item. Returns true when clicked.","flags":[]},{"ns":"UI","name":"IsWindowAppearing","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsWindowAppearing()","group":"UI","desc":"Returns true if the previous window is just now appearing.","flags":[]},{"ns":"UI","name":"TreeNode","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"text"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::TreeNodeFlags::None"}],"decl":"bool TreeNode(const string&in text, int flags = UI::TreeNodeFlags::None)","group":"UI","desc":"Node in a tree list. Returns true if opened.","flags":[]},{"ns":"UI","name":"TreePop","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void TreePop()","group":"UI","desc":"End of the previously tree node. Must only be called if TreeNode() returned true.","flags":[]},{"ns":"UI","name":"TreeAdvanceToLabelPos","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void TreeAdvanceToLabelPos()","group":"UI","desc":"Advance the cursor position to the normal label position for tree nodes.","flags":[]},{"ns":"UI","name":"CollapsingHeader","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"}],"decl":"bool CollapsingHeader(const string&in label)","group":"UI","desc":"Collapsable header. Returns true if open.","flags":[]},{"ns":"UI","name":"Columns","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"count"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"id","default":"\"\""},{"typedecl":"bool","typeflags":0,"name":"border","default":"true"}],"decl":"void Columns(int count, const string&in id = \"\", bool border = true)","group":"UI","desc":"Begins a table layout. Call this with count set to 1 to reset to normal.","flags":[]},{"ns":"UI","name":"NextColumn","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void NextColumn()","group":"UI","desc":"Goes to the next column.","flags":[]},{"ns":"UI","name":"IsItemHovered","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::HoveredFlags::None"}],"decl":"bool IsItemHovered(int flags = UI::HoveredFlags::None)","group":"UI","desc":"Returns true if the mouse is hovering the previous control.","flags":[]},{"ns":"UI","name":"IsItemActive","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsItemActive()","group":"UI","desc":"Returns true if the previous control is active.","flags":[]},{"ns":"UI","name":"IsItemFocused","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsItemFocused()","group":"UI","desc":"Returns true if the previous control is focused.","flags":[]},{"ns":"UI","name":"IsItemClicked","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":135,"typename":"MouseButton","typedecl":"UI::MouseButton","typeflags":0,"name":"button","default":"UI::MouseButton::Left"}],"decl":"bool IsItemClicked(MouseButton button = UI::MouseButton::Left)","group":"UI","desc":"Returns true if the previous control is clicked.","flags":[]},{"ns":"UI","name":"IsItemDeactivated","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsItemDeactivated()","group":"UI","desc":"Returns true if the previous control is deactivated.","flags":[]},{"ns":"UI","name":"GetItemRect","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[],"decl":"vec4 GetItemRect()","group":"UI","desc":"Returns the rectangle of the previous control in screen space.","flags":[]},{"ns":"UI","name":"CalcItemSize","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"float","typeflags":0,"name":"w"},{"typedecl":"float","typeflags":0,"name":"h"}],"decl":"vec2 CalcItemSize(const vec2&in size, float w, float h)","group":"UI","desc":"Calculate full item size given user provided 'size' parameter and default width/height. Default width is often == CalcItemWidth().","flags":[]},{"ns":"UI","name":"IsKeyPressed","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":134,"typename":"Key","typedecl":"UI::Key","typeflags":0,"name":"key"}],"decl":"bool IsKeyPressed(Key key)","group":"UI","desc":"Returns true if the given key was pressed.","flags":[]},{"ns":"UI","name":"IsKeyReleased","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":134,"typename":"Key","typedecl":"UI::Key","typeflags":0,"name":"key"}],"decl":"bool IsKeyReleased(Key key)","group":"UI","desc":"Returns true if the given key was released.","flags":[]},{"ns":"UI","name":"IsKeyDown","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":134,"typename":"Key","typedecl":"UI::Key","typeflags":0,"name":"key"}],"decl":"bool IsKeyDown(Key key)","group":"UI","desc":"Returns true if the given key is currently down.","flags":[]},{"ns":"UI","name":"Shortcut","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"key_chord"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::InputFlags::None"}],"decl":"bool Shortcut(int key_chord, int flags = UI::InputFlags::None)","group":"UI","desc":"Returns true if the given shortcut was pressed.","flags":[]},{"ns":"UI","name":"SetNextItemShortcut","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"key_chord"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::InputFlags::None"}],"decl":"void SetNextItemShortcut(int key_chord, int flags = UI::InputFlags::None)","group":"UI","desc":"Sets a shortcut for the next item.","flags":[]},{"ns":"UI","name":"SetItemKeyOwner","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":134,"typename":"Key","typedecl":"UI::Key","typeflags":0,"name":"key"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::InputFlags::None"}],"decl":"void SetItemKeyOwner(Key key, int flags = UI::InputFlags::None)","group":"UI","desc":"Set key owner to last item ID if it is hovered or active.","flags":[]},{"ns":"UI","name":"IsMouseDown","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":135,"typename":"MouseButton","typedecl":"UI::MouseButton","typeflags":0,"name":"button","default":"UI::MouseButton::Left"}],"decl":"bool IsMouseDown(MouseButton button = UI::MouseButton::Left)","group":"UI","desc":"Returns true if the given mouse button is down.","flags":[]},{"ns":"UI","name":"IsMouseClicked","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":135,"typename":"MouseButton","typedecl":"UI::MouseButton","typeflags":0,"name":"button","default":"UI::MouseButton::Left"},{"typedecl":"bool","typeflags":0,"name":"repeat","default":"false"}],"decl":"bool IsMouseClicked(MouseButton button = UI::MouseButton::Left, bool repeat = false)","group":"UI","desc":"Returns true if the given mouse button was just clicked.","flags":[]},{"ns":"UI","name":"IsMouseReleased","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":135,"typename":"MouseButton","typedecl":"UI::MouseButton","typeflags":0,"name":"button","default":"UI::MouseButton::Left"}],"decl":"bool IsMouseReleased(MouseButton button = UI::MouseButton::Left)","group":"UI","desc":"Returns true if the given mouse button was just released.","flags":[]},{"ns":"UI","name":"IsMouseDoubleClicked","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":135,"typename":"MouseButton","typedecl":"UI::MouseButton","typeflags":0,"name":"button","default":"UI::MouseButton::Left"}],"decl":"bool IsMouseDoubleClicked(MouseButton button = UI::MouseButton::Left)","group":"UI","desc":"Returns true if the given mouse button was just double clicked.","flags":[]},{"ns":"UI","name":"IsMouseDragging","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":135,"typename":"MouseButton","typedecl":"UI::MouseButton","typeflags":0,"name":"button","default":"UI::MouseButton::Left"},{"typedecl":"float","typeflags":0,"name":"lock_threshold","default":"-1"}],"decl":"bool IsMouseDragging(MouseButton button = UI::MouseButton::Left, float lock_threshold = -1)","group":"UI","desc":"Returns true if the mouse is dragging.","flags":[]},{"ns":"UI","name":"GetMouseDragDelta","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":135,"typename":"MouseButton","typedecl":"UI::MouseButton","typeflags":0,"name":"button","default":"UI::MouseButton::Left"},{"typedecl":"float","typeflags":0,"name":"lock_threshold","default":"-1"}],"decl":"vec2 GetMouseDragDelta(MouseButton button = UI::MouseButton::Left, float lock_threshold = -1)","group":"UI","desc":"Returns the delta from the initial clicking position while the mouse button is pressed or was just released. This is locked and will return 0.0f until the mouse moves past a distance threshold at least once.","flags":[]},{"ns":"UI","name":"SetItemTooltip","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"text"}],"decl":"void SetItemTooltip(const string&in text)","group":"UI","desc":"Sets the last item's tooltip on mouse hover. This is a shorthand for `IsItemHovered()` and `SetTooltip()`.","flags":[]},{"ns":"UI","name":"SetTooltip","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"text"}],"decl":"void SetTooltip(const string&in text)","group":"UI","desc":"Sets the tooltip to currently show on the mouse cursor. See also `SetItemTooltip()`.","flags":[]},{"ns":"UI","name":"BeginTooltip","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void BeginTooltip()","group":"UI","desc":"Begins a tooltip dialog.","flags":[]},{"ns":"UI","name":"BeginItemTooltip","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool BeginItemTooltip()","group":"UI","desc":"Begins a tooltip when the last item has been hovered. This is a shortcut for `IsItemHovered()` and `BeginTooltip()`.","flags":[]},{"ns":"UI","name":"EndTooltip","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndTooltip()","group":"UI","desc":"Ends a tooltip dialog.","flags":[]},{"ns":"UI","name":"OpenPopup","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"id"}],"decl":"void OpenPopup(const string&in id)","group":"UI","desc":"Opens a popup with the given ID. Must be within the same scope of ID's.","flags":[]},{"ns":"UI","name":"CloseCurrentPopup","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void CloseCurrentPopup()","group":"UI","desc":"Closes the current popup.","flags":[]},{"ns":"UI","name":"BeginPopup","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"id"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::WindowFlags::None"}],"decl":"bool BeginPopup(const string&in id, int flags = UI::WindowFlags::None)","group":"UI","desc":"Begins a popup.","flags":[]},{"ns":"UI","name":"BeginPopupContextItem","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"id"}],"decl":"bool BeginPopupContextItem(const string&in id)","group":"UI","desc":"Begins a popup context item.","flags":[]},{"ns":"UI","name":"BeginPopupModal","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"id"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::WindowFlags::None"}],"decl":"bool BeginPopupModal(const string&in id, int flags = UI::WindowFlags::None)","group":"UI","desc":"Begins a modal popup.","flags":[]},{"ns":"UI","name":"BeginPopupModal","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"id"},{"typedecl":"bool","typeflags":2,"name":"open"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::WindowFlags::None"}],"decl":"bool BeginPopupModal(const string&in id, bool&out open, int flags = UI::WindowFlags::None)","group":"UI","desc":"Begins a modal popup.","flags":[]},{"ns":"UI","name":"EndPopup","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndPopup()","group":"UI","desc":"Ends a popup.","flags":[]},{"ns":"UI","name":"BeginCombo","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"current"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::ComboFlags::None"}],"decl":"bool BeginCombo(const string&in label, const string&in current, int flags = UI::ComboFlags::None)","group":"UI","desc":"Begins a combo box.","flags":[]},{"ns":"UI","name":"Selectable","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"bool","typeflags":0,"name":"selected"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::SelectableFlags::None"}],"decl":"bool Selectable(const string&in label, bool selected, int flags = UI::SelectableFlags::None)","group":"UI","desc":"Represents a selectable item. Could be inside of a combo box.","flags":[]},{"ns":"UI","name":"SetItemDefaultFocus","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void SetItemDefaultFocus()","group":"UI","desc":"Puts default focus on the last added item.","flags":[]},{"ns":"UI","name":"EndCombo","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndCombo()","group":"UI","desc":"Ends a combo box.","flags":[]},{"ns":"UI","name":"InputText","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"str"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::InputTextFlags::None"},{"typeid":1140850828,"typename":"InputTextCallback","typedecl":"UI::InputTextCallback@","typeflags":0,"name":"callback","default":"null"}],"decl":"string InputText(const string&in label, string str, int flags = UI::InputTextFlags::None, InputTextCallback@ callback = null)","group":"UI","desc":"Input text. Returns the new value.","flags":[]},{"ns":"UI","name":"InputText","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"str"},{"typedecl":"bool","typeflags":2,"name":"changed"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::InputTextFlags::None"},{"typeid":1140850828,"typename":"InputTextCallback","typedecl":"UI::InputTextCallback@","typeflags":0,"name":"callback","default":"null"}],"decl":"string InputText(const string&in label, string str, bool&out changed, int flags = UI::InputTextFlags::None, InputTextCallback@ callback = null)","group":"UI","desc":"Input text. Returns the new value as well as the changed boolean.","flags":[]},{"ns":"UI","name":"InputTextMultiline","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"str"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size","default":"vec2(0, 0)"},{"typeid":122,"typename":"InputTextFlags","typedecl":"UI::InputTextFlags","typeflags":0,"name":"flags","default":"UI::InputTextFlags::None"},{"typeid":1140850828,"typename":"InputTextCallback","typedecl":"UI::InputTextCallback@","typeflags":0,"name":"callback","default":"null"}],"decl":"string InputTextMultiline(const string&in label, string str, const vec2&in size = vec2(0, 0), InputTextFlags flags = UI::InputTextFlags::None, InputTextCallback@ callback = null)","group":"UI","desc":"Input text in a multiline box. Returns the new value.","flags":[]},{"ns":"UI","name":"InputTextMultiline","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"str"},{"typedecl":"bool","typeflags":2,"name":"changed"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size","default":"vec2(0, 0)"},{"typeid":122,"typename":"InputTextFlags","typedecl":"UI::InputTextFlags","typeflags":0,"name":"flags","default":"UI::InputTextFlags::None"},{"typeid":1140850828,"typename":"InputTextCallback","typedecl":"UI::InputTextCallback@","typeflags":0,"name":"callback","default":"null"}],"decl":"string InputTextMultiline(const string&in label, string str, bool&out changed, const vec2&in size = vec2(0, 0), InputTextFlags flags = UI::InputTextFlags::None, InputTextCallback@ callback = null)","group":"UI","desc":"Input text in a multiline box. Returns the new value as well as the changed boolean.","flags":[]},{"ns":"UI","name":"SetKeyboardFocusHere","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"void SetKeyboardFocusHere(int offset = 0)","group":"UI","desc":"Sets the keyboard focus on the next widget. Use positive offsets to access sub components of a multiple component widget. Use -1 to access previous widget.","flags":[]},{"ns":"UI","name":"InputInt","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"int","typeflags":0,"name":"num"},{"typedecl":"int","typeflags":0,"name":"step","default":"1"}],"decl":"int InputInt(const string&in label, int num, int step = 1)","group":"UI","desc":"Input integer. Returns the new value.","flags":[]},{"ns":"UI","name":"InputFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"float","typeflags":0,"name":"num"},{"typedecl":"float","typeflags":0,"name":"step","default":"1.0f"},{"typedecl":"float","typeflags":0,"name":"step_fast","default":"1.0f"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%.3f\""},{"typeid":122,"typename":"InputTextFlags","typedecl":"UI::InputTextFlags","typeflags":0,"name":"flags","default":"UI::InputTextFlags::None"}],"decl":"float InputFloat(const string&in label, float num, float step = 1.0f, float step_fast = 1.0f, const string&in format = \"%.3f\", InputTextFlags flags = UI::InputTextFlags::None)","group":"UI","desc":"Input float. Returns the new value.","flags":[]},{"ns":"UI","name":"InputFloat2","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"v"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%.3f\""},{"typeid":122,"typename":"InputTextFlags","typedecl":"UI::InputTextFlags","typeflags":0,"name":"flags","default":"UI::InputTextFlags::None"}],"decl":"vec2 InputFloat2(const string&in label, const vec2&in v, const string&in format = \"%.3f\", InputTextFlags flags = UI::InputTextFlags::None)","group":"UI","desc":"Input vec2. Returns the new value.","flags":[]},{"ns":"UI","name":"InputFloat3","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"v"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%.3f\""},{"typeid":122,"typename":"InputTextFlags","typedecl":"UI::InputTextFlags","typeflags":0,"name":"flags","default":"UI::InputTextFlags::None"}],"decl":"vec3 InputFloat3(const string&in label, const vec3&in v, const string&in format = \"%.3f\", InputTextFlags flags = UI::InputTextFlags::None)","group":"UI","desc":"Input vec3. Returns the new value.","flags":[]},{"ns":"UI","name":"InputFloat4","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"v"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%.3f\""},{"typeid":122,"typename":"InputTextFlags","typedecl":"UI::InputTextFlags","typeflags":0,"name":"flags","default":"UI::InputTextFlags::None"}],"decl":"vec4 InputFloat4(const string&in label, const vec4&in v, const string&in format = \"%.3f\", InputTextFlags flags = UI::InputTextFlags::None)","group":"UI","desc":"Input vec4. Returns the new value.","flags":[]},{"ns":"UI","name":"SliderInt","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"int","typeflags":0,"name":"num"},{"typedecl":"int","typeflags":0,"name":"min"},{"typedecl":"int","typeflags":0,"name":"max"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%d\""},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::SliderFlags::None"}],"decl":"int SliderInt(const string&in label, int num, int min, int max, const string&in format = \"%d\", int flags = UI::SliderFlags::None)","group":"UI","desc":"Slider for integers. Returns the new value.","flags":[]},{"ns":"UI","name":"SliderFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"float","typeflags":0,"name":"num"},{"typedecl":"float","typeflags":0,"name":"min"},{"typedecl":"float","typeflags":0,"name":"max"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%.3f\""},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::SliderFlags::None"}],"decl":"float SliderFloat(const string&in label, float num, float min, float max, const string&in format = \"%.3f\", int flags = UI::SliderFlags::None)","group":"UI","desc":"Slider for floats. Returns the new value.","flags":[]},{"ns":"UI","name":"SliderFloat2","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"v"},{"typedecl":"float","typeflags":0,"name":"min"},{"typedecl":"float","typeflags":0,"name":"max"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%.3f\""},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::SliderFlags::None"}],"decl":"vec2 SliderFloat2(const string&in label, const vec2&in v, float min, float max, const string&in format = \"%.3f\", int flags = UI::SliderFlags::None)","group":"UI","desc":"Slider for vec2. Returns the new value.","flags":[]},{"ns":"UI","name":"SliderFloat3","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"v"},{"typedecl":"float","typeflags":0,"name":"min"},{"typedecl":"float","typeflags":0,"name":"max"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%.3f\""},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::SliderFlags::None"}],"decl":"vec3 SliderFloat3(const string&in label, const vec3&in v, float min, float max, const string&in format = \"%.3f\", int flags = UI::SliderFlags::None)","group":"UI","desc":"Slider for vec3. Returns the new value.","flags":[]},{"ns":"UI","name":"SliderFloat4","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"v"},{"typedecl":"float","typeflags":0,"name":"min"},{"typedecl":"float","typeflags":0,"name":"max"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%.3f\""},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::SliderFlags::None"}],"decl":"vec4 SliderFloat4(const string&in label, const vec4&in v, float min, float max, const string&in format = \"%.3f\", int flags = UI::SliderFlags::None)","group":"UI","desc":"Slider for vec4. Returns the new value.","flags":[]},{"ns":"UI","name":"SliderDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"double","typeflags":0,"name":"num"},{"typedecl":"double","typeflags":0,"name":"min"},{"typedecl":"double","typeflags":0,"name":"max"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%.3f\""},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::SliderFlags::None"}],"decl":"double SliderDouble(const string&in label, double num, double min, double max, const string&in format = \"%.3f\", int flags = UI::SliderFlags::None)","group":"UI","desc":"Slider for doubles. Returns the new value.","flags":[]},{"ns":"UI","name":"VSliderInt","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"int","typeflags":0,"name":"num"},{"typedecl":"int","typeflags":0,"name":"min"},{"typedecl":"int","typeflags":0,"name":"max"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%d\""},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::SliderFlags::None"}],"decl":"int VSliderInt(const string&in label, const vec2&in size, int num, int min, int max, const string&in format = \"%d\", int flags = UI::SliderFlags::None)","group":"UI","desc":"Vertical slider for integers. Returns the new value.","flags":[]},{"ns":"UI","name":"VSliderFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"float","typeflags":0,"name":"num"},{"typedecl":"float","typeflags":0,"name":"min"},{"typedecl":"float","typeflags":0,"name":"max"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%.3f\""},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::SliderFlags::None"}],"decl":"float VSliderFloat(const string&in label, const vec2&in size, float num, float min, float max, const string&in format = \"%.3f\", int flags = UI::SliderFlags::None)","group":"UI","desc":"Vertical slider for floats. Returns the new value.","flags":[]},{"ns":"UI","name":"VSliderDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"double","typeflags":0,"name":"num"},{"typedecl":"double","typeflags":0,"name":"min"},{"typedecl":"double","typeflags":0,"name":"max"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%.3f\""},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::SliderFlags::None"}],"decl":"double VSliderDouble(const string&in label, const vec2&in size, double num, double min, double max, const string&in format = \"%.3f\", int flags = UI::SliderFlags::None)","group":"UI","desc":"Vertical slider for doubles. Returns the new value.","flags":[]},{"ns":"UI","name":"InputColor3","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"color"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::ColorEditFlags::None"}],"decl":"vec3 InputColor3(const string&in label, const vec3&in color, int flags = UI::ColorEditFlags::None)","group":"UI","desc":"Input color. Returns the new value.","flags":[]},{"ns":"UI","name":"InputColor4","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::ColorEditFlags::None"}],"decl":"vec4 InputColor4(const string&in label, const vec4&in color, int flags = UI::ColorEditFlags::None)","group":"UI","desc":"Input color. Returns the new value.","flags":[]},{"ns":"UI","name":"Image","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850795,"typename":"Texture","typedecl":"UI::Texture@","typeflags":0,"name":"texture"}],"decl":"void Image(Texture@ texture)","group":"UI","desc":"An image.","flags":[]},{"ns":"UI","name":"Image","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850795,"typename":"Texture","typedecl":"UI::Texture@","typeflags":0,"name":"texture"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"uv0","default":"vec2(0, 0)"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"uv1","default":"vec2(1, 1)"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"tint_col","default":"vec4(1, 1, 1, 1)"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"border_col","default":"vec4()"}],"decl":"void Image(Texture@ texture, const vec2&in size, const vec2&in uv0 = vec2(0, 0), const vec2&in uv1 = vec2(1, 1), const vec4&in tint_col = vec4(1, 1, 1, 1), const vec4&in border_col = vec4())","group":"UI","desc":"An image scaled to a specific size, uv coordinates, and tint color.","flags":[]},{"ns":"UI","name":"BeginChild","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"id"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"bool","typeflags":0,"name":"border"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::WindowFlags::None"}],"decl":"bool BeginChild(const string&in id, const vec2&in size, bool border, int flags = UI::WindowFlags::None)","group":"UI","desc":"Begins a self-container independent scrolling container using UI::ChildFlags::Border for the border parameter. This function exists for backwards compatibility only.","flags":["deprecated"]},{"ns":"UI","name":"BeginChild","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"id"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size","default":"vec2()"},{"typedecl":"int","typeflags":0,"name":"childFlags","default":"UI::ChildFlags::None"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::WindowFlags::None"}],"decl":"bool BeginChild(const string&in id, const vec2&in size = vec2(), int childFlags = UI::ChildFlags::None, int flags = UI::WindowFlags::None)","group":"UI","desc":"Begins a self-contained independent scrolling container.","flags":[]},{"ns":"UI","name":"EndChild","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndChild()","group":"UI","desc":"Ends a child container. Must always be called even if BeginChild returns false!","flags":[]},{"ns":"UI","name":"BeginTabBar","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"id"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::TabBarFlags::None"}],"decl":"void BeginTabBar(const string&in id, int flags = UI::TabBarFlags::None)","group":"UI","desc":"Begins a multi-tab container.","flags":[]},{"ns":"UI","name":"BeginTabItem","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::TabItemFlags::None"}],"decl":"bool BeginTabItem(const string&in label, int flags = UI::TabItemFlags::None)","group":"UI","desc":"Begins a tab item within a multi-tab container.","flags":[]},{"ns":"UI","name":"BeginTabItem","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"bool","typeflags":2,"name":"open"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::TabItemFlags::None"}],"decl":"bool BeginTabItem(const string&in label, bool&out open, int flags = UI::TabItemFlags::None)","group":"UI","desc":"Begins a tab item within a multi-tab container.","flags":[]},{"ns":"UI","name":"EndTabItem","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndTabItem()","group":"UI","desc":"Ends a tab item within a multi-tab container.","flags":[]},{"ns":"UI","name":"EndTabBar","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndTabBar()","group":"UI","desc":"Ends a multi-tab container.","flags":[]},{"ns":"UI","name":"BeginTable","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"id"},{"typedecl":"int","typeflags":0,"name":"columns"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::TableFlags::None"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"outer_size","default":"vec2()"},{"typedecl":"float","typeflags":0,"name":"inner_width","default":"0.0f"}],"decl":"bool BeginTable(const string&in id, int columns, int flags = UI::TableFlags::None, const vec2&in outer_size = vec2(), float inner_width = 0.0f)","group":"UI","desc":"Begins a table. Only call EndTable() if BeginTable() returns true.","flags":[]},{"ns":"UI","name":"EndTable","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndTable()","group":"UI","desc":"Ends a table.","flags":[]},{"ns":"UI","name":"TableNextRow","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::TableRowFlags::None"},{"typedecl":"float","typeflags":0,"name":"min_height","default":"0.0f"}],"decl":"void TableNextRow(int flags = UI::TableRowFlags::None, float min_height = 0.0f)","group":"UI","desc":"Append into the first cell of a new row in a table.","flags":[]},{"ns":"UI","name":"TableNextColumn","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool TableNextColumn()","group":"UI","desc":"Append into the next column (or first column of new row) of a table. Returns true if visible.","flags":[]},{"ns":"UI","name":"TableSetColumnIndex","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"}],"decl":"bool TableSetColumnIndex(int index)","group":"UI","desc":"Append into a specified column of a table. Returns true if visible.","flags":[]},{"ns":"UI","name":"TableSetupColumn","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::TableColumnFlags::None"},{"typedecl":"float","typeflags":0,"name":"init_width_or_weight","default":"0.0f"},{"typedecl":"uint","typeflags":0,"name":"user_id","default":"0"}],"decl":"void TableSetupColumn(const string&in label, int flags = UI::TableColumnFlags::None, float init_width_or_weight = 0.0f, uint user_id = 0)","group":"UI","desc":"Sets up a column within a table with a label, flags, and initial size.","flags":[]},{"ns":"UI","name":"TableSetupScrollFreeze","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"cols"},{"typedecl":"int","typeflags":0,"name":"rows"}],"decl":"void TableSetupScrollFreeze(int cols, int rows)","group":"UI","desc":"Lock columns and rows in a table so they stay visible when scrolled.","flags":[]},{"ns":"UI","name":"TableHeadersRow","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void TableHeadersRow()","group":"UI","desc":"Submit all table header cells based on data provided to TableSetupColumn.","flags":[]},{"ns":"UI","name":"TableHeader","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label"}],"decl":"void TableHeader(const string&in label)","group":"UI","desc":"Submit one header cell manually. (Prefer TableHeadersRow!)","flags":[]},{"ns":"UI","name":"TableGetSortSpecs","returntypeid":1140850830,"returntypename":"TableSortSpecs","returntypedecl":"UI::TableSortSpecs@","returntypeflags":0,"args":[],"decl":"TableSortSpecs@ TableGetSortSpecs()","group":"UI","desc":"Get latest sort specs for the table. Returns null when not sorting.","flags":[]},{"ns":"UI","name":"TableGetColumnCount","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int TableGetColumnCount()","group":"UI","desc":"Returns number of columns (value passed to BeginTable).","flags":[]},{"ns":"UI","name":"TableGetColumnIndex","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int TableGetColumnIndex()","group":"UI","desc":"Returns current column index.","flags":[]},{"ns":"UI","name":"TableGetRowIndex","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int TableGetRowIndex()","group":"UI","desc":"Returns current row index.","flags":[]},{"ns":"UI","name":"TableGetColumnName","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"column_n","default":"-1"}],"decl":"string TableGetColumnName(int column_n = -1)","group":"UI","desc":"Returns an empty string if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column.","flags":[]},{"ns":"UI","name":"TableGetColumnFlags","returntypeid":128,"returntypename":"TableColumnFlags","returntypedecl":"UI::TableColumnFlags","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"column_n","default":"-1"}],"decl":"TableColumnFlags TableGetColumnFlags(int column_n = -1)","group":"UI","desc":"Returns column flags so you can query their Enabled/Visible/Sorted/Hovered status flags. Pass -1 to use current column.","flags":[]},{"ns":"UI","name":"TableSetColumnEnabled","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"column_n"},{"typedecl":"bool","typeflags":0,"name":"v"}],"decl":"void TableSetColumnEnabled(int column_n, bool v)","group":"UI","desc":"Change user accessible enabled/disabled state of a column. Set to false to hide the column. User can use the context menu to change this themselves (right-click in headers, or right-click in columns body with UI::TableFlags::ContextMenuInBody)","flags":[]},{"ns":"UI","name":"TableSetBgColor","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":129,"typename":"TableBgTarget","typedecl":"UI::TableBgTarget","typeflags":0,"name":"target"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"int","typeflags":0,"name":"column_n","default":"-1"}],"decl":"void TableSetBgColor(TableBgTarget target, const vec4&in color, int column_n = -1)","group":"UI","desc":"Change the color of a cell, row, or column. See UI::TableBgTarget flags for details.","flags":[]},{"ns":"UI","name":"BeginListBox","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"id"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size","default":"vec2()"}],"decl":"bool BeginListBox(const string&in id, const vec2&in size = vec2())","group":"UI","desc":"Begins a listbox. This is essentially a thin wrapper to using BeginChild/EndChild with some stylistic changes.","flags":[]},{"ns":"UI","name":"EndListBox","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndListBox()","group":"UI","desc":"Ends a listbox.","flags":[]},{"ns":"UI","name":"AlignTextToFramePadding","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void AlignTextToFramePadding()","group":"UI","desc":"Vertically align upcoming text baseline to frame padding so that it will align properly to regularly framed items (call if you have text on a line before a framed item).","flags":[]},{"ns":"UI","name":"GetTextLineHeight","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetTextLineHeight()","group":"UI","desc":"Gets the line height of text. Typically the font size.","flags":[]},{"ns":"UI","name":"GetTextLineHeightWithSpacing","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetTextLineHeightWithSpacing()","group":"UI","desc":"Gets the line height of text plus the distance between 2 consecutive lines of text.","flags":[]},{"ns":"UI","name":"GetFrameHeight","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetFrameHeight()","group":"UI","desc":"Gets the frame height.","flags":[]},{"ns":"UI","name":"GetFrameHeightWithSpacing","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetFrameHeightWithSpacing()","group":"UI","desc":"Gets the frame height plus the distance in pixels between 2 consecutive lines of framed widgets.","flags":[]},{"ns":"UI","name":"GetCursorPos","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetCursorPos()","group":"UI","desc":"Gets the current position of the UI cursor.","flags":[]},{"ns":"UI","name":"SetCursorPos","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"}],"decl":"void SetCursorPos(const vec2&in pos)","group":"UI","desc":"Sets the current position of the UI cursor.","flags":[]},{"ns":"UI","name":"SetCursorPosX","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"}],"decl":"void SetCursorPosX(float x)","group":"UI","desc":"Sets the current X position of the UI cursor.","flags":[]},{"ns":"UI","name":"SetCursorPosY","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"y"}],"decl":"void SetCursorPosY(float y)","group":"UI","desc":"Sets the current Y position of the UI cursor.","flags":[]},{"ns":"UI","name":"GetCursorScreenPos","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetCursorScreenPos()","group":"UI","desc":"Cursor position in absolute coordinates. Prefer using this rather than `GetCursorPos()`.","flags":[]},{"ns":"UI","name":"SetCursorScreenPos","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"}],"decl":"void SetCursorScreenPos(const vec2&in pos)","group":"UI","desc":"Set cursor position in absolute coordinates.","flags":[]},{"ns":"UI","name":"GetWindowPos","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetWindowPos()","group":"UI","desc":"Gets the current position of the UI window.","flags":[]},{"ns":"UI","name":"SetWindowPos","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typeid":133,"typename":"Cond","typedecl":"UI::Cond","typeflags":0,"name":"cond","default":"UI::Cond::None"}],"decl":"void SetWindowPos(const vec2&in size, Cond cond = UI::Cond::None)","group":"UI","desc":"Sets the current position of the UI window.","flags":[]},{"ns":"UI","name":"GetWindowSize","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetWindowSize()","group":"UI","desc":"Gets the current size of the UI window.","flags":[]},{"ns":"UI","name":"SetWindowSize","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typeid":133,"typename":"Cond","typedecl":"UI::Cond","typeflags":0,"name":"cond","default":"UI::Cond::None"}],"decl":"void SetWindowSize(const vec2&in size, Cond cond = UI::Cond::None)","group":"UI","desc":"Sets the current size of the UI window.","flags":[]},{"ns":"UI","name":"IsWindowFocused","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::FocusedFlags::None"}],"decl":"bool IsWindowFocused(int flags = UI::FocusedFlags::None)","group":"UI","desc":"Is the current window focused? Or its root/child, depending on flags.","flags":[]},{"ns":"UI","name":"SetMouseCursor","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":138,"typename":"MouseCursor","typedecl":"UI::MouseCursor","typeflags":0,"name":"cursor"}],"decl":"void SetMouseCursor(MouseCursor cursor)","group":"UI","desc":"Set the cursor shape of the mouse.","flags":[]},{"ns":"UI","name":"GetContentRegionAvail","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetContentRegionAvail()","group":"UI","desc":"Gets the currently available size in the window.","flags":[]},{"ns":"UI","name":"GetContentRegionMax","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetContentRegionMax()","group":"UI","desc":"Gets the current content boundaries. This is deprecated; you should never need this function. You can do everything with `GetCursorScreenPos()` and `GetContentRegionAvail()` in a more simple way.","flags":["deprecated"]},{"ns":"UI","name":"GetWindowContentRegionMin","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetWindowContentRegionMin()","group":"UI","desc":"Gets the content boundaries minimum. This is deprecated; you should never need this function. You can do everything with `GetCursorScreenPos()` and `GetContentRegionAvail()` in a more simple way.","flags":["deprecated"]},{"ns":"UI","name":"GetWindowContentRegionMax","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetWindowContentRegionMax()","group":"UI","desc":"Gets the content boundaries maximum. This is deprecated; you should never need this function. You can do everything with `GetCursorScreenPos()` and `GetContentRegionAvail()` in a more simple way.","flags":["deprecated"]},{"ns":"UI","name":"GetWindowContentRegionWidth","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetWindowContentRegionWidth()","group":"UI","desc":"Gets the content width. This is deprecated; you should never need this function. You can do everything with `GetCursorScreenPos()` and `GetContentRegionAvail()` in a more simple way.","flags":["deprecated"]},{"ns":"UI","name":"NodTree","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850701,"typename":"CMwNod","typedecl":"CMwNod@","typeflags":0,"name":"nod"},{"typeid":1140850798,"typename":"NodTreeMemberCallback","typedecl":"UI::NodTreeMemberCallback@","typeflags":0,"name":"memberCallback","default":"null"}],"decl":"void NodTree(CMwNod@ nod, NodTreeMemberCallback@ memberCallback = null)","group":"UI","desc":"A tree of nods, much like Nod Explorer.","flags":[]},{"ns":"UI","name":"GetScale","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetScale()","group":"UI","desc":"Returns the current scale of the UI. This can be set by the user in the Openplanet settings. You might need this if you are working with numbers that represent pixels and want to support high UI scales.","flags":[]},{"ns":"UI","name":"IsOverlayShown","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsOverlayShown()","group":"UI","desc":"Returns true if the overlay is currently visible.","flags":[]},{"ns":"UI","name":"ShowOverlay","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void ShowOverlay()","group":"UI","desc":"Shows the overlay.","flags":[]},{"ns":"UI","name":"HideOverlay","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void HideOverlay()","group":"UI","desc":"Hides the overlay.","flags":[]},{"ns":"UI","name":"IsGameUIVisible","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsGameUIVisible()","group":"UI","desc":"Returns true if the game UI is currently visible, or false if it was hidden. By default, the button for this is asterisk on the numpad. Note that this also returns true if the player is not currently in game.","flags":[]},{"ns":"UI","name":"IsRendering","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsRendering()","group":"UI","desc":"Returns true if Openplanet's overlay is rendering at all. For example, this can return false if the global option \"Hide overlay on hidden game UI\" is enabled.","flags":[]},{"ns":"UI","name":"CurrentActionMap","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string CurrentActionMap()","group":"UI","desc":"Returns the name of the currently active action map in the game.","flags":[]},{"ns":"UI","name":"IsDockingEnabled","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsDockingEnabled()","group":"UI","desc":"Returns true if docking is enabled in the Openplanet settings.","flags":[]},{"ns":"UI","name":"ShowNotification","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"text"},{"typedecl":"int","typeflags":0,"name":"time","default":"5000"}],"decl":"void ShowNotification(const string&in text, int time = 5000)","group":"UI","desc":"Shows a notification in the overlay.","flags":[]},{"ns":"UI","name":"ShowNotification","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"header"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"text"},{"typedecl":"int","typeflags":0,"name":"time","default":"5000"}],"decl":"void ShowNotification(const string&in header, const string&in text, int time = 5000)","group":"UI","desc":"Shows a notification in the overlay with an additional header.","flags":[]},{"ns":"UI","name":"ShowNotification","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"header"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"text"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"colBackground"},{"typedecl":"int","typeflags":0,"name":"time","default":"5000"}],"decl":"void ShowNotification(const string&in header, const string&in text, const vec4&in colBackground, int time = 5000)","group":"UI","desc":"Shows a notification in the overlay with an additional header and background color.","flags":[]},{"ns":"UI","name":"GetMousePos","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetMousePos()","group":"UI","desc":"Get the current position of the mouse relative to the top-left corner of the window.","flags":[]},{"ns":"UI","name":"GetMouseWheelDelta","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetMouseWheelDelta()","group":"UI","desc":"Get the vertical scroll amount since the last frame. 1 unit scrolls about 5 lines text. >0 scrolls Up, <0 scrolls Down.","flags":[]},{"ns":"UI","name":"GetMouseWheelDeltaHor","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetMouseWheelDeltaHor()","group":"UI","desc":"Get the horizontal scroll amount since the last frame. >0 scrolls Left, <0 scrolls Right. Most users don't have a mouse with a horizontal wheel.","flags":[]},{"ns":"UI","name":"HSV","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"h","desc":"Hue, normalized between 0 and 1."},{"typedecl":"float","typeflags":0,"name":"s","desc":"Saturation, normalized between 0 and 1."},{"typedecl":"float","typeflags":0,"name":"v","desc":"Value, normalized between 0 and 1."}],"decl":"vec4 HSV(float h, float s, float v)","group":"UI","desc":"Converts normalized HSV values into normalized RGB values.","flags":[]},{"ns":"UI","name":"ToHSV","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"r","desc":"Red, normalized between 0 and 1."},{"typedecl":"float","typeflags":0,"name":"g","desc":"Green, normalized between 0 and 1."},{"typedecl":"float","typeflags":0,"name":"b","desc":"Blue, normalized between 0 and 1."}],"decl":"vec3 ToHSV(float r, float g, float b)","group":"UI","desc":"Converts normalized RGB values into normalized HSV values.","flags":[]},{"ns":"UI","name":"Markdown","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"void Markdown(const string&in str)","group":"UI","desc":"Renders a block of text with Markdown formatting.","flags":[]},{"ns":"UI::Plot","name":"BeginPlot","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"title_id"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size","default":"vec2(-1, 0)"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::PlotFlags::None"}],"decl":"bool BeginPlot(const string&in title_id, const vec2&in size = vec2(-1, 0), int flags = UI::Plot::PlotFlags::None)","group":"UI::Plot","desc":"Starts a 2D plotting context. If this function returns true, `EndPlot()` MUST be called!","flags":[]},{"ns":"UI::Plot","name":"EndPlot","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void EndPlot()","group":"UI::Plot","desc":"Only call `EndPlot()` if `BeginPlot()` returns true!","flags":[]},{"ns":"UI::Plot","name":"SetupAxis","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":144,"typename":"Axis","typedecl":"UI::Plot::Axis","typeflags":0,"name":"axis"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label","default":"\"\"","desc":"Leave this empty for no label."},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::AxisFlags::None"}],"decl":"void SetupAxis(Axis axis, const string&in label = \"\", int flags = UI::Plot::AxisFlags::None)","group":"UI::Plot","desc":"Enables an axis or sets the label and/or flags for an existing axis.","flags":[]},{"ns":"UI::Plot","name":"SetupAxisLimits","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":144,"typename":"Axis","typedecl":"UI::Plot::Axis","typeflags":0,"name":"axis"},{"typedecl":"double","typeflags":0,"name":"v_min"},{"typedecl":"double","typeflags":0,"name":"v_max"},{"typeid":152,"typename":"Cond","typedecl":"UI::Plot::Cond","typeflags":0,"name":"cond","default":"UI::Plot::Cond::Once","desc":"If `UI::Plot::Cond::Always` is used, the axes limits will be locked."}],"decl":"void SetupAxisLimits(Axis axis, double v_min, double v_max, Cond cond = UI::Plot::Cond::Once)","group":"UI::Plot","desc":"Sets an axis range limits. Inversion with `v_min` > `v_max` is not supported.","flags":[]},{"ns":"UI::Plot","name":"SetupAxisFormat","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":144,"typename":"Axis","typedecl":"UI::Plot::Axis","typeflags":0,"name":"axis"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"fmt"}],"decl":"void SetupAxisFormat(Axis axis, const string&in fmt)","group":"UI::Plot","desc":"Sets the format of numeric axis labels via formater specifier (default=\"%g\"). Formated values will be double (i.e. use `%f`).","flags":[]},{"ns":"UI::Plot","name":"SetupAxisScale","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":144,"typename":"Axis","typedecl":"UI::Plot::Axis","typeflags":0,"name":"axis"},{"typeid":149,"typename":"Scale","typedecl":"UI::Plot::Scale","typeflags":0,"name":"scale"}],"decl":"void SetupAxisScale(Axis axis, Scale scale)","group":"UI::Plot","desc":"Sets an axis' scale using built-in options.","flags":[]},{"ns":"UI::Plot","name":"SetupAxisLimitsConstraints","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":144,"typename":"Axis","typedecl":"UI::Plot::Axis","typeflags":0,"name":"axis"},{"typedecl":"double","typeflags":0,"name":"v_min"},{"typedecl":"double","typeflags":0,"name":"v_max"}],"decl":"void SetupAxisLimitsConstraints(Axis axis, double v_min, double v_max)","group":"UI::Plot","desc":"Sets an axis' limits constraints.","flags":[]},{"ns":"UI::Plot","name":"SetupAxisZoomConstraints","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":144,"typename":"Axis","typedecl":"UI::Plot::Axis","typeflags":0,"name":"axis"},{"typedecl":"double","typeflags":0,"name":"z_min"},{"typedecl":"double","typeflags":0,"name":"z_max"}],"decl":"void SetupAxisZoomConstraints(Axis axis, double z_min, double z_max)","group":"UI::Plot","desc":"Sets an axis' zoom constraints.","flags":[]},{"ns":"UI::Plot","name":"SetupAxes","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"x_label"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"y_label"},{"typedecl":"int","typeflags":0,"name":"x_flags","default":"UI::Plot::AxisFlags::None"},{"typedecl":"int","typeflags":0,"name":"y_flags","default":"UI::Plot::AxisFlags::None"}],"decl":"void SetupAxes(const string&in x_label, const string&in y_label, int x_flags = UI::Plot::AxisFlags::None, int y_flags = UI::Plot::AxisFlags::None)","group":"UI::Plot","desc":"Sets the label and/or flags for primary X and Y axes (shorthand for two calls to `SetupAxis`).","flags":[]},{"ns":"UI::Plot","name":"SetupAxesLimits","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"double","typeflags":0,"name":"x_min"},{"typedecl":"double","typeflags":0,"name":"x_max"},{"typedecl":"double","typeflags":0,"name":"y_min"},{"typedecl":"double","typeflags":0,"name":"y_max"},{"typeid":152,"typename":"Cond","typedecl":"UI::Plot::Cond","typeflags":0,"name":"cond","default":"UI::Plot::Cond::Once","desc":"If `UI::Plot::Cond::Always` is used, the axes limits will be locked."}],"decl":"void SetupAxesLimits(double x_min, double x_max, double y_min, double y_max, Cond cond = UI::Plot::Cond::Once)","group":"UI::Plot","desc":"Sets the primary X and Y axes range limits. Shorthand for two calls to `SetupAxisLimits`.","flags":[]},{"ns":"UI::Plot","name":"SetupLegend","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":146,"typename":"Location","typedecl":"UI::Plot::Location","typeflags":0,"name":"location"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::LegendFlags::None"}],"decl":"void SetupLegend(Location location, int flags = UI::Plot::LegendFlags::None)","group":"UI::Plot","desc":"Sets up the plot legend.","flags":[]},{"ns":"UI::Plot","name":"SetupMouseText","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":146,"typename":"Location","typedecl":"UI::Plot::Location","typeflags":0,"name":"location"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::MouseTextFlags::None"}],"decl":"void SetupMouseText(Location location, int flags = UI::Plot::MouseTextFlags::None)","group":"UI::Plot","desc":"Set the location of the current plot's mouse position text (default = `South|East`).","flags":[]},{"ns":"UI::Plot","name":"PushColormap","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":153,"typename":"Colormap","typedecl":"UI::Plot::Colormap","typeflags":0,"name":"cmap"}],"decl":"void PushColormap(Colormap cmap)","group":"UI::Plot","desc":"Temporarily switch to a different colormap. Don't forget to call `PopColormap`!","flags":[]},{"ns":"UI::Plot","name":"PopColormap","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"count","default":"1"}],"decl":"void PopColormap(int count = 1)","group":"UI::Plot","desc":"Undo temporary colormap modification(s).","flags":[]},{"ns":"UI::Plot","name":"SetNextLineStyle","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"col","default":"vec4(0, 0, 0, -1)"},{"typedecl":"float","typeflags":0,"name":"weight","default":"-1.0f"}],"decl":"void SetNextLineStyle(const vec4&in col = vec4(0, 0, 0, -1), float weight = -1.0f)","group":"UI::Plot","desc":"Set the line color and weight for the next item only.","flags":[]},{"ns":"UI::Plot","name":"SetNextFillStyle","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"col","default":"vec4(0, 0, 0, -1)"},{"typedecl":"float","typeflags":0,"name":"alpha_mod","default":"-1.0f"}],"decl":"void SetNextFillStyle(const vec4&in col = vec4(0, 0, 0, -1), float alpha_mod = -1.0f)","group":"UI::Plot","desc":"Set the fill color for the next item only.","flags":[]},{"ns":"UI::Plot","name":"SetNextMarkerStyle","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":150,"typename":"Marker","typedecl":"UI::Plot::Marker","typeflags":0,"name":"marker","default":"UI::Plot::Marker::Auto"},{"typedecl":"float","typeflags":0,"name":"size","default":"-1.0f"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"fill","default":"vec4(0, 0, 0, -1)"},{"typedecl":"float","typeflags":0,"name":"weight","default":"-1.0f"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"outline","default":"vec4(0, 0, 0, -1)"}],"decl":"void SetNextMarkerStyle(Marker marker = UI::Plot::Marker::Auto, float size = -1.0f, const vec4&in fill = vec4(0, 0, 0, -1), float weight = -1.0f, const vec4&in outline = vec4(0, 0, 0, -1))","group":"UI::Plot","desc":"Set the marker style for the next item only.","flags":[]},{"ns":"UI::Plot","name":"SetNextErrorBarStyle","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"col","default":"vec4(0, 0, 0, -1)"},{"typedecl":"float","typeflags":0,"name":"size","default":"-1.0f"},{"typedecl":"float","typeflags":0,"name":"weight","default":"-1.0f"}],"decl":"void SetNextErrorBarStyle(const vec4&in col = vec4(0, 0, 0, -1), float size = -1.0f, float weight = -1.0f)","group":"UI::Plot","desc":"Set the error bar style for the next item only.","flags":[]},{"ns":"UI::Plot","name":"ColormapScale","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label","desc":"Use double hashes to hide label (e.g. `##NoLabel`)."},{"typedecl":"double","typeflags":0,"name":"scale_min","desc":"If `scale_min` > `scale_max`, the scale to color mapping will be reversed."},{"typedecl":"double","typeflags":0,"name":"scale_max","desc":"If `scale_min` > `scale_max`, the scale to color mapping will be reversed."},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size","default":"vec2()"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"format","default":"\"%g\""},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::ColormapScaleFlags::None"},{"typeid":153,"typename":"Colormap","typedecl":"UI::Plot::Colormap","typeflags":0,"name":"cmap","default":"UI::Plot::Colormap::Auto"}],"decl":"void ColormapScale(const string&in label, double scale_min, double scale_max, const vec2&in size = vec2(), const string&in format = \"%g\", int flags = UI::Plot::ColormapScaleFlags::None, Colormap cmap = UI::Plot::Colormap::Auto)","group":"UI::Plot","desc":"Shows a vertical color scale with linear spaced ticks using the specified color map.","flags":[]},{"ns":"UI::Plot","name":"PlotLine","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label_id"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"values"},{"typedecl":"double","typeflags":0,"name":"x_scale","default":"1.0"},{"typedecl":"double","typeflags":0,"name":"x_start","default":"0.0"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::LineFlags::None"}],"decl":"void PlotLine(const string&in label_id, const float[]@ values, double x_scale = 1.0, double x_start = 0.0, int flags = UI::Plot::LineFlags::None)","group":"UI::Plot","desc":"Plots a standard 2D line plot.","flags":[]},{"ns":"UI::Plot","name":"PlotLine","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label_id"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"xs"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"ys"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::LineFlags::None"}],"decl":"void PlotLine(const string&in label_id, const float[]@ xs, const float[]@ ys, int flags = UI::Plot::LineFlags::None)","group":"UI::Plot","desc":"Plots a standard 2D line plot.","flags":[]},{"ns":"UI::Plot","name":"PlotBars","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label_id"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"values"},{"typedecl":"double","typeflags":0,"name":"bar_size","default":"0.67","desc":"Size of the bars in plot units."},{"typedecl":"double","typeflags":0,"name":"shift","default":"0.0","desc":"How much to shift bars in plot units."},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::BarsFlags::None"}],"decl":"void PlotBars(const string&in label_id, const float[]@ values, double bar_size = 0.67, double shift = 0.0, int flags = UI::Plot::BarsFlags::None)","group":"UI::Plot","desc":"Plots a bar graph. Vertical by default.","flags":[]},{"ns":"UI::Plot","name":"PlotBars","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label_id"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"xs"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"ys"},{"typedecl":"double","typeflags":0,"name":"bar_size","default":"0.67","desc":"Size of the bars in plot units."},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::BarsFlags::None"}],"decl":"void PlotBars(const string&in label_id, const float[]@ xs, const float[]@ ys, double bar_size = 0.67, int flags = UI::Plot::BarsFlags::None)","group":"UI::Plot","desc":"Plots a bar graph. Vertical by default.","flags":[]},{"ns":"UI::Plot","name":"PlotErrorBars","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label_id","desc":"Should be the same as the `label_id` of the associated line or bar plot."},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"xs"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"ys"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"err"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::ErrorBarsFlags::None"}],"decl":"void PlotErrorBars(const string&in label_id, const float[]@ xs, const float[]@ ys, const float[]@ err, int flags = UI::Plot::ErrorBarsFlags::None)","group":"UI::Plot","desc":"Plots vertical error bar.","flags":[]},{"ns":"UI::Plot","name":"PlotErrorBars","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label_id","desc":"Should be the same as the `label_id` of the associated line or bar plot."},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"xs"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"ys"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"neg"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"pos"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::ErrorBarsFlags::None"}],"decl":"void PlotErrorBars(const string&in label_id, const float[]@ xs, const float[]@ ys, const float[]@ neg, const float[]@ pos, int flags = UI::Plot::ErrorBarsFlags::None)","group":"UI::Plot","desc":"Plots vertical error bar.","flags":[]},{"ns":"UI::Plot","name":"PlotShaded","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label_id"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"values"},{"typedecl":"double","typeflags":0,"name":"yref","default":"0.0","desc":"Reference Y value. Set to `Math::PosInfl` or `Math::NegInfl` for infinite fill extents."},{"typedecl":"double","typeflags":0,"name":"xscale","default":"1.0"},{"typedecl":"double","typeflags":0,"name":"xstart","default":"0.0"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::ShadedFlags::None"}],"decl":"void PlotShaded(const string&in label_id, const float[]@ values, double yref = 0.0, double xscale = 1.0, double xstart = 0.0, int flags = UI::Plot::ShadedFlags::None)","group":"UI::Plot","desc":"Plots a shaded (filled) region between two lines, or a line and a horizontal reference.","flags":[]},{"ns":"UI::Plot","name":"PlotShaded","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label_id"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"xs"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"ys"},{"typedecl":"double","typeflags":0,"name":"yref","default":"0.0","desc":"Reference Y value. Set to `Math::PosInfl` or `Math::NegInfl` for infinite fill extents."},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::ShadedFlags::None"}],"decl":"void PlotShaded(const string&in label_id, const float[]@ xs, const float[]@ ys, double yref = 0.0, int flags = UI::Plot::ShadedFlags::None)","group":"UI::Plot","desc":"Plots a shaded (filled) region between two lines, or a line and a horizontal reference.","flags":[]},{"ns":"UI::Plot","name":"PlotShaded","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label_id"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"xs"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"ys1"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"ys2"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::ShadedFlags::None"}],"decl":"void PlotShaded(const string&in label_id, const float[]@ xs, const float[]@ ys1, const float[]@ ys2, int flags = UI::Plot::ShadedFlags::None)","group":"UI::Plot","desc":"Plots a shaded (filled) region between two lines, or a line and a horizontal reference.","flags":[]},{"ns":"UI::Plot","name":"PlotScatter","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label_id"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"values"},{"typedecl":"double","typeflags":0,"name":"xscale","default":"1.0"},{"typedecl":"double","typeflags":0,"name":"xstart","default":"0.0"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::ScatterFlags::None"}],"decl":"void PlotScatter(const string&in label_id, const float[]@ values, double xscale = 1.0, double xstart = 0.0, int flags = UI::Plot::ScatterFlags::None)","group":"UI::Plot","desc":"Plots a standard 2D scatter plot. Default marker is `UI::Plot::Marker::Circle`.","flags":[]},{"ns":"UI::Plot","name":"PlotScatter","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label_id"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"xs"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"ys"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::ScatterFlags::None"}],"decl":"void PlotScatter(const string&in label_id, const float[]@ xs, const float[]@ ys, int flags = UI::Plot::ScatterFlags::None)","group":"UI::Plot","desc":"Plots a standard 2D scatter plot. Default marker is `UI::Plot::Marker::Circle`.","flags":[]},{"ns":"UI::Plot","name":"PlotBarGroups","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1879051611,"typename":"array","typedecl":"const string[]@","typeflags":0,"name":"label_ids"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"values","desc":"Row-major matrix where the number of rows equals the number of labels. The number of columns is automatically calculated."},{"typedecl":"double","typeflags":0,"name":"group_size","default":"0.67"},{"typedecl":"double","typeflags":0,"name":"shift","default":"0.0"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::BarGroupsFlags::None"}],"decl":"void PlotBarGroups(const string[]@ label_ids, const float[]@ values, double group_size = 0.67, double shift = 0.0, int flags = UI::Plot::BarGroupsFlags::None)","group":"UI::Plot","desc":"Plots a group of bars.","flags":[]},{"ns":"UI::Plot","name":"PlotStems","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label_id"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"values"},{"typedecl":"double","typeflags":0,"name":"ref","default":"0.0"},{"typedecl":"double","typeflags":0,"name":"scale","default":"1.0"},{"typedecl":"double","typeflags":0,"name":"start","default":"0.0"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::StemsFlags::None"}],"decl":"void PlotStems(const string&in label_id, const float[]@ values, double ref = 0.0, double scale = 1.0, double start = 0.0, int flags = UI::Plot::StemsFlags::None)","group":"UI::Plot","desc":"Plots stems. Vertical by default.","flags":[]},{"ns":"UI::Plot","name":"PlotStems","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label_id"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"xs"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"ys"},{"typedecl":"double","typeflags":0,"name":"ref","default":"0.0"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::StemsFlags::None"}],"decl":"void PlotStems(const string&in label_id, const float[]@ xs, const float[]@ ys, double ref = 0.0, int flags = UI::Plot::StemsFlags::None)","group":"UI::Plot","desc":"Plots stems. Vertical by default.","flags":[]},{"ns":"UI::Plot","name":"PlotStairs","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label_id"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"values"},{"typedecl":"double","typeflags":0,"name":"xscale","default":"1.0"},{"typedecl":"double","typeflags":0,"name":"xstart","default":"0.0"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::StairsFlags::None"}],"decl":"void PlotStairs(const string&in label_id, const float[]@ values, double xscale = 1.0, double xstart = 0.0, int flags = UI::Plot::StairsFlags::None)","group":"UI::Plot","desc":"Plots a a stairstep graph. The y value is continued constantly to the right from every x position, i.e. the interval `[x[i], x[i+1]]` has the value `y[i]`","flags":[]},{"ns":"UI::Plot","name":"PlotStairs","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label_id"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"xs"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"ys"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::StairsFlags::None"}],"decl":"void PlotStairs(const string&in label_id, const float[]@ xs, const float[]@ ys, int flags = UI::Plot::StairsFlags::None)","group":"UI::Plot","desc":"Plots a a stairstep graph. The y value is continued constantly to the right from every x position, i.e. the interval `[x[i], x[i+1]]` has the value `y[i]`","flags":[]},{"ns":"UI::Plot","name":"PlotPieChart","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1879051611,"typename":"array","typedecl":"const string[]@","typeflags":0,"name":"label_ids"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"values"},{"typedecl":"double","typeflags":0,"name":"x","default":"0.0","desc":"X position in plot units."},{"typedecl":"double","typeflags":0,"name":"y","default":"0.0","desc":"Y position in plot units."},{"typedecl":"double","typeflags":0,"name":"radius","default":"1.0","desc":"Radius of the pie chart in plot units."},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label_fmt","default":"\"%.1f\"","desc":"Can be set to an empty string for no labels."},{"typedecl":"double","typeflags":0,"name":"angle0","default":"90.0"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::PieChartFlags::None"}],"decl":"void PlotPieChart(const string[]@ label_ids, const float[]@ values, double x = 0.0, double y = 0.0, double radius = 1.0, const string&in label_fmt = \"%.1f\", double angle0 = 90.0, int flags = UI::Plot::PieChartFlags::None)","group":"UI::Plot","desc":"Plots a pie chart. Center and radius are in plot units.","flags":[]},{"ns":"UI::Plot","name":"PlotHeatmap","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label_id"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"values","desc":"Expected to be in row-major order by default."},{"typedecl":"int","typeflags":0,"name":"rows"},{"typedecl":"int","typeflags":0,"name":"cols"},{"typedecl":"double","typeflags":0,"name":"scale_min","default":"0.0","desc":"Leave this at 0 for automatic color scaling, or set to a predefined range minimum."},{"typedecl":"double","typeflags":0,"name":"scale_max","default":"0.0","desc":"Leave this at 0 for automatic color scaling, or set to a predefined range maximum."},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label_fmt","default":"\"%.1f\"","desc":"Can be set to an empty string for no labels."},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"bounds_min","default":"vec2()"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"bounds_max","default":"vec2(1, 1)"},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::HeatmapFlags::None"}],"decl":"void PlotHeatmap(const string&in label_id, const float[]@ values, int rows, int cols, double scale_min = 0.0, double scale_max = 0.0, const string&in label_fmt = \"%.1f\", const vec2&in bounds_min = vec2(), const vec2&in bounds_max = vec2(1, 1), int flags = UI::Plot::HeatmapFlags::None)","group":"UI::Plot","desc":"Plots a 2D heatmap chart.","flags":[]},{"ns":"UI::Plot","name":"PlotHistogram","returntypedecl":"double","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label_id"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"values"},{"typedecl":"int","typeflags":0,"name":"bins","default":"UI::Plot::Bin::Sturges","desc":"Can be a positive integer or a `UI::Plot::Bin` method."},{"typedecl":"double","typeflags":0,"name":"bar_scale","default":"1.0"},{"typedecl":"double","typeflags":0,"name":"min","default":"0.0","desc":"If left unspecified, the min of `values` will be used as the range. Otherwise, outlier values outside of the range are not binned."},{"typedecl":"double","typeflags":0,"name":"max","default":"0.0","desc":"If left unspecified, the max of `values` will be used as the range. Otherwise, outlier values outside of the range are not binned."},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::HistogramFlags::None"}],"decl":"double PlotHistogram(const string&in label_id, const float[]@ values, int bins = UI::Plot::Bin::Sturges, double bar_scale = 1.0, double min = 0.0, double max = 0.0, int flags = UI::Plot::HistogramFlags::None)","group":"UI::Plot","desc":"Plots a horizontal histogram. The largest bin count or density is returned.","flags":[]},{"ns":"UI::Plot","name":"PlotHistogram2D","returntypedecl":"double","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"label_id"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"xs"},{"typeid":1879051617,"typename":"array","typedecl":"const float[]@","typeflags":0,"name":"ys"},{"typedecl":"int","typeflags":0,"name":"x_bins","default":"UI::Plot::Bin::Sturges","desc":"Can be a positive integer or a `UI::Plot::Bin` method."},{"typedecl":"int","typeflags":0,"name":"y_bins","default":"UI::Plot::Bin::Sturges","desc":"Can be a positive integer or a `UI::Plot::Bin` method."},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"range_min","default":"vec2()","desc":"If left unspecified, the min of `xs` and `ys` will be used as the ranges. Otherwise, outlier values outside of range are not binned."},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"range_max","default":"vec2()","desc":"If left unspecified, the max of `xs` and `ys` will be used as the ranges. Otherwise, outlier values outside of range are not binned."},{"typedecl":"int","typeflags":0,"name":"flags","default":"UI::Plot::HistogramFlags::None"}],"decl":"double PlotHistogram2D(const string&in label_id, const float[]@ xs, const float[]@ ys, int x_bins = UI::Plot::Bin::Sturges, int y_bins = UI::Plot::Bin::Sturges, const vec2&in range_min = vec2(), const vec2&in range_max = vec2(), int flags = UI::Plot::HistogramFlags::None)","group":"UI::Plot","desc":"Plots two dimensional, bivariate histogram as a heatmap. The largest bin count or density is returned.","flags":[]},{"ns":"Draw","name":"GetWidth","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int GetWidth()","group":"Draw","desc":"Gets the width of the game's resolution.","flags":[]},{"ns":"Draw","name":"GetHeight","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int GetHeight()","group":"Draw","desc":"Gets the height of the game's resolution.","flags":[]},{"ns":"Draw","name":"MeasureString","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"},{"typeid":1140850796,"typename":"Font","typedecl":"UI::Font@","typeflags":0,"name":"font","default":"null"},{"typedecl":"float","typeflags":0,"name":"size","default":"0.0f"},{"typedecl":"float","typeflags":0,"name":"wrapWidth","default":"0.0f"}],"decl":"vec2 MeasureString(const string&in str, UI::Font@ font = null, float size = 0.0f, float wrapWidth = 0.0f)","group":"Draw","desc":"Calculates the size that a string will be drawn at.","flags":[]},{"ns":"UI","name":"GetBackgroundDrawList","returntypeid":1140850854,"returntypename":"DrawList","returntypedecl":"UI::DrawList@","returntypeflags":0,"args":[],"decl":"DrawList@ GetBackgroundDrawList()","group":"UI","desc":"Get background draw list. (Note: You might want to prefer using the Nvg API!)","flags":[]},{"ns":"UI","name":"GetForegroundDrawList","returntypeid":1140850854,"returntypename":"DrawList","returntypedecl":"UI::DrawList@","returntypeflags":0,"args":[],"decl":"DrawList@ GetForegroundDrawList()","group":"UI","desc":"Get foreground draw list.","flags":[]},{"ns":"UI","name":"GetWindowDrawList","returntypeid":1140850854,"returntypename":"DrawList","returntypedecl":"UI::DrawList@","returntypeflags":0,"args":[],"decl":"DrawList@ GetWindowDrawList()","group":"UI","desc":"Get draw list associated to the current UI window. (Do not keep this handle around outside of windows this was called from!)","flags":[]},{"name":"tostring","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"string tostring(const ?&in)","group":"Core","desc":"Returns a string representation of the given object, if possible. Will call an object's ToString() method if it exists. Throws an exception if it was unable to.","flags":[]},{"name":"trace","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"void trace(const string&in)","group":"Core","desc":"Prints a trace to Openplanet's log.","flags":[]},{"name":"print","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"void print(const string&in)","group":"Core","desc":"Prints a line to Openplanet's log.","flags":[]},{"name":"warn","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"void warn(const string&in)","group":"Core","desc":"Prints a warning to Openplanet's log.","flags":[]},{"name":"error","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"void error(const string&in)","group":"Core","desc":"Prints an error to Openplanet's log.","flags":[]},{"name":"trace","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":1,"name":""}],"decl":"void trace(?&in)","group":"Core","desc":"Prints a trace to Openplanet's log. Will call a passed object's ToString() method if it exists.","flags":[]},{"name":"print","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":1,"name":""}],"decl":"void print(?&in)","group":"Core","desc":"Prints a line to Openplanet's log. Will call a passed object's ToString() method if it exists.","flags":[]},{"name":"warn","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":1,"name":""}],"decl":"void warn(?&in)","group":"Core","desc":"Prints a warning to Openplanet's log. Will call a passed object's ToString() method if it exists.","flags":[]},{"name":"error","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":1,"name":""}],"decl":"void error(?&in)","group":"Core","desc":"Prints an error to Openplanet's log. Will call a passed object's ToString() method if it exists.","flags":[]},{"name":"throw","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"void throw(const string&in)","group":"Core","desc":"Throws a script exception.","flags":[]},{"name":"getExceptionInfo","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string getExceptionInfo()","group":"Core","desc":"Returns the exception string.","flags":[]},{"name":"sleep","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"ms","desc":"The number of milliseconds to yield for. For backwards compatibility reasons, passing 0 here will yield for exactly 1 frame."}],"decl":"void sleep(uint64 ms)","group":"Core","desc":"Yields the current execution for a given period of time. Execution will be resumed after that time.","flags":[]},{"name":"yield","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void yield()","group":"Core","desc":"Yields the current execution. Execution will be resumed the next game tick. This is the same as calling `yield(1)`.","flags":[]},{"name":"yield","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"frames","desc":"The number of frames to yield for. Passing 0 here will not yield at all, and should be considered a no-op. Passing 1 is the same thing as calling yield()."}],"decl":"void yield(uint frames)","group":"Core","desc":"Yields the current execution for a specific number of frames. Execution will be resumed after the given number of frames have passed. Do not use this function to yield for a specific time as this function is framerate dependant - use `sleep()` for that instead.","flags":[]},{"name":"startnew","returntypeid":1140850727,"returntypename":"awaitable","returntypedecl":"awaitable@","returntypeflags":0,"args":[{"typeid":1140850720,"typename":"CoroutineFunc","typedecl":"CoroutineFunc@","typeflags":0,"name":"func"}],"decl":"awaitable@ startnew(CoroutineFunc@ func)","group":"Core","desc":"Starts a new yieldable coroutine from the given function. Function should be a declaration of 'void Func()'.","flags":[]},{"name":"startnew","returntypeid":1140850727,"returntypename":"awaitable","returntypedecl":"awaitable@","returntypeflags":0,"args":[{"typeid":1140850721,"typename":"CoroutineFuncUserdata","typedecl":"CoroutineFuncUserdata@","typeflags":0,"name":"func"},{"typeid":67108895,"typename":"ref","typedecl":"ref","typeflags":0,"name":"userdata"}],"decl":"awaitable@ startnew(CoroutineFuncUserdata@ func, ref userdata)","group":"Core","desc":"Starts a new yieldable coroutine from the given function which also provides a userdata handle parameter. Function should be a declaration of 'void Func(ref@)'.","flags":[]},{"name":"startnew","returntypeid":1140850727,"returntypename":"awaitable","returntypedecl":"awaitable@","returntypeflags":0,"args":[{"typeid":1140850722,"typename":"CoroutineFuncUserdataInt64","typedecl":"CoroutineFuncUserdataInt64@","typeflags":0,"name":"func"},{"typedecl":"int","typeflags":4,"name":"userdata"}],"decl":"awaitable@ startnew(CoroutineFuncUserdataInt64@ func, const int userdata)","group":"Core","desc":"Starts a new yieldable coroutine from the given function which also provides a userdata signed integer. Function should be a declaration of 'void Func(int64)'.","flags":[]},{"name":"startnew","returntypeid":1140850727,"returntypename":"awaitable","returntypedecl":"awaitable@","returntypeflags":0,"args":[{"typeid":1140850722,"typename":"CoroutineFuncUserdataInt64","typedecl":"CoroutineFuncUserdataInt64@","typeflags":0,"name":"func"},{"typedecl":"int64","typeflags":4,"name":"userdata"}],"decl":"awaitable@ startnew(CoroutineFuncUserdataInt64@ func, const int64 userdata)","group":"Core","desc":"Starts a new yieldable coroutine from the given function which also provides a userdata signed integer. Function should be a declaration of 'void Func(int64)'.","flags":[]},{"name":"startnew","returntypeid":1140850727,"returntypename":"awaitable","returntypedecl":"awaitable@","returntypeflags":0,"args":[{"typeid":1140850723,"typename":"CoroutineFuncUserdataUint64","typedecl":"CoroutineFuncUserdataUint64@","typeflags":0,"name":"func"},{"typedecl":"uint","typeflags":4,"name":"userdata"}],"decl":"awaitable@ startnew(CoroutineFuncUserdataUint64@ func, const uint userdata)","group":"Core","desc":"Starts a new yieldable coroutine from the given function which also provides a userdata unsigned integer. Function should be a declaration of 'void Func(uint64)'.","flags":[]},{"name":"startnew","returntypeid":1140850727,"returntypename":"awaitable","returntypedecl":"awaitable@","returntypeflags":0,"args":[{"typeid":1140850723,"typename":"CoroutineFuncUserdataUint64","typedecl":"CoroutineFuncUserdataUint64@","typeflags":0,"name":"func"},{"typedecl":"uint64","typeflags":4,"name":"userdata"}],"decl":"awaitable@ startnew(CoroutineFuncUserdataUint64@ func, const uint64 userdata)","group":"Core","desc":"Starts a new yieldable coroutine from the given function which also provides a userdata unsigned integer. Function should be a declaration of 'void Func(uint64)'.","flags":[]},{"name":"startnew","returntypeid":1140850727,"returntypename":"awaitable","returntypedecl":"awaitable@","returntypeflags":0,"args":[{"typeid":1140850724,"typename":"CoroutineFuncUserdataDouble","typedecl":"CoroutineFuncUserdataDouble@","typeflags":0,"name":"func"},{"typedecl":"double","typeflags":4,"name":"userdata"}],"decl":"awaitable@ startnew(CoroutineFuncUserdataDouble@ func, const double userdata)","group":"Core","desc":"Starts a new yieldable coroutine from the given function which also provides a userdata floating point number. Function should be a declaration of 'void Func(double)'.","flags":[]},{"name":"startnew","returntypeid":1140850727,"returntypename":"awaitable","returntypedecl":"awaitable@","returntypeflags":0,"args":[{"typeid":1140850725,"typename":"CoroutineFuncUserdataBool","typedecl":"CoroutineFuncUserdataBool@","typeflags":0,"name":"func"},{"typedecl":"bool","typeflags":4,"name":"userdata"}],"decl":"awaitable@ startnew(CoroutineFuncUserdataBool@ func, const bool userdata)","group":"Core","desc":"Starts a new yieldable coroutine from the given function which also provides a userdata boolean. Function should be a declaration of 'void Func(bool)'.","flags":[]},{"name":"startnew","returntypeid":1140850727,"returntypename":"awaitable","returntypedecl":"awaitable@","returntypeflags":0,"args":[{"typeid":1140850726,"typename":"CoroutineFuncUserdataString","typedecl":"CoroutineFuncUserdataString@","typeflags":0,"name":"func"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"userdata"}],"decl":"awaitable@ startnew(CoroutineFuncUserdataString@ func, const string&in userdata)","group":"Core","desc":"Starts a new yieldable coroutine from the given function which also provides a userdata string. Function should be a declaration of 'void Func(const string &in)'.","flags":[]},{"name":"PrintActiveContextStack","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"bool","typeflags":0,"name":"error","default":"false"}],"decl":"void PrintActiveContextStack(bool error = false)","group":"Core","desc":"Prints the currently active context stack trace to the log.","flags":[]},{"name":"ExploreNod","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"name"},{"typedecl":"?","typeflags":5,"name":""}],"decl":"void ExploreNod(const string&in name, const ?&in)","group":"Core","desc":"Opens the Nod Explorer with the given nod and the given tab name.","flags":[]},{"name":"ExploreNod","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"name"},{"typedecl":"?","typeflags":5,"name":""},{"typeid":1677721664,"typename":"MwClassInfo","typedecl":"const Reflection::MwClassInfo@","typeflags":0,"name":"classInfo"}],"decl":"void ExploreNod(const string&in name, const ?&in, const Reflection::MwClassInfo@ classInfo)","group":"Core","desc":"Opens the Nod Explorer with the given nod, the given tab name, and the given class info. Only use this for exploring structs.","flags":[]},{"name":"ExploreNod","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"void ExploreNod(const ?&in)","group":"Core","desc":"Opens the Nod Explorer with the given nod.","flags":[]},{"name":"OpenplanetHasFullPermissions","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool OpenplanetHasFullPermissions()","group":"Core","desc":"Returns true if Openplanet has full permissions. (On Trackmania, this means having the Club Edition of the game.)","flags":[]},{"name":"OpenplanetHasPaidPermissions","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool OpenplanetHasPaidPermissions()","group":"Core","desc":"Returns true if Openplanet has (at least) paid permissions. (On Trackmania, this means having the Standard or Club Edition of the game.)","flags":[]},{"name":"GetApp","returntypeid":1140851280,"returntypename":"CGameCtnApp","returntypedecl":"CGameCtnApp@","returntypeflags":0,"args":[],"decl":"CGameCtnApp@ GetApp()","group":"Core","desc":"Gets the main game app object.","flags":[]},{"name":"GetFidFromNod","returntypeid":1140852512,"returntypename":"CSystemFidFile","returntypedecl":"CSystemFidFile@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"CSystemFidFile@ GetFidFromNod(const ?&in)","group":"Core","desc":"Gets the fid of the given nod, if it's set.","flags":[]},{"name":"GetLocalLogin","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string GetLocalLogin()","group":"Core","desc":"Gets the logged in user's username.","flags":[]},{"name":"RegisterLoadCallback","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"id"}],"decl":"void RegisterLoadCallback(uint id)","group":"Core","desc":"Tells the scripting to invoke the currently executing plugin when nods are loaded with the given class ID.","flags":[]},{"name":"UnregisterLoadCallback","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"id"}],"decl":"void UnregisterLoadCallback(uint id)","group":"Core","desc":"Tells the scripting to stop invoking the currently executing plugin when nods are loaded with the given class ID.","flags":[]},{"name":"OpenBrowserURL","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"url"}],"decl":"void OpenBrowserURL(const string&in url)","group":"Core","desc":"Opens the default web browser with the given URL.","flags":[]},{"name":"OpenExplorerPath","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"void OpenExplorerPath(const string&in path)","group":"Core","desc":"Opens Windows explorer to the specified absolute path.","flags":[]},{"ns":"Fids","name":"GetResource","returntypeid":1140852512,"returntypename":"CSystemFidFile","returntypedecl":"CSystemFidFile@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFidFile@ GetResource(const string&in path)","group":"Fids","desc":"Gets a fid from the Resources drive.","flags":[]},{"ns":"Fids","name":"GetProgramData","returntypeid":1140852512,"returntypename":"CSystemFidFile","returntypedecl":"CSystemFidFile@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFidFile@ GetProgramData(const string&in path)","group":"Fids","desc":"Gets a fid from the ProgramData drive.","flags":[]},{"ns":"Fids","name":"GetUser","returntypeid":1140852512,"returntypename":"CSystemFidFile","returntypedecl":"CSystemFidFile@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFidFile@ GetUser(const string&in path)","group":"Fids","desc":"Gets a fid from the User drive.","flags":[]},{"ns":"Fids","name":"GetGame","returntypeid":1140852512,"returntypename":"CSystemFidFile","returntypedecl":"CSystemFidFile@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFidFile@ GetGame(const string&in path)","group":"Fids","desc":"Gets a fid from the Game drive.","flags":[]},{"ns":"Fids","name":"GetFake","returntypeid":1140852512,"returntypename":"CSystemFidFile","returntypedecl":"CSystemFidFile@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFidFile@ GetFake(const string&in path)","group":"Fids","desc":"Gets a fid from the Fake drive.","flags":[]},{"ns":"Fids","name":"GetResourceFolder","returntypeid":1140852511,"returntypename":"CSystemFidsFolder","returntypedecl":"CSystemFidsFolder@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFidsFolder@ GetResourceFolder(const string&in path)","group":"Fids","desc":"Gets a fid container from the Resources drive.","flags":[]},{"ns":"Fids","name":"GetProgramDataFolder","returntypeid":1140852511,"returntypename":"CSystemFidsFolder","returntypedecl":"CSystemFidsFolder@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFidsFolder@ GetProgramDataFolder(const string&in path)","group":"Fids","desc":"Gets a fid container from the ProgramData drive.","flags":[]},{"ns":"Fids","name":"GetUserFolder","returntypeid":1140852511,"returntypename":"CSystemFidsFolder","returntypedecl":"CSystemFidsFolder@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFidsFolder@ GetUserFolder(const string&in path)","group":"Fids","desc":"Gets a fid container from the User drive.","flags":[]},{"ns":"Fids","name":"GetGameFolder","returntypeid":1140852511,"returntypename":"CSystemFidsFolder","returntypedecl":"CSystemFidsFolder@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFidsFolder@ GetGameFolder(const string&in path)","group":"Fids","desc":"Gets a fid container from the Game drive.","flags":[]},{"ns":"Fids","name":"GetFakeFolder","returntypeid":1140852511,"returntypename":"CSystemFidsFolder","returntypedecl":"CSystemFidsFolder@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFidsFolder@ GetFakeFolder(const string&in path)","group":"Fids","desc":"Gets a fid container from the Fake drive.","flags":[]},{"ns":"Fids","name":"Preload","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typeid":1140852512,"typename":"CSystemFidFile","typedecl":"CSystemFidFile@","typeflags":0,"name":"fid"}],"decl":"CMwNod@ Preload(CSystemFidFile@ fid)","group":"Fids","desc":"Preloads the nod for the fid.","flags":[]},{"ns":"Fids","name":"Extract","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":1140852512,"typename":"CSystemFidFile","typedecl":"CSystemFidFile@","typeflags":0,"name":"fid"},{"typedecl":"bool","typeflags":0,"name":"hookMethod","default":"false","desc":"Whether to use the hook method. This is not recommended (can be unstable), but might be beneficial in certain circumstances."}],"decl":"bool Extract(CSystemFidFile@ fid, bool hookMethod = false)","group":"Fids","desc":"Extracts the file to disk.","flags":[]},{"ns":"Fids","name":"GetFullPath","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":1140852512,"typename":"CSystemFidFile","typedecl":"CSystemFidFile@","typeflags":0,"name":"fid"}],"decl":"string GetFullPath(CSystemFidFile@ fid)","group":"Fids","desc":"Gets the full path of the fid.","flags":[]},{"ns":"Fids","name":"UpdateTree","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140852511,"typename":"CSystemFidsFolder","typedecl":"CSystemFidsFolder@","typeflags":0,"name":"fids"},{"typedecl":"bool","typeflags":0,"name":"withFiles","default":"true"}],"decl":"void UpdateTree(CSystemFidsFolder@ fids, bool withFiles = true)","group":"Fids","desc":"Updates the fid collection tree by rescanning the disk.","flags":[]},{"ns":"Fids","name":"GetFidsFile","returntypeid":1140852512,"returntypename":"CSystemFidFile","returntypedecl":"CSystemFidFile@","returntypeflags":0,"args":[{"typeid":1140852511,"typename":"CSystemFidsFolder","typedecl":"CSystemFidsFolder@","typeflags":0,"name":"fids"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFidFile@ GetFidsFile(CSystemFidsFolder@ fids, const string&in path)","group":"Fids","desc":"Get a fid from the given path in the given collection.","flags":[]},{"ns":"Fids","name":"GetFidsFolder","returntypeid":1140852511,"returntypename":"CSystemFidsFolder","returntypedecl":"CSystemFidsFolder@","returntypeflags":0,"args":[{"typeid":1140852511,"typename":"CSystemFidsFolder","typedecl":"CSystemFidsFolder@","typeflags":0,"name":"fids"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"CSystemFidsFolder@ GetFidsFolder(CSystemFidsFolder@ fids, const string&in path)","group":"Fids","desc":"Get a fid collection from the given path in this collection.","flags":[]}],"classes":[{"id":67108876,"name":"MwId","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~MwId()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"MwId()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108876,"typename":"MwId","typedecl":"MwId","typeflags":5,"name":""}],"decl":"MwId(const MwId&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"MwId(uint)"}}],"methods":[{"name":"opEquals","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108876,"typename":"MwId","typedecl":"MwId","typeflags":5,"name":""}],"decl":"bool opEquals(const MwId&in)"},{"name":"GetName","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string GetName() const"},{"name":"SetName","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"void SetName(const string&in)"}],"props":[{"typedecl":"uint","typeflags":0,"name":"Value"}]},{"ns":"Json","id":67108878,"name":"Value","group":"Json","desc":"A value in a Json tree. Can be an array, object, or any other value.","flags":[],"behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1140850702,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[],"decl":"Json::Value@ Value()"}},{"type":3,"func":{"name":"$beh3","returntypeid":1140850702,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"Json::Value@ Value(const ?&in)"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"GetType","returntypeid":58,"returntypename":"Type","returntypedecl":"Json::Type","returntypeflags":0,"args":[],"decl":"Json::Type GetType() const"},{"name":"opIndex","returntypeid":1140850702,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"Json::Value@ opIndex(const string&in)"},{"name":"opIndex","returntypeid":1677721614,"returntypename":"Value","returntypedecl":"const Json::Value@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"const Json::Value@ opIndex(const string&in) const"},{"name":"opIndex","returntypeid":1140850702,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"Json::Value@ opIndex(int)"},{"name":"opIndex","returntypeid":1677721614,"returntypename":"Value","returntypedecl":"const Json::Value@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"const Json::Value@ opIndex(int) const"},{"name":"opImplConv","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string opImplConv() const"},{"name":"opImplConv","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int opImplConv() const"},{"name":"opImplConv","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float opImplConv() const"},{"name":"opImplConv","returntypedecl":"double","returntypeflags":0,"args":[],"decl":"double opImplConv() const"},{"name":"opImplConv","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool opImplConv() const"},{"name":"get_Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint get_Length() const"},{"name":"opAssign","returntypeid":1140850702,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[{"typeid":67108878,"typename":"Value","typedecl":"Json::Value","typeflags":5,"name":""}],"decl":"Json::Value@ opAssign(const Json::Value&in)"},{"name":"Add","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850702,"typename":"Value","typedecl":"Json::Value@","typeflags":0,"name":""}],"decl":"void Add(Json::Value@)"},{"name":"Get","returntypeid":1140850702,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"key"}],"decl":"Json::Value@ Get(const string&in key)"},{"name":"Get","returntypeid":1677721614,"returntypename":"Value","returntypedecl":"const Json::Value@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"key"}],"decl":"const Json::Value@ Get(const string&in key) const"},{"name":"Get","returntypeid":1677721614,"returntypename":"Value","returntypedecl":"const Json::Value@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"key"},{"typeid":67108878,"typename":"Value","typedecl":"Json::Value","typeflags":5,"name":"def"}],"decl":"const Json::Value@ Get(const string&in key, const Json::Value&in def) const"},{"name":"HasKey","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"key"}],"decl":"bool HasKey(const string&in key) const"},{"name":"Remove","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"}],"decl":"void Remove(int index)"},{"name":"Remove","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"key"}],"decl":"void Remove(const string&in key)"},{"name":"GetKeys","returntypeid":1342180699,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[],"decl":"string[]@ GetKeys() const"}],"props":[]},{"id":268435471,"name":"MwSArray","group":"Core","desc":"Base array structure type used in ManiaPlanet. Can not be modified right now.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~MwSArray()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"MwSArray(int&in)"}}],"methods":[{"name":"opAssign","returntypeid":268435471,"returntypename":"MwSArray","returntypedecl":"MwSArray<T>","returntypeflags":3,"args":[{"typeid":268435471,"typename":"MwSArray","typedecl":"MwSArray<T>","typeflags":5,"name":""}],"decl":"MwSArray<T>& opAssign(const MwSArray<T>&in)"},{"name":"opIndex","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"T& opIndex(uint index)"},{"name":"opIndex","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":7,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"const T& opIndex(uint index) const"},{"name":"Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint Length() const"},{"name":"get_Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint get_Length() const"}],"props":[]},{"id":268435472,"name":"MwStridedArray","group":"Core","desc":"Strided array structure type used in ManiaPlanet. Can not be modified right now.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~MwStridedArray()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"MwStridedArray(int&in)"}}],"methods":[{"name":"opIndex","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"T& opIndex(uint index)"},{"name":"opIndex","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":7,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"const T& opIndex(uint index) const"},{"name":"Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint Length() const"},{"name":"get_Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint get_Length() const"}],"props":[]},{"id":268435473,"name":"MwFastArray","group":"Core","desc":"Array type used in ManiaPlanet.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~MwFastArray()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"MwFastArray(int&in)"}}],"methods":[{"name":"opAssign","returntypeid":268435473,"returntypename":"MwFastArray","returntypedecl":"MwFastArray<T>","returntypeflags":3,"args":[{"typeid":268435473,"typename":"MwFastArray","typedecl":"MwFastArray<T>","typeflags":5,"name":""}],"decl":"MwFastArray<T>& opAssign(const MwFastArray<T>&in)"},{"name":"opIndex","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"T& opIndex(uint index)"},{"name":"opIndex","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":7,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"const T& opIndex(uint index) const"},{"name":"Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint Length() const"},{"name":"get_Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint get_Length() const"}],"props":[]},{"id":268435474,"name":"MwFastBuffer","group":"Core","desc":"Buffer type used in ManiaPlanet.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~MwFastBuffer()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"MwFastBuffer(int&in)"}}],"methods":[{"name":"opAssign","returntypeid":268435474,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<T>","returntypeflags":3,"args":[{"typeid":268435474,"typename":"MwFastBuffer","typedecl":"MwFastBuffer<T>","typeflags":5,"name":""}],"decl":"MwFastBuffer<T>& opAssign(const MwFastBuffer<T>&in)"},{"name":"opIndex","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"T& opIndex(uint index)"},{"name":"opIndex","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":7,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"const T& opIndex(uint index) const"},{"name":"Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint Length() const"},{"name":"get_Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint get_Length() const"},{"name":"Add","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67112287,"typename":"T","typedecl":"T","typeflags":5,"name":"value"}],"decl":"void Add(const T&in value)"},{"name":"Remove","returntypeid":268435474,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<T>","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"MwFastBuffer<T>& Remove(uint index)"},{"name":"RemoveRange","returntypeid":268435474,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<T>","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":"index"},{"typedecl":"uint","typeflags":0,"name":"count"}],"decl":"MwFastBuffer<T>& RemoveRange(uint index, uint count)"}],"props":[]},{"id":268435475,"name":"MwFastBufferCat","group":"Core","desc":"Buffer cat type used in ManiaPlanet.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~MwFastBufferCat()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"MwFastBufferCat(int&in)"}}],"methods":[],"props":[]},{"id":268435476,"name":"MwRefBuffer","group":"Core","desc":"Reference buffer type used in ManiaPlanet, which contains a static 32 item buffer.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~MwRefBuffer()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"MwRefBuffer(int&in)"}}],"methods":[{"name":"opIndex","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"T& opIndex(uint index)"},{"name":"opIndex","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":7,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"const T& opIndex(uint index) const"},{"name":"Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint Length() const"},{"name":"get_Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint get_Length() const"}],"props":[]},{"id":268435477,"name":"MwNodPool","group":"Core","desc":"An allocated pool of nods.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~MwNodPool()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"MwNodPool(int&in)"}}],"methods":[{"name":"opIndex","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"T& opIndex(uint index)"},{"name":"opIndex","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":7,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"const T& opIndex(uint index) const"},{"name":"Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint Length() const"},{"name":"get_Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint get_Length() const"}],"props":[]},{"id":268435478,"name":"MwVirtualArray","group":"Core","desc":"A virtually accessed array.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~MwVirtualArray()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"MwVirtualArray(int&in)"}}],"methods":[{"name":"opIndex","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"T& opIndex(uint index)"},{"name":"opIndex","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":7,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"const T& opIndex(uint index) const"},{"name":"Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint Length() const"},{"name":"get_Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint get_Length() const"}],"props":[]},{"id":268435479,"name":"MwArrayInPlaceDyn","group":"Core","desc":"In-place allocated dynamic array.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~MwArrayInPlaceDyn()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"MwArrayInPlaceDyn(int&in)"}}],"methods":[{"name":"opIndex","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"T& opIndex(uint index)"},{"name":"opIndex","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":7,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"const T& opIndex(uint index) const"},{"name":"Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint Length() const"},{"name":"get_Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint get_Length() const"}],"props":[]},{"id":268435624,"name":"array","group":"Core","desc":"The main array type used in Openplanet. For usage information, see [Angelscript's documentation](https://www.angelcode.com/angelscript/sdk/docs/manual/doc_datatypes_arrays.html). Note that the members are not named the same in Openplanet as they are normally in Angelscript.","flags":[],"behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1342177448,"returntypename":"array","returntypedecl":"T[]@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"T[]@ array(int&in)"}},{"type":3,"func":{"name":"$beh3","returntypeid":1342177448,"returntypename":"array","returntypedecl":"T[]@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""},{"typedecl":"uint","typeflags":0,"name":"length"}],"decl":"T[]@ array(int&in, uint length)"}},{"type":3,"func":{"name":"$beh3","returntypeid":1342177448,"returntypename":"array","returntypedecl":"T[]@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""},{"typedecl":"uint","typeflags":0,"name":"length"},{"typeid":67112287,"typename":"T","typedecl":"T","typeflags":5,"name":"value"}],"decl":"T[]@ array(int&in, uint length, const T&in value)"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}},{"type":9,"func":{"name":"$beh9","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int $beh9()"}},{"type":10,"func":{"name":"$beh10","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh10()"}},{"type":11,"func":{"name":"$beh11","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool $beh11()"}},{"type":12,"func":{"name":"$beh12","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"void $beh12(int&in)"}},{"type":13,"func":{"name":"$beh13","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"void $beh13(int&in)"}},{"type":8,"func":{"name":"$beh8","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""},{"typedecl":"bool","typeflags":2,"name":""}],"decl":"bool $beh8(int&in, bool&out)"}},{"type":4,"func":{"name":"$list","returntypeid":1342177448,"returntypename":"array","returntypedecl":"T[]@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":"type"},{"typedecl":"int","typeflags":1,"name":"list"}],"decl":"T[]@ $list(int&in type, int&in list) { repeat T }"}}],"methods":[{"name":"opIndex","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"T& opIndex(uint index)"},{"name":"opIndex","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":7,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"const T& opIndex(uint index) const"},{"name":"opForBegin","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint opForBegin() const"},{"name":"opForEnd","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"bool opForEnd(uint) const"},{"name":"opForNext","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"uint opForNext(uint) const"},{"name":"opForValue0","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":7,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"const T& opForValue0(uint index) const"},{"name":"opForValue1","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"uint opForValue1(uint index) const"},{"name":"opAssign","returntypeid":268435624,"returntypename":"array","returntypedecl":"T[]","returntypeflags":3,"args":[{"typeid":268435624,"typename":"array","typedecl":"T[]","typeflags":5,"name":""}],"decl":"T[]& opAssign(const T[]&in)"},{"name":"InsertAt","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"index"},{"typeid":67112287,"typename":"T","typedecl":"T","typeflags":5,"name":"value"}],"decl":"void InsertAt(uint index, const T&in value)"},{"name":"InsertAt","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"index"},{"typeid":268435624,"typename":"array","typedecl":"T[]","typeflags":7,"name":"arr"}],"decl":"void InsertAt(uint index, const T[]&inout arr)"},{"name":"InsertLast","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67112287,"typename":"T","typedecl":"T","typeflags":5,"name":"value"}],"decl":"void InsertLast(const T&in value)"},{"name":"RemoveAt","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"index"}],"decl":"void RemoveAt(uint index)"},{"name":"RemoveLast","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void RemoveLast()"},{"name":"RemoveRange","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"start"},{"typedecl":"uint","typeflags":0,"name":"count"}],"decl":"void RemoveRange(uint start, uint count)"},{"name":"Reserve","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"length"}],"decl":"void Reserve(uint length)"},{"name":"Resize","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"length"}],"decl":"void Resize(uint length)"},{"name":"SortAsc","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void SortAsc()"},{"name":"SortAsc","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"startAt"},{"typedecl":"uint","typeflags":0,"name":"count"}],"decl":"void SortAsc(uint startAt, uint count)"},{"name":"SortDesc","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void SortDesc()"},{"name":"SortDesc","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"startAt"},{"typedecl":"uint","typeflags":0,"name":"count"}],"decl":"void SortDesc(uint startAt, uint count)"},{"name":"Reverse","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Reverse()"},{"name":"Find","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67112287,"typename":"T","typedecl":"T","typeflags":5,"name":"value"}],"decl":"int Find(const T&in value) const"},{"name":"Find","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"startAt"},{"typeid":67112287,"typename":"T","typedecl":"T","typeflags":5,"name":"value"}],"decl":"int Find(uint startAt, const T&in value) const"},{"name":"FindByRef","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67112287,"typename":"T","typedecl":"T","typeflags":5,"name":"value"}],"decl":"int FindByRef(const T&in value) const"},{"name":"FindByRef","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"startAt"},{"typeid":67112287,"typename":"T","typedecl":"T","typeflags":5,"name":"value"}],"decl":"int FindByRef(uint startAt, const T&in value) const"},{"name":"opEquals","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":268435624,"typename":"array","typedecl":"T[]","typeflags":5,"name":""}],"decl":"bool opEquals(const T[]&in) const"},{"name":"IsEmpty","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsEmpty() const"},{"name":"Sort","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108888,"typename":"less","typedecl":"T[]::less","typeflags":1,"name":""},{"typedecl":"uint","typeflags":0,"name":"startAt","default":"0"},{"typedecl":"uint","typeflags":0,"name":"count","default":"uint(-1)"}],"decl":"void Sort(T[]::less&in, uint startAt = 0, uint count = uint(-1))"},{"name":"get_Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint get_Length() const"},{"name":"set_Length","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"void set_Length(uint)"},{"name":"SortNonConst","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108889,"typename":"less_nonconst","typedecl":"T[]::less_nonconst","typeflags":1,"name":""},{"typedecl":"uint","typeflags":0,"name":"startAt","default":"0"},{"typedecl":"uint","typeflags":0,"name":"count","default":"uint(-1)"}],"decl":"void SortNonConst(T[]::less_nonconst&in, uint startAt = 0, uint count = uint(-1))"},{"name":"ToJson","returntypeid":1140850702,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[],"decl":"Json::Value@ ToJson() const"}],"props":[]},{"id":67108890,"name":"string","group":"Core","desc":"The string class used in Openplanet as well as the game.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~string()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"string()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"string(const string&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"wstring","typedecl":"wstring","typeflags":5,"name":""}],"decl":"string(const wstring&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67109217,"typename":"SConstString","typedecl":"SConstString","typeflags":5,"name":""}],"decl":"string(const SConstString&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67109218,"typename":"SConstStringInt","typedecl":"SConstStringInt","typeflags":5,"name":""}],"decl":"string(const SConstStringInt&in)"}}],"methods":[{"name":"opCmp","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"int opCmp(const string&in) const"},{"name":"opIndex","returntypedecl":"uint8","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"uint8& opIndex(uint)"},{"name":"opIndex","returntypedecl":"uint8","returntypeflags":7,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"const uint8& opIndex(uint) const"},{"name":"opAssign","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":3,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"string& opAssign(const string&in)"},{"name":"opAddAssign","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":3,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"string& opAddAssign(const string&in)"},{"name":"opAdd","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"string opAdd(const string&in) const"},{"name":"opAdd","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108891,"typename":"wstring","typedecl":"wstring","typeflags":5,"name":""}],"decl":"string opAdd(const wstring&in) const"},{"name":"opAdd_r","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108891,"typename":"wstring","typedecl":"wstring","typeflags":5,"name":""}],"decl":"string opAdd_r(const wstring&in) const"},{"name":"opAdd","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":0,"name":""}],"decl":"string opAdd(int64) const"},{"name":"opAdd_r","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":0,"name":""}],"decl":"string opAdd_r(int64) const"},{"name":"opAdd","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":""}],"decl":"string opAdd(uint64) const"},{"name":"opAdd_r","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":""}],"decl":"string opAdd_r(uint64) const"},{"name":"opAdd","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"string opAdd(float) const"},{"name":"opAdd_r","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"string opAdd_r(float) const"},{"name":"opAdd","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"bool","typeflags":0,"name":""}],"decl":"string opAdd(bool) const"},{"name":"opAdd_r","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"bool","typeflags":0,"name":""}],"decl":"string opAdd_r(bool) const"},{"name":"opImplConv","returntypeid":67108891,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[],"decl":"wstring opImplConv() const"},{"name":"StartsWith","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"bool StartsWith(const string&in) const","group":"Core","desc":"Returns true if the string starts with the given substring.","flags":[]},{"name":"EndsWith","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"bool EndsWith(const string&in) const","group":"Core","desc":"Returns true if the string ends with the given substring.","flags":[]},{"name":"Contains","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"bool Contains(const string&in) const","group":"Core","desc":"Returns true if the string contains the given substring.","flags":[]},{"name":"LastIndexOf","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"int LastIndexOf(const string&in) const","group":"Core","desc":"Searches the string for the given substring and returns the index at which the last instance of it starts. When it is not found, returns -1.","flags":[]},{"name":"IndexOf","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"int IndexOf(const string&in) const","group":"Core","desc":"Searches the string for the given substring and returns the index at which it starts. When it is not found, returns -1.","flags":[]},{"name":"IndexOfI","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"int IndexOfI(const string&in) const","group":"Core","desc":"Same as IndexOf, but case insensitive.","flags":[]},{"name":"get_Length","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int get_Length() const","group":"Core","desc":"The length of the string in bytes.","flags":[]},{"name":"Trim","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string Trim() const","group":"Core","desc":"Returns a string from this string with whitespace at the start and end of the string removed. Whitespace includes spaces, tabs, newlines, vertical tabs, feeds, and carriage returns.","flags":[]},{"name":"ToLower","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ToLower() const","group":"Core","desc":"Returns a string from this string with all characters in lowercase.","flags":[]},{"name":"ToUpper","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ToUpper() const","group":"Core","desc":"Returns a string from this string with all characters in uppercase.","flags":[]},{"name":"SubStr","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index","desc":"The index at which to start. When a negative number is used, the start index is subtracted from the length of the string. For example; for the string \"Hello\", SubStr(-3) returns \"llo\"."}],"decl":"string SubStr(int index) const","group":"Core","desc":"Returns the remainder of the string after the given index. For example; for the string \"Hello\", SubStr(1) returns \"ello\".","flags":[]},{"name":"SubStr","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index","desc":"The index at which to start. When a negative number is used, the start index is subtracted from the length of the string. For example; for the string \"Hello\", SubStr(-3, 2) returns \"ll\"."},{"typedecl":"int","typeflags":0,"name":"length","desc":"The length of the substring. When a negative number is used, the length of the source string becomes the base of the length. For example; for the string \"Hello\", SubStr(0, -1) returns \"Hell\"."}],"decl":"string SubStr(int index, int length) const","group":"Core","desc":"Returns a portion of the string from the index and length. For example; for the string \"Hello\", SubStr(1, 3) returns \"ell\".","flags":[]},{"name":"Replace","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"search"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"replace"}],"decl":"string Replace(const string&in search, const string&in replace) const","group":"Core","desc":"Returns the string with all the given search substrings replaced with the given replacement string.","flags":[]},{"name":"Split","returntypeid":1342180699,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"},{"typedecl":"int","typeflags":0,"name":"limit","default":"0"}],"decl":"string[]@ Split(const string&in str, int limit = 0) const","group":"Core","desc":"Splits the string on the given substring and returns an array with all the individual parts.","flags":[]}],"props":[]},{"id":67108891,"name":"wstring","group":"Core","desc":"The wide string class used primarily in the game for unicode strings. Since Trackmania (2020) the game switched to UTF-8 by default, making wstring essentially the same as string.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~wstring()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"wstring()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108891,"typename":"wstring","typedecl":"wstring","typeflags":5,"name":""}],"decl":"wstring(const wstring&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"wstring(const string&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67109218,"typename":"SConstStringInt","typedecl":"SConstStringInt","typeflags":5,"name":""}],"decl":"wstring(const SConstStringInt&in)"}}],"methods":[{"name":"opCmp","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108891,"typename":"wstring","typedecl":"wstring","typeflags":5,"name":""}],"decl":"int opCmp(const wstring&in) const"},{"name":"opCmp","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"int opCmp(const string&in) const"},{"name":"opAssign","returntypeid":67108891,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":3,"args":[{"typeid":67108891,"typename":"wstring","typedecl":"wstring","typeflags":5,"name":""}],"decl":"wstring& opAssign(const wstring&in)"},{"name":"opImplConv","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string opImplConv() const"},{"name":"StartsWith","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108891,"typename":"wstring","typedecl":"wstring","typeflags":5,"name":""}],"decl":"bool StartsWith(const wstring&in) const","group":"Core","desc":"Returns true if the string starts with the given substring.","flags":[]},{"name":"EndsWith","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108891,"typename":"wstring","typedecl":"wstring","typeflags":5,"name":""}],"decl":"bool EndsWith(const wstring&in) const","group":"Core","desc":"Returns true if the string ends with the given substring.","flags":[]},{"name":"Contains","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108891,"typename":"wstring","typedecl":"wstring","typeflags":5,"name":""}],"decl":"bool Contains(const wstring&in) const","group":"Core","desc":"Returns true if the string contains the given substring.","flags":[]},{"name":"SubStr","returntypeid":67108891,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"}],"decl":"wstring SubStr(int index) const","group":"Core","desc":"Returns the remainder of the string after the given index. For example; for the string \"Hello\", SubStr(1) returns \"ello\".","flags":[]},{"name":"SubStr","returntypeid":67108891,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"},{"typedecl":"int","typeflags":0,"name":"length"}],"decl":"wstring SubStr(int index, int length) const","group":"Core","desc":"Returns a portion of the string from the index and length. For example; for the string \"Hello\", SubStr(1, 3) returns \"ell\".","flags":[]},{"name":"get_Length","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int get_Length() const","group":"Core","desc":"The length of the string in bytes. On games older than Trackmania (2020), this returns the length of the string in characters.","flags":[]}],"props":[]},{"id":67108892,"name":"dictionaryValue","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~dictionaryValue()"}},{"type":12,"func":{"name":"$beh12","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"void $beh12(int&in)"}},{"type":13,"func":{"name":"$beh13","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"void $beh13(int&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"dictionaryValue()"}}],"methods":[{"name":"opAssign","returntypeid":67108892,"returntypename":"dictionaryValue","returntypedecl":"dictionaryValue","returntypeflags":3,"args":[{"typeid":67108892,"typename":"dictionaryValue","typedecl":"dictionaryValue","typeflags":5,"name":""}],"decl":"dictionaryValue& opAssign(const dictionaryValue&in)"},{"name":"opHndlAssign","returntypeid":67108892,"returntypename":"dictionaryValue","returntypedecl":"dictionaryValue","returntypeflags":3,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"dictionaryValue& opHndlAssign(const ?&in)"},{"name":"opHndlAssign","returntypeid":67108892,"returntypename":"dictionaryValue","returntypedecl":"dictionaryValue","returntypeflags":3,"args":[{"typeid":67108892,"typename":"dictionaryValue","typedecl":"dictionaryValue","typeflags":5,"name":""}],"decl":"dictionaryValue& opHndlAssign(const dictionaryValue&in)"},{"name":"opAssign","returntypeid":67108892,"returntypename":"dictionaryValue","returntypedecl":"dictionaryValue","returntypeflags":3,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"dictionaryValue& opAssign(const ?&in)"},{"name":"opAssign","returntypeid":67108892,"returntypename":"dictionaryValue","returntypedecl":"dictionaryValue","returntypeflags":3,"args":[{"typedecl":"double","typeflags":0,"name":""}],"decl":"dictionaryValue& opAssign(double)"},{"name":"opAssign","returntypeid":67108892,"returntypename":"dictionaryValue","returntypedecl":"dictionaryValue","returntypeflags":3,"args":[{"typedecl":"int64","typeflags":0,"name":""}],"decl":"dictionaryValue& opAssign(int64)"},{"name":"opCast","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":2,"name":""}],"decl":"void opCast(?&out)"},{"name":"opConv","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":2,"name":""}],"decl":"void opConv(?&out)"},{"name":"opConv","returntypedecl":"int64","returntypeflags":0,"args":[],"decl":"int64 opConv()"},{"name":"opConv","returntypedecl":"double","returntypeflags":0,"args":[],"decl":"double opConv()"}],"props":[]},{"id":67108893,"name":"dictionary","group":"Core","desc":"The main dictionary type used in Openplanet.","flags":[],"behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1140850717,"returntypename":"dictionary","returntypedecl":"dictionary@","returntypeflags":0,"args":[],"decl":"dictionary@ dictionary()"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}},{"type":9,"func":{"name":"$beh9","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int $beh9()"}},{"type":10,"func":{"name":"$beh10","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh10()"}},{"type":11,"func":{"name":"$beh11","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool $beh11()"}},{"type":12,"func":{"name":"$beh12","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"void $beh12(int&in)"}},{"type":13,"func":{"name":"$beh13","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"void $beh13(int&in)"}},{"type":4,"func":{"name":"$list","returntypeid":1140850717,"returntypename":"dictionary","returntypedecl":"dictionary@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"dictionary@ $list(int&in) { repeat { string, ? } }"}}],"methods":[{"name":"opAssign","returntypeid":67108893,"returntypename":"dictionary","returntypedecl":"dictionary","returntypeflags":3,"args":[{"typeid":67108893,"typename":"dictionary","typedecl":"dictionary","typeflags":5,"name":""}],"decl":"dictionary& opAssign(const dictionary&in)"},{"name":"Set","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Set(const string&in, const ?&in)"},{"name":"Get","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""},{"typedecl":"?","typeflags":2,"name":""}],"decl":"bool Get(const string&in, ?&out) const"},{"name":"Set","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""},{"typedecl":"int64","typeflags":5,"name":""}],"decl":"void Set(const string&in, const int64&in)"},{"name":"Get","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""},{"typedecl":"int64","typeflags":2,"name":""}],"decl":"bool Get(const string&in, int64&out) const"},{"name":"Set","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""},{"typedecl":"double","typeflags":5,"name":""}],"decl":"void Set(const string&in, const double&in)"},{"name":"Get","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""},{"typedecl":"double","typeflags":2,"name":""}],"decl":"bool Get(const string&in, double&out) const"},{"name":"Exists","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"bool Exists(const string&in) const"},{"name":"IsEmpty","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsEmpty() const"},{"name":"GetSize","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint GetSize() const"},{"name":"Delete","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"bool Delete(const string&in)"},{"name":"DeleteAll","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void DeleteAll()"},{"name":"GetKeys","returntypeid":1342180699,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[],"decl":"string[]@ GetKeys() const"},{"name":"opIndex","returntypeid":67108892,"returntypename":"dictionaryValue","returntypedecl":"dictionaryValue","returntypeflags":3,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"dictionaryValue& opIndex(const string&in)"},{"name":"opIndex","returntypeid":67108892,"returntypename":"dictionaryValue","returntypedecl":"dictionaryValue","returntypeflags":7,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"const dictionaryValue& opIndex(const string&in) const"},{"name":"opForBegin","returntypeid":1140850718,"returntypename":"dictionaryIter","returntypedecl":"dictionaryIter@","returntypeflags":0,"args":[],"decl":"dictionaryIter@ opForBegin() const"},{"name":"opForEnd","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":1140850718,"typename":"dictionaryIter","typedecl":"dictionaryIter@","typeflags":0,"name":""}],"decl":"bool opForEnd(dictionaryIter@) const"},{"name":"opForNext","returntypeid":1140850718,"returntypename":"dictionaryIter","returntypedecl":"dictionaryIter@","returntypeflags":0,"args":[{"typeid":1140850718,"typename":"dictionaryIter","typedecl":"dictionaryIter@","typeflags":0,"name":""}],"decl":"dictionaryIter@ opForNext(dictionaryIter@) const"},{"name":"opForValue0","returntypeid":67108892,"returntypename":"dictionaryValue","returntypedecl":"dictionaryValue","returntypeflags":7,"args":[{"typeid":1140850718,"typename":"dictionaryIter","typedecl":"dictionaryIter@","typeflags":0,"name":""}],"decl":"const dictionaryValue& opForValue0(dictionaryIter@) const"},{"name":"opForValue1","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":7,"args":[{"typeid":1140850718,"typename":"dictionaryIter","typedecl":"dictionaryIter@","typeflags":0,"name":""}],"decl":"const string& opForValue1(dictionaryIter@) const"},{"name":"ToJson","returntypeid":1140850702,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[],"decl":"Json::Value@ ToJson() const"}],"props":[]},{"id":67108894,"name":"dictionaryIter","behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[],"props":[]},{"id":67108895,"name":"ref","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~ref()"}},{"type":12,"func":{"name":"$beh12","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"void $beh12(int&in)"}},{"type":13,"func":{"name":"$beh13","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""}],"decl":"void $beh13(int&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"ref()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108895,"typename":"ref","typedecl":"ref","typeflags":5,"name":""}],"decl":"ref(const ref&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"ref(const ?&in)"}}],"methods":[{"name":"opCast","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":2,"name":""}],"decl":"void opCast(?&out)"},{"name":"opHndlAssign","returntypeid":67108895,"returntypename":"ref","returntypedecl":"ref","returntypeflags":3,"args":[{"typeid":67108895,"typename":"ref","typedecl":"ref","typeflags":5,"name":""}],"decl":"ref& opHndlAssign(const ref&in)"},{"name":"opHndlAssign","returntypeid":67108895,"returntypename":"ref","returntypedecl":"ref","returntypeflags":3,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"ref& opHndlAssign(const ?&in)"},{"name":"opEquals","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108895,"typename":"ref","typedecl":"ref","typeflags":5,"name":""}],"decl":"bool opEquals(const ref&in) const"},{"name":"opEquals","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"bool opEquals(const ?&in) const"}],"props":[]},{"id":67108903,"name":"awaitable","group":"Core","desc":"An awaitable object that can be used in `await()`.","flags":[],"behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"IsRunning","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsRunning()"},{"name":"WithRunContext","returntypeid":1140850727,"returntypename":"awaitable","returntypedecl":"awaitable@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"awaitable@ WithRunContext(int)","group":"","desc":"Use `Meta::StartWithRunContext` instead.","flags":["deprecated"]}],"props":[]},{"id":67108904,"name":"vec2","group":"Math","desc":"A 2-dimensional vector.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~vec2()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"vec2()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"scalar"}],"decl":"vec2(float scalar)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"}],"decl":"vec2(float x, float y)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec2(const vec2&in)"}}],"methods":[{"name":"opIndex","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"float opIndex(int) const"},{"name":"opAdd","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec2 opAdd(const vec2&in) const"},{"name":"opSub","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec2 opSub(const vec2&in) const"},{"name":"opMul","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec2 opMul(const vec2&in) const"},{"name":"opDiv","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec2 opDiv(const vec2&in) const"},{"name":"opAdd","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec2 opAdd(float) const"},{"name":"opSub","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec2 opSub(float) const"},{"name":"opMul","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec2 opMul(float) const"},{"name":"opDiv","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec2 opDiv(float) const"},{"name":"opAdd_r","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec2 opAdd_r(float) const"},{"name":"opSub_r","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec2 opSub_r(float) const"},{"name":"opMul_r","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec2 opMul_r(float) const"},{"name":"opDiv_r","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec2 opDiv_r(float) const"},{"name":"opAddAssign","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":3,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec2& opAddAssign(const vec2&in)"},{"name":"opSubAssign","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":3,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec2& opSubAssign(const vec2&in)"},{"name":"opMulAssign","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":3,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec2& opMulAssign(const vec2&in)"},{"name":"opDivAssign","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":3,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec2& opDivAssign(const vec2&in)"},{"name":"opAddAssign","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":3,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec2& opAddAssign(float)"},{"name":"opSubAssign","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":3,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec2& opSubAssign(float)"},{"name":"opMulAssign","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":3,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec2& opMulAssign(float)"},{"name":"opDivAssign","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":3,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec2& opDivAssign(float)"},{"name":"opEquals","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"bool opEquals(const vec2&in)"},{"name":"Length","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float Length() const"},{"name":"LengthSquared","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float LengthSquared() const"},{"name":"Normalized","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 Normalized() const"},{"name":"ToString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ToString() const"}],"props":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"}]},{"id":67108905,"name":"vec3","group":"Math","desc":"A 3-dimensional vector.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~vec3()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"vec3()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"scalar"}],"decl":"vec3(float scalar)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"z"}],"decl":"vec3(float x, float y, float z)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"xy"},{"typedecl":"float","typeflags":0,"name":"z"}],"decl":"vec3(const vec2&in xy, float z)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3(const vec3&in)"}}],"methods":[{"name":"opIndex","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"float opIndex(int) const"},{"name":"opAdd","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3 opAdd(const vec3&in) const"},{"name":"opSub","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3 opSub(const vec3&in) const"},{"name":"opMul","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3 opMul(const vec3&in) const"},{"name":"opDiv","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3 opDiv(const vec3&in) const"},{"name":"opAdd","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec3 opAdd(float) const"},{"name":"opSub","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec3 opSub(float) const"},{"name":"opMul","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec3 opMul(float) const"},{"name":"opDiv","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec3 opDiv(float) const"},{"name":"opAdd_r","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec3 opAdd_r(float) const"},{"name":"opSub_r","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec3 opSub_r(float) const"},{"name":"opMul_r","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec3 opMul_r(float) const"},{"name":"opDiv_r","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec3 opDiv_r(float) const"},{"name":"opAddAssign","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":3,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3& opAddAssign(const vec3&in)"},{"name":"opSubAssign","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":3,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3& opSubAssign(const vec3&in)"},{"name":"opMulAssign","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":3,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3& opMulAssign(const vec3&in)"},{"name":"opDivAssign","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":3,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3& opDivAssign(const vec3&in)"},{"name":"opAddAssign","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":3,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec3& opAddAssign(float)"},{"name":"opSubAssign","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":3,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec3& opSubAssign(float)"},{"name":"opMulAssign","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":3,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec3& opMulAssign(float)"},{"name":"opDivAssign","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":3,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec3& opDivAssign(float)"},{"name":"opEquals","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"bool opEquals(const vec3&in)"},{"name":"Length","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float Length() const"},{"name":"LengthSquared","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float LengthSquared() const"},{"name":"Normalized","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[],"decl":"vec3 Normalized() const"},{"name":"get_xy","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 get_xy() const"},{"name":"get_yz","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 get_yz() const"},{"name":"ToString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ToString() const"}],"props":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"z"}]},{"id":67108906,"name":"vec4","group":"Math","desc":"A 4-dimensional vector.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~vec4()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"vec4()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"scalar"}],"decl":"vec4(float scalar)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"z"},{"typedecl":"float","typeflags":0,"name":"w"}],"decl":"vec4(float x, float y, float z, float w)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"xyz"},{"typedecl":"float","typeflags":0,"name":"w"}],"decl":"vec4(const vec3&in xyz, float w)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"xy"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"zw"}],"decl":"vec4(const vec2&in xy, const vec2&in zw)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4(const vec4&in)"}}],"methods":[{"name":"opIndex","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"float opIndex(int) const"},{"name":"opAdd","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4 opAdd(const vec4&in) const"},{"name":"opSub","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4 opSub(const vec4&in) const"},{"name":"opMul","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4 opMul(const vec4&in) const"},{"name":"opDiv","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4 opDiv(const vec4&in) const"},{"name":"opAdd","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec4 opAdd(float) const"},{"name":"opSub","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec4 opSub(float) const"},{"name":"opMul","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec4 opMul(float) const"},{"name":"opDiv","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec4 opDiv(float) const"},{"name":"opAdd_r","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec4 opAdd_r(float) const"},{"name":"opSub_r","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec4 opSub_r(float) const"},{"name":"opMul_r","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec4 opMul_r(float) const"},{"name":"opDiv_r","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec4 opDiv_r(float) const"},{"name":"opAddAssign","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":3,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4& opAddAssign(const vec4&in)"},{"name":"opSubAssign","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":3,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4& opSubAssign(const vec4&in)"},{"name":"opMulAssign","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":3,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4& opMulAssign(const vec4&in)"},{"name":"opDivAssign","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":3,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4& opDivAssign(const vec4&in)"},{"name":"opAddAssign","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":3,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec4& opAddAssign(float)"},{"name":"opSubAssign","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":3,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec4& opSubAssign(float)"},{"name":"opMulAssign","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":3,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec4& opMulAssign(float)"},{"name":"opDivAssign","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":3,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"vec4& opDivAssign(float)"},{"name":"opEquals","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"bool opEquals(const vec4&in)"},{"name":"Length","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float Length() const"},{"name":"LengthSquared","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float LengthSquared() const"},{"name":"Normalized","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[],"decl":"vec4 Normalized() const"},{"name":"get_xy","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 get_xy() const"},{"name":"get_xyz","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[],"decl":"vec3 get_xyz() const"},{"name":"get_yz","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 get_yz() const"},{"name":"get_yzw","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[],"decl":"vec3 get_yzw() const"},{"name":"get_zw","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 get_zw() const"},{"name":"ToString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ToString() const"}],"props":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"z"},{"typedecl":"float","typeflags":0,"name":"w"}]},{"id":67108907,"name":"int2","group":"Math","desc":"A 2-dimensional vector for integers.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~int2()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"int2()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"scalar"}],"decl":"int2(int scalar)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"x"},{"typedecl":"int","typeflags":0,"name":"y"}],"decl":"int2(int x, int y)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108907,"typename":"int2","typedecl":"int2","typeflags":5,"name":""}],"decl":"int2(const int2&in)"}}],"methods":[{"name":"opIndex","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int opIndex(int) const"},{"name":"opAdd","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typeid":67108907,"typename":"int2","typedecl":"int2","typeflags":5,"name":""}],"decl":"int2 opAdd(const int2&in) const"},{"name":"opSub","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typeid":67108907,"typename":"int2","typedecl":"int2","typeflags":5,"name":""}],"decl":"int2 opSub(const int2&in) const"},{"name":"opMul","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typeid":67108907,"typename":"int2","typedecl":"int2","typeflags":5,"name":""}],"decl":"int2 opMul(const int2&in) const"},{"name":"opDiv","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typeid":67108907,"typename":"int2","typedecl":"int2","typeflags":5,"name":""}],"decl":"int2 opDiv(const int2&in) const"},{"name":"opAdd","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int2 opAdd(int) const"},{"name":"opSub","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int2 opSub(int) const"},{"name":"opMul","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int2 opMul(int) const"},{"name":"opDiv","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int2 opDiv(int) const"},{"name":"opAdd_r","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int2 opAdd_r(int) const"},{"name":"opSub_r","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int2 opSub_r(int) const"},{"name":"opMul_r","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int2 opMul_r(int) const"},{"name":"opDiv_r","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int2 opDiv_r(int) const"},{"name":"opAddAssign","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":3,"args":[{"typeid":67108907,"typename":"int2","typedecl":"int2","typeflags":5,"name":""}],"decl":"int2& opAddAssign(const int2&in)"},{"name":"opSubAssign","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":3,"args":[{"typeid":67108907,"typename":"int2","typedecl":"int2","typeflags":5,"name":""}],"decl":"int2& opSubAssign(const int2&in)"},{"name":"opMulAssign","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":3,"args":[{"typeid":67108907,"typename":"int2","typedecl":"int2","typeflags":5,"name":""}],"decl":"int2& opMulAssign(const int2&in)"},{"name":"opDivAssign","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":3,"args":[{"typeid":67108907,"typename":"int2","typedecl":"int2","typeflags":5,"name":""}],"decl":"int2& opDivAssign(const int2&in)"},{"name":"opAddAssign","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int2& opAddAssign(int)"},{"name":"opSubAssign","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int2& opSubAssign(int)"},{"name":"opMulAssign","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int2& opMulAssign(int)"},{"name":"opDivAssign","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int2& opDivAssign(int)"},{"name":"opEquals","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108907,"typename":"int2","typedecl":"int2","typeflags":5,"name":""}],"decl":"bool opEquals(const int2&in)"},{"name":"ToString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ToString() const"}],"props":[{"typedecl":"int","typeflags":0,"name":"x"},{"typedecl":"int","typeflags":0,"name":"y"}]},{"id":67108908,"name":"int3","group":"Math","desc":"A 3-dimensional vector for integers.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~int3()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"int3()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"scalar"}],"decl":"int3(int scalar)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"x"},{"typedecl":"int","typeflags":0,"name":"y"},{"typedecl":"int","typeflags":0,"name":"z"}],"decl":"int3(int x, int y, int z)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108907,"typename":"int2","typedecl":"int2","typeflags":5,"name":"xy"},{"typedecl":"int","typeflags":0,"name":"z"}],"decl":"int3(const int2&in xy, int z)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108908,"typename":"int3","typedecl":"int3","typeflags":5,"name":""}],"decl":"int3(const int3&in)"}}],"methods":[{"name":"opIndex","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int opIndex(int) const"},{"name":"opAdd","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typeid":67108908,"typename":"int3","typedecl":"int3","typeflags":5,"name":""}],"decl":"int3 opAdd(const int3&in) const"},{"name":"opSub","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typeid":67108908,"typename":"int3","typedecl":"int3","typeflags":5,"name":""}],"decl":"int3 opSub(const int3&in) const"},{"name":"opMul","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typeid":67108908,"typename":"int3","typedecl":"int3","typeflags":5,"name":""}],"decl":"int3 opMul(const int3&in) const"},{"name":"opDiv","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typeid":67108908,"typename":"int3","typedecl":"int3","typeflags":5,"name":""}],"decl":"int3 opDiv(const int3&in) const"},{"name":"opAdd","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int3 opAdd(int) const"},{"name":"opSub","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int3 opSub(int) const"},{"name":"opMul","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int3 opMul(int) const"},{"name":"opDiv","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int3 opDiv(int) const"},{"name":"opAdd_r","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int3 opAdd_r(int) const"},{"name":"opSub_r","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int3 opSub_r(int) const"},{"name":"opMul_r","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int3 opMul_r(int) const"},{"name":"opDiv_r","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int3 opDiv_r(int) const"},{"name":"opAddAssign","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":3,"args":[{"typeid":67108908,"typename":"int3","typedecl":"int3","typeflags":5,"name":""}],"decl":"int3& opAddAssign(const int3&in)"},{"name":"opSubAssign","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":3,"args":[{"typeid":67108908,"typename":"int3","typedecl":"int3","typeflags":5,"name":""}],"decl":"int3& opSubAssign(const int3&in)"},{"name":"opMulAssign","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":3,"args":[{"typeid":67108908,"typename":"int3","typedecl":"int3","typeflags":5,"name":""}],"decl":"int3& opMulAssign(const int3&in)"},{"name":"opDivAssign","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":3,"args":[{"typeid":67108908,"typename":"int3","typedecl":"int3","typeflags":5,"name":""}],"decl":"int3& opDivAssign(const int3&in)"},{"name":"opAddAssign","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int3& opAddAssign(int)"},{"name":"opSubAssign","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int3& opSubAssign(int)"},{"name":"opMulAssign","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int3& opMulAssign(int)"},{"name":"opDivAssign","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"int3& opDivAssign(int)"},{"name":"opEquals","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108908,"typename":"int3","typedecl":"int3","typeflags":5,"name":""}],"decl":"bool opEquals(const int3&in)"},{"name":"get_xy","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":0,"args":[],"decl":"int2 get_xy() const"},{"name":"ToString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ToString() const"}],"props":[{"typedecl":"int","typeflags":0,"name":"x"},{"typedecl":"int","typeflags":0,"name":"y"},{"typedecl":"int","typeflags":0,"name":"z"}]},{"id":67108909,"name":"nat2","group":"Math","desc":"A 2-dimensional vector for unsigned integers.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~nat2()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"nat2()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"scalar"}],"decl":"nat2(uint scalar)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"x"},{"typedecl":"uint","typeflags":0,"name":"y"}],"decl":"nat2(uint x, uint y)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108909,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":""}],"decl":"nat2(const nat2&in)"}}],"methods":[{"name":"opIndex","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"uint opIndex(int) const"},{"name":"opAdd","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typeid":67108909,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":""}],"decl":"nat2 opAdd(const nat2&in) const"},{"name":"opSub","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typeid":67108909,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":""}],"decl":"nat2 opSub(const nat2&in) const"},{"name":"opMul","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typeid":67108909,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":""}],"decl":"nat2 opMul(const nat2&in) const"},{"name":"opDiv","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typeid":67108909,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":""}],"decl":"nat2 opDiv(const nat2&in) const"},{"name":"opAdd","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat2 opAdd(uint) const"},{"name":"opSub","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat2 opSub(uint) const"},{"name":"opMul","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat2 opMul(uint) const"},{"name":"opDiv","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat2 opDiv(uint) const"},{"name":"opAdd_r","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat2 opAdd_r(uint) const"},{"name":"opSub_r","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat2 opSub_r(uint) const"},{"name":"opMul_r","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat2 opMul_r(uint) const"},{"name":"opDiv_r","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat2 opDiv_r(uint) const"},{"name":"opAddAssign","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":3,"args":[{"typeid":67108909,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":""}],"decl":"nat2& opAddAssign(const nat2&in)"},{"name":"opSubAssign","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":3,"args":[{"typeid":67108909,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":""}],"decl":"nat2& opSubAssign(const nat2&in)"},{"name":"opMulAssign","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":3,"args":[{"typeid":67108909,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":""}],"decl":"nat2& opMulAssign(const nat2&in)"},{"name":"opDivAssign","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":3,"args":[{"typeid":67108909,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":""}],"decl":"nat2& opDivAssign(const nat2&in)"},{"name":"opAddAssign","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat2& opAddAssign(uint)"},{"name":"opSubAssign","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat2& opSubAssign(uint)"},{"name":"opMulAssign","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat2& opMulAssign(uint)"},{"name":"opDivAssign","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat2& opDivAssign(uint)"},{"name":"opEquals","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108909,"typename":"nat2","typedecl":"nat2","typeflags":5,"name":""}],"decl":"bool opEquals(const nat2&in)"},{"name":"ToString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ToString() const"}],"props":[{"typedecl":"uint","typeflags":0,"name":"x"},{"typedecl":"uint","typeflags":0,"name":"y"}]},{"id":67108910,"name":"nat3","group":"Math","desc":"A 3-dimensional vector for unsigned integers.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~nat3()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"nat3()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"scalar"}],"decl":"nat3(uint scalar)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"x"},{"typedecl":"uint","typeflags":0,"name":"y"},{"typedecl":"uint","typeflags":0,"name":"z"}],"decl":"nat3(uint x, uint y, uint z)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108910,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":"xy"},{"typedecl":"uint","typeflags":0,"name":"z"}],"decl":"nat3(const nat3&in xy, uint z)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108910,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":""}],"decl":"nat3(const nat3&in)"}}],"methods":[{"name":"opIndex","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"uint opIndex(int) const"},{"name":"opAdd","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typeid":67108910,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":""}],"decl":"nat3 opAdd(const nat3&in) const"},{"name":"opSub","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typeid":67108910,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":""}],"decl":"nat3 opSub(const nat3&in) const"},{"name":"opMul","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typeid":67108910,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":""}],"decl":"nat3 opMul(const nat3&in) const"},{"name":"opDiv","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typeid":67108910,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":""}],"decl":"nat3 opDiv(const nat3&in) const"},{"name":"opAdd","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat3 opAdd(uint) const"},{"name":"opSub","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat3 opSub(uint) const"},{"name":"opMul","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat3 opMul(uint) const"},{"name":"opDiv","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat3 opDiv(uint) const"},{"name":"opAdd_r","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat3 opAdd_r(uint) const"},{"name":"opSub_r","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat3 opSub_r(uint) const"},{"name":"opMul_r","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat3 opMul_r(uint) const"},{"name":"opDiv_r","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat3 opDiv_r(uint) const"},{"name":"opAddAssign","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":3,"args":[{"typeid":67108910,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":""}],"decl":"nat3& opAddAssign(const nat3&in)"},{"name":"opSubAssign","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":3,"args":[{"typeid":67108910,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":""}],"decl":"nat3& opSubAssign(const nat3&in)"},{"name":"opMulAssign","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":3,"args":[{"typeid":67108910,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":""}],"decl":"nat3& opMulAssign(const nat3&in)"},{"name":"opDivAssign","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":3,"args":[{"typeid":67108910,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":""}],"decl":"nat3& opDivAssign(const nat3&in)"},{"name":"opAddAssign","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat3& opAddAssign(uint)"},{"name":"opSubAssign","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat3& opSubAssign(uint)"},{"name":"opMulAssign","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat3& opMulAssign(uint)"},{"name":"opDivAssign","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":3,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"nat3& opDivAssign(uint)"},{"name":"opEquals","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108910,"typename":"nat3","typedecl":"nat3","typeflags":5,"name":""}],"decl":"bool opEquals(const nat3&in)"},{"name":"get_xy","returntypeid":67108909,"returntypename":"nat2","returntypedecl":"nat2","returntypeflags":0,"args":[],"decl":"nat2 get_xy() const"},{"name":"ToString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ToString() const"}],"props":[{"typedecl":"uint","typeflags":0,"name":"x"},{"typedecl":"uint","typeflags":0,"name":"y"},{"typedecl":"uint","typeflags":0,"name":"z"}]},{"id":67108911,"name":"iso3","group":"Math","desc":"A matrix with 3 rows and 2 columns.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~iso3()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"iso3()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108912,"typename":"mat3","typedecl":"mat3","typeflags":5,"name":""}],"decl":"iso3(const mat3&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108911,"typename":"iso3","typedecl":"iso3","typeflags":5,"name":""}],"decl":"iso3(const iso3&in)"}}],"methods":[{"name":"opEquals","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108911,"typename":"iso3","typedecl":"iso3","typeflags":5,"name":""}],"decl":"bool opEquals(const iso3&in)"},{"name":"get_xx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xx() const"},{"name":"get_xy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xy() const"},{"name":"get_yx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yx() const"},{"name":"get_yy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yy() const"},{"name":"get_tx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_tx() const"},{"name":"get_ty","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_ty() const"},{"name":"Translate","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"}],"decl":"void Translate(float x, float y)"}],"props":[]},{"id":67108912,"name":"mat3","group":"Math","desc":"A matrix with 3 rows and 3 columns.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~mat3()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"mat3()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108911,"typename":"iso3","typedecl":"iso3","typeflags":5,"name":""}],"decl":"mat3(const iso3&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"v0"},{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"v1"},{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"v2"}],"decl":"mat3(const vec3&in v0, const vec3&in v1, const vec3&in v2)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108914,"typename":"mat4","typedecl":"mat4","typeflags":5,"name":""}],"decl":"mat3(const mat4&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108912,"typename":"mat3","typedecl":"mat3","typeflags":5,"name":""}],"decl":"mat3(const mat3&in)"}}],"methods":[{"name":"opEquals","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108912,"typename":"mat3","typedecl":"mat3","typeflags":5,"name":""}],"decl":"bool opEquals(const mat3&in)"},{"name":"get_xx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xx() const"},{"name":"get_xy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xy() const"},{"name":"get_xz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xz() const"},{"name":"get_yx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yx() const"},{"name":"get_yy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yy() const"},{"name":"get_yz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yz() const"},{"name":"get_zx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_zx() const"},{"name":"get_zy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_zy() const"},{"name":"get_zz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_zz() const"},{"name":"opMul","returntypeid":67108912,"returntypename":"mat3","returntypedecl":"mat3","returntypeflags":0,"args":[{"typeid":67108912,"typename":"mat3","typedecl":"mat3","typeflags":5,"name":""}],"decl":"mat3 opMul(const mat3&in) const"},{"name":"opMulAssign","returntypeid":67108912,"returntypename":"mat3","returntypedecl":"mat3","returntypeflags":3,"args":[{"typeid":67108912,"typename":"mat3","typedecl":"mat3","typeflags":5,"name":""}],"decl":"mat3& opMulAssign(const mat3&in)"},{"name":"opMul","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec3 opMul(const vec2&in) const"},{"name":"opMul","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3 opMul(const vec3&in) const"},{"name":"opMul_r","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"vec3 opMul_r(const vec2&in)"},{"name":"opMul_r","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3 opMul_r(const vec3&in)"}],"props":[]},{"id":67108913,"name":"iso4","group":"Math","desc":"A matrix with 4 rows and 3 columns.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~iso4()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"iso4()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108914,"typename":"mat4","typedecl":"mat4","typeflags":5,"name":""}],"decl":"iso4(const mat4&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108913,"typename":"iso4","typedecl":"iso4","typeflags":5,"name":""}],"decl":"iso4(const iso4&in)"}}],"methods":[{"name":"opEquals","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108913,"typename":"iso4","typedecl":"iso4","typeflags":5,"name":""}],"decl":"bool opEquals(const iso4&in)"},{"name":"get_xx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xx() const"},{"name":"get_xy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xy() const"},{"name":"get_xz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xz() const"},{"name":"get_yx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yx() const"},{"name":"get_yy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yy() const"},{"name":"get_yz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yz() const"},{"name":"get_zx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_zx() const"},{"name":"get_zy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_zy() const"},{"name":"get_zz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_zz() const"},{"name":"get_tx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_tx() const"},{"name":"get_ty","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_ty() const"},{"name":"get_tz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_tz() const"},{"name":"Translate","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"z"}],"decl":"void Translate(float x, float y, float z)"}],"props":[]},{"id":67108914,"name":"mat4","group":"Math","desc":"A matrix with 4 rows and 4 columns.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~mat4()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"mat4()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108913,"typename":"iso4","typedecl":"iso4","typeflags":5,"name":""}],"decl":"mat4(const iso4&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"v0"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"v1"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"v2"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"v3"}],"decl":"mat4(const vec4&in v0, const vec4&in v1, const vec4&in v2, const vec4&in v3)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108912,"typename":"mat3","typedecl":"mat3","typeflags":5,"name":""}],"decl":"mat4(const mat3&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108914,"typename":"mat4","typedecl":"mat4","typeflags":5,"name":""}],"decl":"mat4(const mat4&in)"}}],"methods":[{"name":"opEquals","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108914,"typename":"mat4","typedecl":"mat4","typeflags":5,"name":""}],"decl":"bool opEquals(const mat4&in)"},{"name":"get_xx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xx() const"},{"name":"get_xy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xy() const"},{"name":"get_xz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xz() const"},{"name":"get_xw","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_xw() const"},{"name":"get_yx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yx() const"},{"name":"get_yy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yy() const"},{"name":"get_yz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yz() const"},{"name":"get_yw","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_yw() const"},{"name":"get_zx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_zx() const"},{"name":"get_zy","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_zy() const"},{"name":"get_zz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_zz() const"},{"name":"get_zw","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_zw() const"},{"name":"get_tx","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_tx() const"},{"name":"get_ty","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_ty() const"},{"name":"get_tz","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_tz() const"},{"name":"get_tw","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_tw() const"},{"name":"opMul","returntypeid":67108914,"returntypename":"mat4","returntypedecl":"mat4","returntypeflags":0,"args":[{"typeid":67108914,"typename":"mat4","typedecl":"mat4","typeflags":5,"name":""}],"decl":"mat4 opMul(const mat4&in) const"},{"name":"opMulAssign","returntypeid":67108914,"returntypename":"mat4","returntypedecl":"mat4","returntypeflags":3,"args":[{"typeid":67108914,"typename":"mat4","typedecl":"mat4","typeflags":5,"name":""}],"decl":"mat4& opMulAssign(const mat4&in)"},{"name":"opMul","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec4 opMul(const vec3&in) const"},{"name":"opMul","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4 opMul(const vec4&in) const"},{"name":"opMul_r","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec4 opMul_r(const vec3&in)"},{"name":"opMul_r","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"vec4 opMul_r(const vec4&in)"}],"props":[]},{"id":67108915,"name":"quat","group":"Math","desc":"A quaternion.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~quat()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"quat()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"euler"}],"decl":"quat(const vec3&in euler)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":"axis"},{"typedecl":"float","typeflags":0,"name":"angle"}],"decl":"quat(const vec3&in axis, float angle)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"z"},{"typedecl":"float","typeflags":0,"name":"w"}],"decl":"quat(float x, float y, float z, float w)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108912,"typename":"mat3","typedecl":"mat3","typeflags":5,"name":"m"}],"decl":"quat(const mat3&in m)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108914,"typename":"mat4","typedecl":"mat4","typeflags":5,"name":"m"}],"decl":"quat(const mat4&in m)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108915,"typename":"quat","typedecl":"quat","typeflags":5,"name":""}],"decl":"quat(const quat&in)"}}],"methods":[{"name":"opEquals","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108915,"typename":"quat","typedecl":"quat","typeflags":5,"name":""}],"decl":"bool opEquals(const quat&in)"},{"name":"opMul","returntypeid":67108915,"returntypename":"quat","returntypedecl":"quat","returntypeflags":0,"args":[{"typeid":67108915,"typename":"quat","typedecl":"quat","typeflags":5,"name":""}],"decl":"quat opMul(const quat&in) const"},{"name":"opMul","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3 opMul(const vec3&in) const"},{"name":"opMul_r","returntypeid":67108915,"returntypename":"quat","returntypedecl":"quat","returntypeflags":0,"args":[{"typeid":67108915,"typename":"quat","typedecl":"quat","typeflags":5,"name":""}],"decl":"quat opMul_r(const quat&in)"},{"name":"opMul_r","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"vec3 opMul_r(const vec3&in)"},{"name":"get_xyz","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[],"decl":"vec3 get_xyz() const"},{"name":"Angle","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float Angle() const"},{"name":"Axis","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[],"decl":"vec3 Axis() const"},{"name":"Euler","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[],"decl":"vec3 Euler() const"},{"name":"Inverse","returntypeid":67108915,"returntypename":"quat","returntypedecl":"quat","returntypeflags":0,"args":[],"decl":"quat Inverse() const"},{"name":"Length","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float Length() const"},{"name":"LengthSquared","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float LengthSquared() const"},{"name":"Normalized","returntypeid":67108915,"returntypename":"quat","returntypedecl":"quat","returntypeflags":0,"args":[],"decl":"quat Normalized() const"},{"name":"ToString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ToString() const"}],"props":[{"typedecl":"float","typeflags":0,"name":"x"},{"typedecl":"float","typeflags":0,"name":"y"},{"typedecl":"float","typeflags":0,"name":"z"},{"typedecl":"float","typeflags":0,"name":"w"}]},{"ns":"Math","id":67108916,"name":"Randomizer","group":"Math","desc":"A randomizer that can be seeded with a specific seed. The default constructor uses the seed 5489.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~Randomizer()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"Randomizer()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108916,"typename":"Randomizer","typedecl":"Math::Randomizer","typeflags":5,"name":""}],"decl":"Randomizer(const Math::Randomizer&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"seed"}],"decl":"Randomizer(uint64 seed)"}}],"methods":[{"name":"Int","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int Int()"},{"name":"Int","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"min"},{"typedecl":"int","typeflags":0,"name":"max"}],"decl":"int Int(int min, int max)"},{"name":"Uint","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint Uint()"},{"name":"Uint","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"min"},{"typedecl":"uint","typeflags":0,"name":"max"}],"decl":"uint Uint(uint min, uint max)"},{"name":"Int64","returntypedecl":"int64","returntypeflags":0,"args":[],"decl":"int64 Int64()"},{"name":"Int64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":0,"name":"min"},{"typedecl":"int64","typeflags":0,"name":"max"}],"decl":"int64 Int64(int64 min, int64 max)"},{"name":"Uint64","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 Uint64()"},{"name":"Uint64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"min"},{"typedecl":"uint64","typeflags":0,"name":"max"}],"decl":"uint64 Uint64(uint64 min, uint64 max)"},{"name":"Float","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float Float()"},{"name":"Float","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"min"},{"typedecl":"float","typeflags":0,"name":"max"}],"decl":"float Float(float min, float max)"},{"name":"Double","returntypedecl":"double","returntypeflags":0,"args":[],"decl":"double Double()"},{"name":"Double","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"double","typeflags":0,"name":"min"},{"typedecl":"double","typeflags":0,"name":"max"}],"decl":"double Double(double min, double max)"}],"props":[]},{"ns":"Tests","id":67108917,"name":"Context","group":"Tests","desc":"Context passed to test functions. Do not keep references to this context as they will be invalidated directly after the test function returns.","flags":[],"behaviors":[],"methods":[{"name":"AssertTrue","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"bool","typeflags":0,"name":"condition"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertTrue(bool condition, const string&in message = \"\")"},{"name":"AssertFalse","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"bool","typeflags":0,"name":"condition"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertFalse(bool condition, const string&in message = \"\")"},{"name":"AssertNull","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108895,"typename":"ref","typedecl":"ref","typeflags":0,"name":""},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertNull(ref, const string&in message = \"\")"},{"name":"AssertNotNull","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108895,"typename":"ref","typedecl":"ref","typeflags":0,"name":""},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertNotNull(ref, const string&in message = \"\")"},{"name":"AssertSame","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int8","typeflags":0,"name":"actual"},{"typedecl":"int8","typeflags":0,"name":"expected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertSame(int8 actual, int8 expected, const string&in message = \"\")"},{"name":"AssertSame","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int16","typeflags":0,"name":"actual"},{"typedecl":"int16","typeflags":0,"name":"expected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertSame(int16 actual, int16 expected, const string&in message = \"\")"},{"name":"AssertSame","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"actual"},{"typedecl":"int","typeflags":0,"name":"expected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertSame(int actual, int expected, const string&in message = \"\")"},{"name":"AssertSame","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":0,"name":"actual"},{"typedecl":"int64","typeflags":0,"name":"expected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertSame(int64 actual, int64 expected, const string&in message = \"\")"},{"name":"AssertSame","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint8","typeflags":0,"name":"actual"},{"typedecl":"uint8","typeflags":0,"name":"expected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertSame(uint8 actual, uint8 expected, const string&in message = \"\")"},{"name":"AssertSame","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint16","typeflags":0,"name":"actual"},{"typedecl":"uint16","typeflags":0,"name":"expected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertSame(uint16 actual, uint16 expected, const string&in message = \"\")"},{"name":"AssertSame","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"actual"},{"typedecl":"uint","typeflags":0,"name":"expected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertSame(uint actual, uint expected, const string&in message = \"\")"},{"name":"AssertSame","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"actual"},{"typedecl":"uint64","typeflags":0,"name":"expected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertSame(uint64 actual, uint64 expected, const string&in message = \"\")"},{"name":"AssertSame","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"actual"},{"typedecl":"float","typeflags":0,"name":"expected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertSame(float actual, float expected, const string&in message = \"\")"},{"name":"AssertSameApprox","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"actual"},{"typedecl":"float","typeflags":0,"name":"expected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertSameApprox(float actual, float expected, const string&in message = \"\")"},{"name":"AssertSame","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"double","typeflags":0,"name":"actual"},{"typedecl":"double","typeflags":0,"name":"expected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertSame(double actual, double expected, const string&in message = \"\")"},{"name":"AssertSameApprox","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"double","typeflags":0,"name":"actual"},{"typedecl":"double","typeflags":0,"name":"expected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertSameApprox(double actual, double expected, const string&in message = \"\")"},{"name":"AssertSame","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"actual"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"expected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertSame(const string&in actual, const string&in expected, const string&in message = \"\")"},{"name":"AssertNotSame","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int8","typeflags":0,"name":"actual"},{"typedecl":"int8","typeflags":0,"name":"notExpected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertNotSame(int8 actual, int8 notExpected, const string&in message = \"\")"},{"name":"AssertNotSame","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int16","typeflags":0,"name":"actual"},{"typedecl":"int16","typeflags":0,"name":"notExpected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertNotSame(int16 actual, int16 notExpected, const string&in message = \"\")"},{"name":"AssertNotSame","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"actual"},{"typedecl":"int","typeflags":0,"name":"notExpected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertNotSame(int actual, int notExpected, const string&in message = \"\")"},{"name":"AssertNotSame","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":0,"name":"actual"},{"typedecl":"int64","typeflags":0,"name":"notExpected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertNotSame(int64 actual, int64 notExpected, const string&in message = \"\")"},{"name":"AssertNotSame","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint8","typeflags":0,"name":"actual"},{"typedecl":"uint8","typeflags":0,"name":"notExpected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertNotSame(uint8 actual, uint8 notExpected, const string&in message = \"\")"},{"name":"AssertNotSame","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint16","typeflags":0,"name":"actual"},{"typedecl":"uint16","typeflags":0,"name":"notExpected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertNotSame(uint16 actual, uint16 notExpected, const string&in message = \"\")"},{"name":"AssertNotSame","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"actual"},{"typedecl":"uint","typeflags":0,"name":"notExpected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertNotSame(uint actual, uint notExpected, const string&in message = \"\")"},{"name":"AssertNotSame","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"actual"},{"typedecl":"uint64","typeflags":0,"name":"notExpected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertNotSame(uint64 actual, uint64 notExpected, const string&in message = \"\")"},{"name":"AssertNotSame","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"actual"},{"typedecl":"float","typeflags":0,"name":"notExpected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertNotSame(float actual, float notExpected, const string&in message = \"\")"},{"name":"AssertNotSameApprox","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"actual"},{"typedecl":"float","typeflags":0,"name":"notExpected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertNotSameApprox(float actual, float notExpected, const string&in message = \"\")"},{"name":"AssertNotSame","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"double","typeflags":0,"name":"actual"},{"typedecl":"double","typeflags":0,"name":"notExpected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertNotSame(double actual, double notExpected, const string&in message = \"\")"},{"name":"AssertNotSameApprox","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"double","typeflags":0,"name":"actual"},{"typedecl":"double","typeflags":0,"name":"notExpected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertNotSameApprox(double actual, double notExpected, const string&in message = \"\")"},{"name":"AssertNotSame","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"actual"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"notExpected"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"message","default":"\"\""}],"decl":"void AssertNotSame(const string&in actual, const string&in notExpected, const string&in message = \"\")"}],"props":[]},{"id":67108918,"name":"RGBAColor","group":"MwFoundations","desc":"The RGBAColor type used in Maniaplanet.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~RGBAColor()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"RGBAColor()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108918,"typename":"RGBAColor","typedecl":"RGBAColor","typeflags":5,"name":""}],"decl":"RGBAColor(const RGBAColor&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"RGBAColor(const vec3&in)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"RGBAColor(const vec4&in)"}}],"methods":[{"name":"opAssign","returntypeid":67108918,"returntypename":"RGBAColor","returntypedecl":"RGBAColor","returntypeflags":3,"args":[{"typeid":67108918,"typename":"RGBAColor","typedecl":"RGBAColor","typeflags":5,"name":""}],"decl":"RGBAColor& opAssign(const RGBAColor&in)"},{"name":"ToVec3","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[],"decl":"vec3 ToVec3()","group":"MwFoundations","desc":"Converts this color to a vec3, ignoring the alpha value.","flags":[]},{"name":"ToVec4","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[],"decl":"vec4 ToVec4()","group":"MwFoundations","desc":"Converts this color to a vec4.","flags":[]}],"props":[{"typedecl":"uint8","typeflags":0,"name":"r"},{"typedecl":"uint8","typeflags":0,"name":"g"},{"typedecl":"uint8","typeflags":0,"name":"b"},{"typedecl":"uint8","typeflags":0,"name":"a"},{"typedecl":"uint","typeflags":0,"name":"rgba"}]},{"id":67108919,"name":"MemoryBuffer","group":"Core","desc":"A buffer of memory. Can be used in IO or Import calls. You can write to this or read from it, which moves the cursor within the buffer.","flags":[],"behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1140850743,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer@","returntypeflags":0,"args":[],"decl":"MemoryBuffer@ MemoryBuffer()"}},{"type":3,"func":{"name":"$beh3","returntypeid":1140850743,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer@","returntypeflags":0,"args":[{"typeid":67108919,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":5,"name":""}],"decl":"MemoryBuffer@ MemoryBuffer(const MemoryBuffer&in)"}},{"type":3,"func":{"name":"$beh3","returntypeid":1140850743,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer@","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"size"}],"decl":"MemoryBuffer@ MemoryBuffer(uint64 size)"}},{"type":3,"func":{"name":"$beh3","returntypeid":1140850743,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer@","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"size"},{"typedecl":"uint8","typeflags":0,"name":"init"}],"decl":"MemoryBuffer@ MemoryBuffer(uint64 size, uint8 init)"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"opAssign","returntypeid":67108919,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer","returntypeflags":3,"args":[{"typeid":67108919,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":5,"name":""}],"decl":"MemoryBuffer& opAssign(const MemoryBuffer&in)"},{"name":"Resize","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"size"}],"decl":"void Resize(uint64 size)"},{"name":"GetSize","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 GetSize() const"},{"name":"GetPosition","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 GetPosition() const"},{"name":"Seek","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"pos"},{"typedecl":"int","typeflags":0,"name":"dir","default":"0"}],"decl":"void Seek(uint64 pos, int dir = 0)"},{"name":"AtEnd","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool AtEnd() const"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint8","typeflags":5,"name":"i"}],"decl":"void Write(const uint8&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint16","typeflags":5,"name":"i"}],"decl":"void Write(const uint16&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":5,"name":"i"}],"decl":"void Write(const uint&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":5,"name":"i"}],"decl":"void Write(const uint64&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int8","typeflags":5,"name":"i"}],"decl":"void Write(const int8&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int16","typeflags":5,"name":"i"}],"decl":"void Write(const int16&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":5,"name":"i"}],"decl":"void Write(const int&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":5,"name":"i"}],"decl":"void Write(const int64&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":5,"name":"i"}],"decl":"void Write(const float&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"double","typeflags":5,"name":"i"}],"decl":"void Write(const double&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"void Write(const string&in str)"},{"name":"WriteFromBuffer","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108919,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":5,"name":"buf"},{"typedecl":"uint64","typeflags":0,"name":"size"}],"decl":"void WriteFromBuffer(const MemoryBuffer&in buf, uint64 size)"},{"name":"ReadUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[],"decl":"uint8 ReadUInt8()"},{"name":"ReadUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[],"decl":"uint16 ReadUInt16()"},{"name":"ReadUInt32","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint ReadUInt32()"},{"name":"ReadUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 ReadUInt64()"},{"name":"ReadInt8","returntypedecl":"int8","returntypeflags":0,"args":[],"decl":"int8 ReadInt8()"},{"name":"ReadInt16","returntypedecl":"int16","returntypeflags":0,"args":[],"decl":"int16 ReadInt16()"},{"name":"ReadInt32","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int ReadInt32()"},{"name":"ReadInt64","returntypedecl":"int64","returntypeflags":0,"args":[],"decl":"int64 ReadInt64()"},{"name":"ReadFloat","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float ReadFloat()"},{"name":"ReadDouble","returntypedecl":"double","returntypeflags":0,"args":[],"decl":"double ReadDouble()"},{"name":"ReadString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"size"}],"decl":"string ReadString(uint64 size)"},{"name":"ReadBuffer","returntypeid":1140850743,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer@","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"size"}],"decl":"MemoryBuffer@ ReadBuffer(uint64 size)"},{"name":"WriteFromBase64","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""},{"typedecl":"bool","typeflags":0,"name":"url","default":"false","desc":"Whether to use URL-encoded unpadded base64 decoding or not."}],"decl":"void WriteFromBase64(const string&in, bool url = false)","group":"","desc":"","flags":[]},{"name":"ReadToBase64","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"size"},{"typedecl":"bool","typeflags":0,"name":"url","default":"false","desc":"Whether to use URL-encoded unpadded base64 encoding or not."}],"decl":"string ReadToBase64(uint64 size, bool url = false)","group":"","desc":"","flags":[]},{"name":"WriteFromHex","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"void WriteFromHex(const string&in)"},{"name":"ReadToHex","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"size"},{"typedecl":"bool","typeflags":0,"name":"upper","default":"false"}],"decl":"string ReadToHex(uint64 size, bool upper = false)"}],"props":[]},{"id":67108920,"name":"DataRef","group":"MwFoundations","desc":"The data reference type used in Maniaplanet.","flags":[],"behaviors":[],"methods":[],"props":[{"typeid":67108891,"typename":"wstring","typedecl":"wstring","typeflags":0,"name":"Filename"}]},{"ns":"Time","id":67108921,"name":"Info","group":"Time","desc":"Information about a specific timestamp, simplified into its common components.","flags":[],"behaviors":[],"methods":[],"props":[{"typedecl":"int","typeflags":0,"name":"Year"},{"typedecl":"int","typeflags":0,"name":"Month"},{"typedecl":"int","typeflags":0,"name":"Day"},{"typedecl":"int","typeflags":0,"name":"Hour"},{"typedecl":"int","typeflags":0,"name":"Minute"},{"typedecl":"int","typeflags":0,"name":"Second"}]},{"ns":"Net","id":67108924,"name":"HttpRequest","group":"Net","desc":"Holds the state of an executing HTTP request.","flags":[],"behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1140850748,"returntypename":"HttpRequest","returntypedecl":"Net::HttpRequest@","returntypeflags":0,"args":[],"decl":"Net::HttpRequest@ HttpRequest()","group":"","desc":"Creates a new GET request.","flags":[]}},{"type":3,"func":{"name":"$beh3","returntypeid":1140850748,"returntypename":"HttpRequest","returntypedecl":"Net::HttpRequest@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"url"}],"decl":"Net::HttpRequest@ HttpRequest(const string&in url)","group":"","desc":"Creates a new GET request with the given URL.","flags":[]}},{"type":3,"func":{"name":"$beh3","returntypeid":1140850748,"returntypename":"HttpRequest","returntypedecl":"Net::HttpRequest@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"url"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"body"}],"decl":"Net::HttpRequest@ HttpRequest(const string&in url, const string&in body)","group":"","desc":"Creates a new POST request with the given URL and body.","flags":[]}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"Start","returntypeid":1140850727,"returntypename":"awaitable","returntypedecl":"awaitable@","returntypeflags":0,"args":[],"decl":"awaitable@ Start()","group":"","desc":"Starts executing the request. Does nothing if the request has already started.","flags":[]},{"name":"StartToFile","returntypeid":1140850727,"returntypename":"awaitable","returntypedecl":"awaitable@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"awaitable@ StartToFile(const string&in path)","group":"","desc":"Starts executing the request, writing the response to the given path. Throws an exception if the request has already started.","flags":[]},{"name":"Finished","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool Finished()","group":"","desc":"Returns true if the request has finished execution. This will return true even in the case of an error.","flags":[]},{"name":"ProgressDownload","returntypedecl":"int64","returntypeflags":0,"args":[],"decl":"int64 ProgressDownload()","group":"","desc":"Returns the number of bytes that has been downloaded from the server.","flags":[]},{"name":"ProgressDownloadTotal","returntypedecl":"int64","returntypeflags":0,"args":[],"decl":"int64 ProgressDownloadTotal()","group":"","desc":"Returns the total number of bytes that are expected to be returned from the server. Note that this can be 0 before the server has sent its `Content-Length` header, or if it never sends the header at all.","flags":[]},{"name":"ProgressUpload","returntypedecl":"int64","returntypeflags":0,"args":[],"decl":"int64 ProgressUpload()","group":"","desc":"Returns the number of bytes that has been uploaded to the server.","flags":[]},{"name":"ProgressUploadTotal","returntypedecl":"int64","returntypeflags":0,"args":[],"decl":"int64 ProgressUploadTotal()","group":"","desc":"Returns the total number of bytes that are expected to be uploaded to the server.","flags":[]},{"name":"Cancel","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Cancel()","group":"","desc":"Cancels the request. Throws an exception when the request is not yet started.","flags":[]},{"name":"Error","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string Error()","group":"","desc":"Returns an error message, if there was an error. Otherwise, this returns an empty string. This function is useful in the rare case that `ResponseCode()` returns 0.","flags":[]},{"name":"ResponseCode","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int ResponseCode()","group":"","desc":"Returns the HTTP response code, for example 200 or 404.","flags":[]},{"name":"ResponseHeader","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"key"}],"decl":"string ResponseHeader(const string&in key)","group":"","desc":"Gets the value of a specific response header. The key is case insensitive.","flags":[]},{"name":"ResponseHeaders","returntypeid":1140850717,"returntypename":"dictionary","returntypedecl":"dictionary@","returntypeflags":0,"args":[],"decl":"dictionary@ ResponseHeaders()","group":"","desc":"Gets a dictionary of all response headers.","flags":[]},{"name":"String","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string String()","group":"","desc":"Returns the response body as a string.","flags":[]},{"name":"Json","returntypeid":1140850702,"returntypename":"Value","returntypedecl":"Json::Value@","returntypeflags":0,"args":[],"decl":"Json::Value@ Json()","group":"","desc":"Returns the response body as a Json value.","flags":[]},{"name":"Buffer","returntypeid":1140850743,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer@","returntypeflags":0,"args":[],"decl":"MemoryBuffer@ Buffer()","group":"","desc":"Returns the response body as a MemoryBuffer.","flags":[]},{"name":"SaveToFile","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"void SaveToFile(const string&in path)","group":"","desc":"Saves the response body to a file. The given path should be an absolute path.","flags":[]}],"props":[{"typeid":59,"typename":"HttpMethod","typedecl":"Net::HttpMethod","typeflags":0,"name":"Method"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"Url"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"Body"},{"typeid":1140850717,"typename":"dictionary","typedecl":"dictionary@","typeflags":0,"name":"Headers"},{"typedecl":"bool","typeflags":0,"name":"Redirect"}]},{"ns":"Net","id":67108925,"name":"Socket","group":"Net","desc":"A non-blocking TCP socket.","flags":[],"behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1140850749,"returntypename":"Socket","returntypedecl":"Net::Socket@","returntypeflags":0,"args":[],"decl":"Net::Socket@ Socket()"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"Connect","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"host"},{"typedecl":"uint16","typeflags":0,"name":"port"}],"decl":"bool Connect(const string&in host, uint16 port)","group":"Net","desc":"Start a connection to the given host and port. This is non-blocking and will immediately return. Use `IsReady()` to wait for the connection to be ready.","flags":[]},{"name":"Listen","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"host"},{"typedecl":"uint16","typeflags":0,"name":"port"}],"decl":"bool Listen(const string&in host, uint16 port)","group":"Net","desc":"Starts listening on the given host and port.","flags":[]},{"name":"Listen","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"uint16","typeflags":0,"name":"port"}],"decl":"bool Listen(uint16 port)","group":"Net","desc":"Starts listening on the given port using 0.0.0.0 as the host. Note that this will open up the port to the LAN, which may not be what you want.","flags":[]},{"name":"Close","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Close()","group":"Net","desc":"Closes the socket.","flags":[]},{"name":"Accept","returntypeid":1140850749,"returntypename":"Socket","returntypedecl":"Net::Socket@","returntypeflags":0,"args":[],"decl":"Net::Socket@ Accept()","group":"Net","desc":"When this socket is listening, attempts to accept a client connection if one is trying to connect. If there is, it will be returned. If no client is waiting, this will return null.","flags":[]},{"name":"GetRemoteIP","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string GetRemoteIP()","group":"Net","desc":"Get the host IP address associated with this socket.","flags":[]},{"name":"CanRead","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CanRead()","group":"Net","desc":"This method is deprecated and should not be used. Consider using IsReady(), IsHungUp(), or Available() instead, depending on your use-case.","flags":["deprecated"]},{"name":"CanWrite","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CanWrite()","group":"Net","desc":"This method is deprecated and should not be used. Use IsReady() instead.","flags":["deprecated"]},{"name":"IsReady","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsReady()","group":"Net","desc":"Returns true if the socket is ready to be used.","flags":[]},{"name":"IsHungUp","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsHungUp()","group":"Net","desc":"Returns true if the socket state currently has the hangup flag. Note that this flag may be set while there is still data in the buffer that can be read.","flags":[]},{"name":"Available","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int Available()","group":"Net","desc":"Returns the number of bytes available to be read from the socket buffer.","flags":[]},{"name":"ReadRaw","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"bytes"}],"decl":"string ReadRaw(int bytes)","group":"Net","desc":"Reads the given number of bytes and return it as a string.","flags":[]},{"name":"ReadBuffer","returntypeid":1140850743,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"bytes"}],"decl":"MemoryBuffer@ ReadBuffer(int bytes)","group":"Net","desc":"Reads the given number of bytes and return it as a MemoryBuffer.","flags":[]},{"name":"WriteRaw","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"bool WriteRaw(const string&in str)","group":"Net","desc":"Writes the given string to the socket as-is. Returns false if the write did not succeed. Note that this behavior differs from `Write(const string &in)`.","flags":[]},{"name":"ReadLine","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":2,"name":"str"}],"decl":"bool ReadLine(string&out str)","group":"Net","desc":"Attempts to read up until the next newline character, and outputs the string (including the newline character) in `str`. If no newline character is encountered, it will return false, leave `str` unmodified, and no bytes will be consumed from the buffer.","flags":[]},{"name":"WriteLine","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"bool WriteLine(const string&in)","group":"Net","desc":"Writes a line of text to the socket. Returns false if the write did not succeed. This behaves the same as `WriteRaw()`, except a newline is appended.","flags":[]},{"name":"ReadInt8","returntypedecl":"int8","returntypeflags":0,"args":[],"decl":"int8 ReadInt8()","group":"Net","desc":"Reads an 8 bit signed integer from the buffer.","flags":[]},{"name":"ReadInt16","returntypedecl":"int16","returntypeflags":0,"args":[],"decl":"int16 ReadInt16()","group":"Net","desc":"Reads a 16 bit signed integer from the buffer.","flags":[]},{"name":"ReadInt32","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int ReadInt32()","group":"Net","desc":"Reads a 32 bit signed integer from the buffer.","flags":[]},{"name":"ReadInt64","returntypedecl":"int64","returntypeflags":0,"args":[],"decl":"int64 ReadInt64()","group":"Net","desc":"Reads a 64 bit signed integer from the buffer.","flags":[]},{"name":"ReadUint8","returntypedecl":"uint8","returntypeflags":0,"args":[],"decl":"uint8 ReadUint8()","group":"Net","desc":"Reads an 8 bit unsigned integer from the buffer.","flags":[]},{"name":"ReadUint16","returntypedecl":"uint16","returntypeflags":0,"args":[],"decl":"uint16 ReadUint16()","group":"Net","desc":"Reads a 16 bit unsigned integer from the buffer.","flags":[]},{"name":"ReadUint32","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint ReadUint32()","group":"Net","desc":"Reads a 32 bit unsigned integer from the buffer.","flags":[]},{"name":"ReadUint64","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 ReadUint64()","group":"Net","desc":"Reads a 64 bit unsigned integer from the buffer.","flags":[]},{"name":"ReadFloat","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float ReadFloat()","group":"Net","desc":"Reads a 32 bit float from the buffer.","flags":[]},{"name":"ReadDouble","returntypedecl":"double","returntypeflags":0,"args":[],"decl":"double ReadDouble()","group":"Net","desc":"Reads a 64 bit float from the buffer.","flags":[]},{"name":"ReadString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ReadString()","group":"Net","desc":"Reads a string length from the buffer as a 32 bit unsigned integer, followed by the actual string. This complements `Write(const string &in)`.","flags":[]},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int8","typeflags":0,"name":""}],"decl":"bool Write(int8)","group":"Net","desc":"Writes an 8 bit signed integer to the socket. Returns false if the write did not succeed.","flags":[]},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int16","typeflags":0,"name":""}],"decl":"bool Write(int16)","group":"Net","desc":"Writes a 16 bit signed integer to the socket. Returns false if the write did not succeed.","flags":[]},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"bool Write(int)","group":"Net","desc":"Writes a 32 bit signed integer to the socket. Returns false if the write did not succeed.","flags":[]},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":0,"name":""}],"decl":"bool Write(int64)","group":"Net","desc":"Writes a 64 bit signed integer to the socket. Returns false if the write did not succeed.","flags":[]},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"uint8","typeflags":0,"name":""}],"decl":"bool Write(uint8)","group":"Net","desc":"Writes an 8 bit unsigned integer to the socket. Returns false if the write did not succeed.","flags":[]},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"uint16","typeflags":0,"name":""}],"decl":"bool Write(uint16)","group":"Net","desc":"Writes a 16 bit unsigned integer to the socket. Returns false if the write did not succeed.","flags":[]},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"bool Write(uint)","group":"Net","desc":"Writes a 32 bit unsigned integer to the socket. Returns false if the write did not succeed.","flags":[]},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":""}],"decl":"bool Write(uint64)","group":"Net","desc":"Writes a 64 bit unsigned integer to the socket. Returns false if the write did not succeed.","flags":[]},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"bool Write(float)","group":"Net","desc":"Writes a 32 bit float to the socket. Returns false if the write did not succeed.","flags":[]},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"double","typeflags":0,"name":""}],"decl":"bool Write(double)","group":"Net","desc":"Writes a 64 bit double to the socket. Returns false if the write did not succeed.","flags":[]},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"bool Write(const string&in)","group":"Net","desc":"Writes a 32 bit unsigned integer for the length of the string to the socket, followed by the actual string. Returns false if the write did not succeed. Note that this behavior differs from `WriteRaw()`.","flags":[]},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108919,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":1,"name":""},{"typedecl":"uint64","typeflags":0,"name":"size","default":"0","desc":"The number of bytes to read from the MemoryBuffer. If this is 0, the remainder of the available bytes is used."}],"decl":"bool Write(MemoryBuffer&in, uint64 size = 0)","group":"Net","desc":"Reads a number of bytes from the given MemoryBuffer and writes them to the socket.","flags":[]}],"props":[]},{"ns":"Net","id":67108926,"name":"SecureSocket","group":"Net","desc":"Represents a TCP socket with a TLS encryption layer.","flags":[],"behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1140850750,"returntypename":"SecureSocket","returntypedecl":"Net::SecureSocket@","returntypeflags":0,"args":[],"decl":"Net::SecureSocket@ SecureSocket()"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"Connect","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"host"},{"typedecl":"uint16","typeflags":0,"name":"port"}],"decl":"bool Connect(const string&in host, uint16 port)"},{"name":"Connecting","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool Connecting()"},{"name":"Close","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Close()"},{"name":"CanRead","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CanRead()"},{"name":"CanWrite","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CanWrite()"},{"name":"Available","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int Available()"},{"name":"ReadRaw","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"bytes"}],"decl":"string ReadRaw(int bytes)"},{"name":"ReadLine","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":2,"name":"str"}],"decl":"bool ReadLine(string&out str)"},{"name":"WriteRaw","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"bool WriteRaw(const string&in str)"},{"name":"ReadInt8","returntypedecl":"int8","returntypeflags":0,"args":[],"decl":"int8 ReadInt8()"},{"name":"ReadInt16","returntypedecl":"int16","returntypeflags":0,"args":[],"decl":"int16 ReadInt16()"},{"name":"ReadInt32","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int ReadInt32()"},{"name":"ReadInt64","returntypedecl":"int64","returntypeflags":0,"args":[],"decl":"int64 ReadInt64()"},{"name":"ReadUint8","returntypedecl":"uint8","returntypeflags":0,"args":[],"decl":"uint8 ReadUint8()"},{"name":"ReadUint16","returntypedecl":"uint16","returntypeflags":0,"args":[],"decl":"uint16 ReadUint16()"},{"name":"ReadUint32","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint ReadUint32()"},{"name":"ReadUint64","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 ReadUint64()"},{"name":"ReadFloat","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float ReadFloat()"},{"name":"ReadDouble","returntypedecl":"double","returntypeflags":0,"args":[],"decl":"double ReadDouble()"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int8","typeflags":0,"name":"x"}],"decl":"bool Write(int8 x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int16","typeflags":0,"name":"x"}],"decl":"bool Write(int16 x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"x"}],"decl":"bool Write(int x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":0,"name":"x"}],"decl":"bool Write(int64 x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"uint8","typeflags":0,"name":"x"}],"decl":"bool Write(uint8 x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"uint16","typeflags":0,"name":"x"}],"decl":"bool Write(uint16 x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":"x"}],"decl":"bool Write(uint x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"x"}],"decl":"bool Write(uint64 x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"x"}],"decl":"bool Write(float x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"double","typeflags":0,"name":"x"}],"decl":"bool Write(double x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"x"}],"decl":"bool Write(const string&in x)"},{"name":"Write","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108919,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":1,"name":"b"},{"typedecl":"uint64","typeflags":0,"name":"size","default":"0"}],"decl":"bool Write(MemoryBuffer&in b, uint64 size = 0)"}],"props":[]},{"ns":"Reflection","id":67108927,"name":"MwMemberInfo","group":"Reflection","desc":"Information about a type's member.","flags":[],"behaviors":[],"methods":[{"name":"get_Name","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"const string get_Name() const"},{"name":"get_NameDescriptive","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"const string get_NameDescriptive() const"}],"props":[{"typedecl":"uint","typeflags":0,"name":"ID"},{"typedecl":"uint16","typeflags":0,"name":"Offset"}]},{"ns":"Reflection","id":67108928,"name":"MwClassInfo","group":"Reflection","desc":"Information about a type.","flags":[],"behaviors":[],"methods":[{"name":"get_Members","returntypeid":1879051618,"returntypename":"array","returntypedecl":"const Reflection::MwMemberInfo@[]@","returntypeflags":0,"args":[],"decl":"const Reflection::MwMemberInfo@[]@ get_Members() const"},{"name":"get_Name","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"const string get_Name() const"},{"name":"get_Description","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"const string get_Description() const"},{"name":"get_UserName","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"const string get_UserName() const"},{"name":"get_FileExtension","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"const string get_FileExtension() const"},{"name":"GetMember","returntypeid":1677721663,"returntypename":"MwMemberInfo","returntypedecl":"const Reflection::MwMemberInfo@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"const Reflection::MwMemberInfo@ GetMember(const string&in name) const"}],"props":[{"typedecl":"uint","typeflags":0,"name":"ID"},{"typeid":1677721664,"typename":"MwClassInfo","typedecl":"const Reflection::MwClassInfo@","typeflags":0,"name":"BaseType"},{"typedecl":"uint","typeflags":0,"name":"Size"}]},{"ns":"Meta","id":67108933,"name":"PluginSetting","group":"Meta","desc":"Information about a plugin's setting.","flags":[],"behaviors":[],"methods":[{"name":"get_VarName","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_VarName()"},{"name":"get_Name","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_Name()"},{"name":"get_Type","returntypeid":68,"returntypename":"PluginSettingType","returntypedecl":"Meta::PluginSettingType","returntypeflags":0,"args":[],"decl":"Meta::PluginSettingType get_Type()"},{"name":"get_TypeName","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_TypeName()"},{"name":"get_Description","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_Description()"},{"name":"get_Category","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_Category()"},{"name":"get_Visible","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool get_Visible()"},{"name":"Reset","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Reset()"},{"name":"ReadBool","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool ReadBool()"},{"name":"ReadEnum","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int ReadEnum()"},{"name":"ReadEnum","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":2,"name":"name"}],"decl":"int ReadEnum(string&out name)"},{"name":"ReadFloat","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float ReadFloat()"},{"name":"ReadDouble","returntypedecl":"double","returntypeflags":0,"args":[],"decl":"double ReadDouble()"},{"name":"ReadInt8","returntypedecl":"int8","returntypeflags":0,"args":[],"decl":"int8 ReadInt8()"},{"name":"ReadInt16","returntypedecl":"int16","returntypeflags":0,"args":[],"decl":"int16 ReadInt16()"},{"name":"ReadInt32","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int ReadInt32()"},{"name":"ReadString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ReadString()"},{"name":"ReadVec2","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 ReadVec2()"},{"name":"ReadVec3","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":0,"args":[],"decl":"vec3 ReadVec3()"},{"name":"ReadVec4","returntypeid":67108906,"returntypename":"vec4","returntypedecl":"vec4","returntypeflags":0,"args":[],"decl":"vec4 ReadVec4()"},{"name":"ReadUint8","returntypedecl":"uint8","returntypeflags":0,"args":[],"decl":"uint8 ReadUint8()"},{"name":"ReadUint16","returntypedecl":"uint16","returntypeflags":0,"args":[],"decl":"uint16 ReadUint16()"},{"name":"ReadUint32","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint ReadUint32()"},{"name":"WriteBool","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"bool","typeflags":0,"name":""}],"decl":"void WriteBool(bool)"},{"name":"WriteEnum","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"void WriteEnum(int)"},{"name":"WriteFloat","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":""}],"decl":"void WriteFloat(float)"},{"name":"WriteDouble","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"double","typeflags":0,"name":""}],"decl":"void WriteDouble(double)"},{"name":"WriteInt8","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int8","typeflags":0,"name":""}],"decl":"void WriteInt8(int8)"},{"name":"WriteInt16","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int16","typeflags":0,"name":""}],"decl":"void WriteInt16(int16)"},{"name":"WriteInt32","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":""}],"decl":"void WriteInt32(int)"},{"name":"WriteString","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"void WriteString(const string&in)"},{"name":"WriteVec2","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":""}],"decl":"void WriteVec2(const vec2&in)"},{"name":"WriteVec3","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108905,"typename":"vec3","typedecl":"vec3","typeflags":5,"name":""}],"decl":"void WriteVec3(const vec3&in)"},{"name":"WriteVec4","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":""}],"decl":"void WriteVec4(const vec4&in)"},{"name":"WriteUint8","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint8","typeflags":0,"name":""}],"decl":"void WriteUint8(uint8)"},{"name":"WriteUint16","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint16","typeflags":0,"name":""}],"decl":"void WriteUint16(uint16)"},{"name":"WriteUint32","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":0,"name":""}],"decl":"void WriteUint32(uint)"}],"props":[]},{"ns":"Meta","id":67108934,"name":"Plugin","group":"Meta","desc":"Information about an Openplanet plugin.","flags":[],"behaviors":[],"methods":[{"name":"get_ID","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_ID()"},{"name":"get_Type","returntypeid":66,"returntypename":"PluginType","returntypedecl":"Meta::PluginType","returntypeflags":0,"args":[],"decl":"Meta::PluginType get_Type()"},{"name":"get_Name","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_Name()"},{"name":"get_Author","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_Author()"},{"name":"get_Category","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_Category()"},{"name":"get_Blocks","returntypeid":1342180699,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[],"decl":"string[]@ get_Blocks()"},{"name":"get_Dependencies","returntypeid":1342180699,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[],"decl":"string[]@ get_Dependencies()"},{"name":"get_OptionalDependencies","returntypeid":1342180699,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[],"decl":"string[]@ get_OptionalDependencies()"},{"name":"get_HasManifest","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool get_HasManifest()"},{"name":"get_SignatureLevel","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int get_SignatureLevel()"},{"name":"get_SiteID","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int get_SiteID()"},{"name":"get_Version","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_Version()"},{"name":"get_Essential","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool get_Essential()"},{"name":"get_Source","returntypeid":67,"returntypename":"PluginSource","returntypedecl":"Meta::PluginSource","returntypeflags":0,"args":[],"decl":"Meta::PluginSource get_Source()"},{"name":"get_SourcePath","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_SourcePath()"},{"name":"get_Enabled","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool get_Enabled()"},{"name":"set_Enabled","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"bool","typeflags":0,"name":""}],"decl":"void set_Enabled(bool)"},{"name":"get_Favorite","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool get_Favorite()"},{"name":"set_Favorite","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"bool","typeflags":0,"name":""}],"decl":"void set_Favorite(bool)"},{"name":"get_Unstable","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool get_Unstable()"},{"name":"GetSettings","returntypeid":1342180707,"returntypename":"array","returntypedecl":"Meta::PluginSetting@[]@","returntypeflags":0,"args":[],"decl":"Meta::PluginSetting@[]@ GetSettings()"},{"name":"GetSetting","returntypeid":1140850757,"returntypename":"PluginSetting","returntypedecl":"Meta::PluginSetting@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"varName"}],"decl":"Meta::PluginSetting@ GetSetting(const string&in varName)"},{"name":"Enable","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Enable()","group":"Meta","desc":"This function is deprecated. As a replacement, you can set the `Enabled` property instead.","flags":["deprecated"]},{"name":"Disable","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Disable()","group":"Meta","desc":"This function is deprecated. As a replacement, you can set the `Enabled` property instead.","flags":["deprecated"]}],"props":[]},{"ns":"Meta","id":67108935,"name":"PluginIndex","group":"Meta","desc":"An index of plugin information that can be sorted by its dependency tree.","flags":[],"behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1140850759,"returntypename":"PluginIndex","returntypedecl":"Meta::PluginIndex@","returntypeflags":0,"args":[],"decl":"Meta::PluginIndex@ PluginIndex()"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"AddTree","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850758,"typename":"Plugin","typedecl":"Meta::Plugin@","typeflags":0,"name":"plugin"}],"decl":"void AddTree(Meta::Plugin@ plugin)"},{"name":"Add","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850758,"typename":"Plugin","typedecl":"Meta::Plugin@","typeflags":0,"name":"plugin"}],"decl":"void Add(Meta::Plugin@ plugin)"},{"name":"Remove","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"id"}],"decl":"void Remove(const string&in id)"},{"name":"RemoveBlocked","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void RemoveBlocked()"},{"name":"TopologicalSort","returntypeid":1342180708,"returntypename":"array","returntypedecl":"Meta::PluginIndexItem[]@","returntypeflags":0,"args":[],"decl":"Meta::PluginIndexItem[]@ TopologicalSort()"}],"props":[]},{"ns":"Meta","id":67108936,"name":"PluginIndexItem","group":"Meta","desc":"An item in a PluginIndex.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~PluginIndexItem()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"PluginIndexItem()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108936,"typename":"PluginIndexItem","typedecl":"Meta::PluginIndexItem","typeflags":5,"name":""}],"decl":"PluginIndexItem(const Meta::PluginIndexItem&in)"}}],"methods":[{"name":"opAssign","returntypeid":67108936,"returntypename":"PluginIndexItem","returntypedecl":"Meta::PluginIndexItem","returntypeflags":3,"args":[{"typeid":67108936,"typename":"PluginIndexItem","typedecl":"Meta::PluginIndexItem","typeflags":5,"name":""}],"decl":"Meta::PluginIndexItem& opAssign(const Meta::PluginIndexItem&in)"},{"name":"get_ID","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_ID()"},{"name":"get_Path","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_Path()"},{"name":"get_Type","returntypeid":66,"returntypename":"PluginType","returntypedecl":"Meta::PluginType","returntypeflags":0,"args":[],"decl":"Meta::PluginType get_Type()"},{"name":"get_Source","returntypeid":67,"returntypename":"PluginSource","returntypedecl":"Meta::PluginSource","returntypeflags":0,"args":[],"decl":"Meta::PluginSource get_Source()"}],"props":[]},{"ns":"Meta","id":67108937,"name":"UnloadedPluginInfo","behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~UnloadedPluginInfo()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"UnloadedPluginInfo()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108937,"typename":"UnloadedPluginInfo","typedecl":"Meta::UnloadedPluginInfo","typeflags":5,"name":""}],"decl":"UnloadedPluginInfo(const Meta::UnloadedPluginInfo&in)"}}],"methods":[],"props":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"Path"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"ID"},{"typeid":67,"typename":"PluginSource","typedecl":"Meta::PluginSource","typeflags":0,"name":"Source"},{"typeid":66,"typename":"PluginType","typedecl":"Meta::PluginType","typeflags":0,"name":"Type"}]},{"id":67108939,"name":"CMwStack","group":"MwFoundations","desc":"Stack class used for calling engine procs.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~CMwStack()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"CMwStack()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108939,"typename":"CMwStack","typedecl":"CMwStack","typeflags":5,"name":""}],"decl":"CMwStack(const CMwStack&in)"}}],"methods":[{"name":"CurrentBool","returntypedecl":"bool","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"bool& CurrentBool(int offset = 0)"},{"name":"CurrentNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"CMwNod@& CurrentNod(int offset = 0)"},{"name":"CurrentEnum","returntypedecl":"int","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"int& CurrentEnum(int offset = 0)"},{"name":"CurrentIso4","returntypeid":67108913,"returntypename":"iso4","returntypedecl":"iso4","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"iso4& CurrentIso4(int offset = 0)"},{"name":"CurrentVec2","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"vec2& CurrentVec2(int offset = 0)"},{"name":"CurrentVec3","returntypeid":67108905,"returntypename":"vec3","returntypedecl":"vec3","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"vec3& CurrentVec3(int offset = 0)"},{"name":"CurrentInt2","returntypeid":67108907,"returntypename":"int2","returntypedecl":"int2","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"int2& CurrentInt2(int offset = 0)"},{"name":"CurrentInt3","returntypeid":67108908,"returntypename":"int3","returntypedecl":"int3","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"int3& CurrentInt3(int offset = 0)"},{"name":"CurrentNat3","returntypeid":67108910,"returntypename":"nat3","returntypedecl":"nat3","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"nat3& CurrentNat3(int offset = 0)"},{"name":"CurrentInt","returntypedecl":"int","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"int& CurrentInt(int offset = 0)"},{"name":"CurrentUint","returntypedecl":"uint","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"uint& CurrentUint(int offset = 0)"},{"name":"CurrentFloat","returntypedecl":"float","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"float& CurrentFloat(int offset = 0)"},{"name":"CurrentString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"string& CurrentString(int offset = 0)"},{"name":"CurrentWString","returntypeid":67108891,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"wstring& CurrentWString(int offset = 0)"},{"name":"CurrentId","returntypeid":67108876,"returntypename":"MwId","returntypedecl":"MwId","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwId& CurrentId(int offset = 0)"},{"name":"CurrentBufferBool","returntypeid":268438885,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<bool>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<bool>& CurrentBufferBool(int offset = 0)"},{"name":"CurrentBufferNod","returntypeid":268438886,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<CMwNod@>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<CMwNod@>& CurrentBufferNod(int offset = 0)"},{"name":"CurrentBufferEnum","returntypeid":268438887,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<int>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<int>& CurrentBufferEnum(int offset = 0)"},{"name":"CurrentBufferIso4","returntypeid":268435625,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<iso4>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<iso4>& CurrentBufferIso4(int offset = 0)"},{"name":"CurrentBufferVec2","returntypeid":268438888,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<vec2>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<vec2>& CurrentBufferVec2(int offset = 0)"},{"name":"CurrentBufferVec3","returntypeid":268435626,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<vec3>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<vec3>& CurrentBufferVec3(int offset = 0)"},{"name":"CurrentBufferInt2","returntypeid":268435627,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<int2>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<int2>& CurrentBufferInt2(int offset = 0)"},{"name":"CurrentBufferInt3","returntypeid":268435628,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<int3>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<int3>& CurrentBufferInt3(int offset = 0)"},{"name":"CurrentBufferNat3","returntypeid":268435629,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<nat3>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<nat3>& CurrentBufferNat3(int offset = 0)"},{"name":"CurrentBufferInt","returntypeid":268438887,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<int>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<int>& CurrentBufferInt(int offset = 0)"},{"name":"CurrentBufferUint","returntypeid":268438889,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<uint>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<uint>& CurrentBufferUint(int offset = 0)"},{"name":"CurrentBufferFloat","returntypeid":268438890,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<float>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<float>& CurrentBufferFloat(int offset = 0)"},{"name":"CurrentBufferString","returntypeid":268435630,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<string>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<string>& CurrentBufferString(int offset = 0)"},{"name":"CurrentBufferWString","returntypeid":268435631,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<wstring>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<wstring>& CurrentBufferWString(int offset = 0)"},{"name":"CurrentBufferId","returntypeid":268435632,"returntypename":"MwFastBuffer","returntypedecl":"MwFastBuffer<MwId>","returntypeflags":3,"args":[{"typedecl":"int","typeflags":0,"name":"offset","default":"0"}],"decl":"MwFastBuffer<MwId>& CurrentBufferId(int offset = 0)"},{"name":"Index","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int Index()"},{"name":"Count","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int Count()"}],"props":[]},{"ns":"Dev","id":268435533,"name":"ForceCast","group":"Dev","desc":"","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~ForceCast()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":1,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"ForceCast(int&in, const ?&in)"}}],"methods":[{"name":"Get","returntypeid":67112287,"returntypename":"T","returntypedecl":"T","returntypeflags":3,"args":[],"decl":"T& Get()"},{"name":"Set","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Set(const ?&in)"}],"props":[]},{"ns":"Dev","id":67108942,"name":"HookInfo","group":"Dev","desc":"","flags":[],"behaviors":[],"methods":[],"props":[]},{"ns":"Regex","id":67108946,"name":"SearchAllResult","group":"Regex","desc":"Result of a call to `Regex::SearchAll`.","flags":[],"behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"opIndex","returntypeid":1342180699,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"}],"decl":"string[]@ opIndex(int index)"},{"name":"get_Length","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint get_Length()"}],"props":[]},{"ns":"Audio","id":67108947,"name":"Sample","group":"Audio","desc":"Represents an audio sample.","flags":[],"behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[],"props":[]},{"ns":"Audio","id":67108948,"name":"Voice","group":"Audio","desc":"Represents a currently playing voice of audio.","flags":[],"behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"Play","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Play()"},{"name":"Pause","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Pause()"},{"name":"IsPaused","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsPaused()"},{"name":"GetPosition","returntypedecl":"double","returntypeflags":0,"args":[],"decl":"double GetPosition()","group":"Audio","desc":"Gets the current position within the sample in seconds.","flags":[]},{"name":"SetPosition","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"double","typeflags":0,"name":"pos"}],"decl":"void SetPosition(double pos)","group":"Audio","desc":"Sets the current position within the sample in seconds. Note that this is not an immediate action because voice mixing is performed in a different thread. (`GetPosition()` will not immediately return the same value as you pass here.)","flags":[]},{"name":"GetLength","returntypedecl":"double","returntypeflags":0,"args":[],"decl":"double GetLength()","group":"Audio","desc":"Gets the length of the sample in seconds. Note that on streamed samples, this may be expensive on the first call as it may have to decode the entire stream.","flags":[]},{"name":"GetGain","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float GetGain()"},{"name":"SetGain","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":0,"name":"gain"}],"decl":"void SetGain(float gain)"}],"props":[]},{"ns":"Auth","id":67108949,"name":"PluginAuthTask","group":"Auth","desc":"An asynchronous authentication task with the Openplanet and Nadeo backends for the current plugin.","flags":[],"behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"Finished","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool Finished()","group":"","desc":"Returns true if the task has finished execution. This will return true even in the case of an error. Only when this returns true should you call IsSuccess(), Error(), or Token().","flags":[]},{"name":"IsSuccess","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool IsSuccess()","group":"","desc":"Returns true if the task was successful, or false if not. If this returns false, you can call Error() to get more information about what went wrong.","flags":[]},{"name":"Error","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string Error()","group":"","desc":"If IsSuccess() returns false, this will return the description of the error.","flags":[]},{"name":"Token","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string Token()","group":"","desc":"Returns the authentication token as a string. This is the token you should send to your server, which should validate it using the Openplanet.dev API. Note that the token is only valid for 5 minutes. Because of this, you should not be storing this token! Instead, exchange it with a token of your own from your backend which you keep validated for a longer period of time.","flags":[]}],"props":[]},{"ns":"XML","id":67108950,"name":"Node","group":"XML","desc":"A node within an XML tree.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~Node()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"Node()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108950,"typename":"Node","typedecl":"XML::Node","typeflags":5,"name":""}],"decl":"Node(const XML::Node&in)"}}],"methods":[{"name":"opImplConv","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool opImplConv() const"},{"name":"opAssign","returntypeid":67108950,"returntypename":"Node","returntypedecl":"XML::Node","returntypeflags":3,"args":[{"typeid":67108950,"typename":"Node","typedecl":"XML::Node","typeflags":5,"name":""}],"decl":"XML::Node& opAssign(const XML::Node&in)"},{"name":"Name","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string Name() const","group":"XML","desc":"Get the tag name of the node. For example, <abc> will return \"abc\".","flags":[]},{"name":"FirstChild","returntypeid":67108950,"returntypename":"Node","returntypedecl":"XML::Node","returntypeflags":0,"args":[],"decl":"XML::Node FirstChild() const","group":"XML","desc":"Get the first child node within this node.","flags":[]},{"name":"LastChild","returntypeid":67108950,"returntypename":"Node","returntypedecl":"XML::Node","returntypeflags":0,"args":[],"decl":"XML::Node LastChild() const","group":"XML","desc":"Get the last child node within this node.","flags":[]},{"name":"Child","returntypeid":67108950,"returntypename":"Node","returntypedecl":"XML::Node","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"XML::Node Child(const string&in name) const","group":"XML","desc":"Get the child node within this node that matches the tag name. For example, to get the tag <abc>, call Child(\"abc\").","flags":[]},{"name":"NextSibling","returntypeid":67108950,"returntypename":"Node","returntypedecl":"XML::Node","returntypeflags":0,"args":[],"decl":"XML::Node NextSibling() const","group":"XML","desc":"Get the next sibling in the parent of this node. For example, if the node you're calling it on is <abc>, it will return <def> in this tree: <root><abc/><def/></root>","flags":[]},{"name":"Attribute","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"name"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"def","default":"\"\""}],"decl":"string Attribute(const string&in name, const string&in def = \"\") const","group":"XML","desc":"Get an attribute within this node. For example, the node <abc x=\"y\"> has an attribute named \"x\" with a value \"y\". If the attribute does not exist, the def parameter is returned.","flags":[]},{"name":"Content","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string Content() const","group":"XML","desc":"Get the content text within this node.","flags":[]}],"props":[]},{"ns":"XML","id":67108951,"name":"Document","group":"XML","desc":"An XML tree document.","flags":[],"behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1140850775,"returntypename":"Document","returntypedecl":"XML::Document@","returntypeflags":0,"args":[],"decl":"XML::Document@ Document()"}},{"type":3,"func":{"name":"$beh3","returntypeid":1140850775,"returntypename":"Document","returntypedecl":"XML::Document@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"xml"}],"decl":"XML::Document@ Document(const string&in xml)"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"LoadString","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"xml"}],"decl":"void LoadString(const string&in xml)","group":"XML","desc":"Load an XML tree into this document by parsing the given string.","flags":[]},{"name":"Root","returntypeid":67108950,"returntypename":"Node","returntypedecl":"XML::Node","returntypeflags":0,"args":[],"decl":"XML::Node Root()","group":"XML","desc":"Get the root node of the document.","flags":[]}],"props":[]},{"ns":"Import","id":67108952,"name":"Library","group":"Import","desc":"A library representing a DLL. Instances of Library exist in between multiple plugins, and have to be loaded using Import::GetLibrary. When all instances of Library are destroyed, the dll is freed and unloaded.","flags":[],"behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"GetPath","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string GetPath() const"},{"name":"GetFunction","returntypeid":1140850777,"returntypename":"Function","returntypedecl":"Import::Function@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"symbol"}],"decl":"Import::Function@ GetFunction(const string&in symbol)","group":"Import","desc":"Gets a function exported from the library. The symbol must be matching exactly what is being exported. In the case of C++ code, this could be a mangled name too!","flags":[]}],"props":[]},{"ns":"Import","id":67108953,"name":"Function","group":"Import","desc":"An imported symbol from a library.","flags":[],"behaviors":[],"methods":[{"name":"GetLibrary","returntypeid":1140850776,"returntypename":"Library","returntypedecl":"Import::Library@","returntypeflags":0,"args":[],"decl":"Import::Library@ GetLibrary()","group":"Import","desc":"Gets the Library from which this function is loaded.","flags":[]},{"name":"SetConvention","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":91,"typename":"CallConvention","typedecl":"Import::CallConvention","typeflags":0,"name":"convention"}],"decl":"void SetConvention(Import::CallConvention convention)","group":"Import","desc":"Sets the call convention for this function. Note that on Windows x64, this function does nothing because there is only one convention.","flags":[]},{"name":"Call","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Call()","group":"Import","desc":"Calls the function and returns void.","flags":[]},{"name":"Call","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Call(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns void.","flags":[]},{"name":"Call","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Call(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns void.","flags":[]},{"name":"Call","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Call(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns void.","flags":[]},{"name":"Call","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Call(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns void.","flags":[]},{"name":"Call","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Call(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns void.","flags":[]},{"name":"Call","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Call(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns void.","flags":[]},{"name":"Call","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Call(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns void.","flags":[]},{"name":"Call","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Call(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns void.","flags":[]},{"name":"Call","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"void Call(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns void.","flags":[]},{"name":"CallBool","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool CallBool()","group":"Import","desc":"Calls the function and returns bool.","flags":[]},{"name":"CallBool","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"bool CallBool(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns bool.","flags":[]},{"name":"CallBool","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"bool CallBool(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns bool.","flags":[]},{"name":"CallBool","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"bool CallBool(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns bool.","flags":[]},{"name":"CallBool","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"bool CallBool(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns bool.","flags":[]},{"name":"CallBool","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"bool CallBool(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns bool.","flags":[]},{"name":"CallBool","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"bool CallBool(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns bool.","flags":[]},{"name":"CallBool","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"bool CallBool(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns bool.","flags":[]},{"name":"CallBool","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"bool CallBool(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns bool.","flags":[]},{"name":"CallBool","returntypedecl":"bool","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"bool CallBool(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns bool.","flags":[]},{"name":"CallInt8","returntypedecl":"int8","returntypeflags":0,"args":[],"decl":"int8 CallInt8()","group":"Import","desc":"Calls the function and returns int8.","flags":[]},{"name":"CallInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"int8 CallInt8(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns int8.","flags":[]},{"name":"CallInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int8 CallInt8(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns int8.","flags":[]},{"name":"CallInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int8 CallInt8(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns int8.","flags":[]},{"name":"CallInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int8 CallInt8(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns int8.","flags":[]},{"name":"CallInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int8 CallInt8(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns int8.","flags":[]},{"name":"CallInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int8 CallInt8(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns int8.","flags":[]},{"name":"CallInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int8 CallInt8(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns int8.","flags":[]},{"name":"CallInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int8 CallInt8(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns int8.","flags":[]},{"name":"CallInt8","returntypedecl":"int8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int8 CallInt8(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns int8.","flags":[]},{"name":"CallInt16","returntypedecl":"int16","returntypeflags":0,"args":[],"decl":"int16 CallInt16()","group":"Import","desc":"Calls the function and returns int16.","flags":[]},{"name":"CallInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"int16 CallInt16(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns int16.","flags":[]},{"name":"CallInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int16 CallInt16(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns int16.","flags":[]},{"name":"CallInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int16 CallInt16(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns int16.","flags":[]},{"name":"CallInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int16 CallInt16(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns int16.","flags":[]},{"name":"CallInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int16 CallInt16(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns int16.","flags":[]},{"name":"CallInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int16 CallInt16(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns int16.","flags":[]},{"name":"CallInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int16 CallInt16(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns int16.","flags":[]},{"name":"CallInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int16 CallInt16(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns int16.","flags":[]},{"name":"CallInt16","returntypedecl":"int16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int16 CallInt16(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns int16.","flags":[]},{"name":"CallInt32","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int CallInt32()","group":"Import","desc":"Calls the function and returns int32.","flags":[]},{"name":"CallInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"int CallInt32(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns int32.","flags":[]},{"name":"CallInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int CallInt32(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns int32.","flags":[]},{"name":"CallInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int CallInt32(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns int32.","flags":[]},{"name":"CallInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int CallInt32(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns int32.","flags":[]},{"name":"CallInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int CallInt32(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns int32.","flags":[]},{"name":"CallInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int CallInt32(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns int32.","flags":[]},{"name":"CallInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int CallInt32(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns int32.","flags":[]},{"name":"CallInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int CallInt32(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns int32.","flags":[]},{"name":"CallInt32","returntypedecl":"int","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int CallInt32(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns int32.","flags":[]},{"name":"CallInt64","returntypedecl":"int64","returntypeflags":0,"args":[],"decl":"int64 CallInt64()","group":"Import","desc":"Calls the function and returns int64.","flags":[]},{"name":"CallInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"int64 CallInt64(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns int64.","flags":[]},{"name":"CallInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int64 CallInt64(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns int64.","flags":[]},{"name":"CallInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int64 CallInt64(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns int64.","flags":[]},{"name":"CallInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int64 CallInt64(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns int64.","flags":[]},{"name":"CallInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int64 CallInt64(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns int64.","flags":[]},{"name":"CallInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int64 CallInt64(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns int64.","flags":[]},{"name":"CallInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int64 CallInt64(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns int64.","flags":[]},{"name":"CallInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int64 CallInt64(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns int64.","flags":[]},{"name":"CallInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"int64 CallInt64(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns int64.","flags":[]},{"name":"CallUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[],"decl":"uint8 CallUInt8()","group":"Import","desc":"Calls the function and returns uint8.","flags":[]},{"name":"CallUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint8 CallUInt8(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns uint8.","flags":[]},{"name":"CallUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint8 CallUInt8(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns uint8.","flags":[]},{"name":"CallUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint8 CallUInt8(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns uint8.","flags":[]},{"name":"CallUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint8 CallUInt8(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns uint8.","flags":[]},{"name":"CallUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint8 CallUInt8(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns uint8.","flags":[]},{"name":"CallUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint8 CallUInt8(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns uint8.","flags":[]},{"name":"CallUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint8 CallUInt8(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns uint8.","flags":[]},{"name":"CallUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint8 CallUInt8(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns uint8.","flags":[]},{"name":"CallUInt8","returntypedecl":"uint8","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint8 CallUInt8(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns uint8.","flags":[]},{"name":"CallUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[],"decl":"uint16 CallUInt16()","group":"Import","desc":"Calls the function and returns uint16.","flags":[]},{"name":"CallUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint16 CallUInt16(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns uint16.","flags":[]},{"name":"CallUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint16 CallUInt16(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns uint16.","flags":[]},{"name":"CallUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint16 CallUInt16(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns uint16.","flags":[]},{"name":"CallUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint16 CallUInt16(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns uint16.","flags":[]},{"name":"CallUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint16 CallUInt16(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns uint16.","flags":[]},{"name":"CallUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint16 CallUInt16(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns uint16.","flags":[]},{"name":"CallUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint16 CallUInt16(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns uint16.","flags":[]},{"name":"CallUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint16 CallUInt16(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns uint16.","flags":[]},{"name":"CallUInt16","returntypedecl":"uint16","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint16 CallUInt16(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns uint16.","flags":[]},{"name":"CallUInt32","returntypedecl":"uint","returntypeflags":0,"args":[],"decl":"uint CallUInt32()","group":"Import","desc":"Calls the function and returns uint32.","flags":[]},{"name":"CallUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint CallUInt32(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns uint32.","flags":[]},{"name":"CallUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint CallUInt32(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns uint32.","flags":[]},{"name":"CallUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint CallUInt32(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns uint32.","flags":[]},{"name":"CallUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint CallUInt32(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns uint32.","flags":[]},{"name":"CallUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint CallUInt32(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns uint32.","flags":[]},{"name":"CallUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint CallUInt32(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns uint32.","flags":[]},{"name":"CallUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint CallUInt32(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns uint32.","flags":[]},{"name":"CallUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint CallUInt32(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns uint32.","flags":[]},{"name":"CallUInt32","returntypedecl":"uint","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint CallUInt32(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns uint32.","flags":[]},{"name":"CallUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 CallUInt64()","group":"Import","desc":"Calls the function and returns uint64.","flags":[]},{"name":"CallUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallUInt64(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns uint64.","flags":[]},{"name":"CallUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallUInt64(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns uint64.","flags":[]},{"name":"CallUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallUInt64(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns uint64.","flags":[]},{"name":"CallUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallUInt64(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns uint64.","flags":[]},{"name":"CallUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallUInt64(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns uint64.","flags":[]},{"name":"CallUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallUInt64(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns uint64.","flags":[]},{"name":"CallUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallUInt64(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns uint64.","flags":[]},{"name":"CallUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallUInt64(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns uint64.","flags":[]},{"name":"CallUInt64","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallUInt64(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns uint64.","flags":[]},{"name":"CallFloat","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float CallFloat()","group":"Import","desc":"Calls the function and returns float.","flags":[]},{"name":"CallFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"float CallFloat(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns float.","flags":[]},{"name":"CallFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"float CallFloat(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns float.","flags":[]},{"name":"CallFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"float CallFloat(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns float.","flags":[]},{"name":"CallFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"float CallFloat(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns float.","flags":[]},{"name":"CallFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"float CallFloat(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns float.","flags":[]},{"name":"CallFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"float CallFloat(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns float.","flags":[]},{"name":"CallFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"float CallFloat(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns float.","flags":[]},{"name":"CallFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"float CallFloat(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns float.","flags":[]},{"name":"CallFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"float CallFloat(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns float.","flags":[]},{"name":"CallDouble","returntypedecl":"double","returntypeflags":0,"args":[],"decl":"double CallDouble()","group":"Import","desc":"Calls the function and returns double.","flags":[]},{"name":"CallDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"double CallDouble(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns double.","flags":[]},{"name":"CallDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"double CallDouble(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns double.","flags":[]},{"name":"CallDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"double CallDouble(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns double.","flags":[]},{"name":"CallDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"double CallDouble(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns double.","flags":[]},{"name":"CallDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"double CallDouble(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns double.","flags":[]},{"name":"CallDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"double CallDouble(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns double.","flags":[]},{"name":"CallDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"double CallDouble(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns double.","flags":[]},{"name":"CallDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"double CallDouble(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns double.","flags":[]},{"name":"CallDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"double CallDouble(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns double.","flags":[]},{"name":"CallPointer","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 CallPointer()","group":"Import","desc":"Calls the function and returns IntPtr.","flags":[]},{"name":"CallPointer","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallPointer(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns IntPtr.","flags":[]},{"name":"CallPointer","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallPointer(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns IntPtr.","flags":[]},{"name":"CallPointer","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallPointer(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns IntPtr.","flags":[]},{"name":"CallPointer","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallPointer(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns IntPtr.","flags":[]},{"name":"CallPointer","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallPointer(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns IntPtr.","flags":[]},{"name":"CallPointer","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallPointer(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns IntPtr.","flags":[]},{"name":"CallPointer","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallPointer(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns IntPtr.","flags":[]},{"name":"CallPointer","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallPointer(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns IntPtr.","flags":[]},{"name":"CallPointer","returntypedecl":"uint64","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"uint64 CallPointer(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns IntPtr.","flags":[]},{"name":"CallNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[],"decl":"CMwNod@ CallNod()","group":"Import","desc":"Calls the function and returns CMwNod@.","flags":[]},{"name":"CallNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"CMwNod@ CallNod(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns CMwNod@.","flags":[]},{"name":"CallNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"CMwNod@ CallNod(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns CMwNod@.","flags":[]},{"name":"CallNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"CMwNod@ CallNod(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns CMwNod@.","flags":[]},{"name":"CallNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"CMwNod@ CallNod(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns CMwNod@.","flags":[]},{"name":"CallNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"CMwNod@ CallNod(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns CMwNod@.","flags":[]},{"name":"CallNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"CMwNod@ CallNod(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns CMwNod@.","flags":[]},{"name":"CallNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"CMwNod@ CallNod(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns CMwNod@.","flags":[]},{"name":"CallNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"CMwNod@ CallNod(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns CMwNod@.","flags":[]},{"name":"CallNod","returntypeid":1140850701,"returntypename":"CMwNod","returntypedecl":"CMwNod@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"CMwNod@ CallNod(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns CMwNod@.","flags":[]},{"name":"CallString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string CallString()","group":"Import","desc":"Calls the function and returns string. Return type must be a valid C string.","flags":[]},{"name":"CallString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"string CallString(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns string.","flags":[]},{"name":"CallString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"string CallString(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns string.","flags":[]},{"name":"CallString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"string CallString(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns string.","flags":[]},{"name":"CallString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"string CallString(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns string.","flags":[]},{"name":"CallString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"string CallString(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns string.","flags":[]},{"name":"CallString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"string CallString(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns string.","flags":[]},{"name":"CallString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"string CallString(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns string.","flags":[]},{"name":"CallString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"string CallString(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns string.","flags":[]},{"name":"CallString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"string CallString(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns string.","flags":[]},{"name":"CallWString","returntypeid":67108891,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[],"decl":"wstring CallWString()","group":"Import","desc":"Calls the function and returns wstring. Return type must be a valid wide C string.","flags":[]},{"name":"CallWString","returntypeid":67108891,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""}],"decl":"wstring CallWString(const ?&in)","group":"Import","desc":"Calls the function with 1 argument and returns wstring.","flags":[]},{"name":"CallWString","returntypeid":67108891,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"wstring CallWString(const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 2 arguments and returns wstring.","flags":[]},{"name":"CallWString","returntypeid":67108891,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"wstring CallWString(const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 3 arguments and returns wstring.","flags":[]},{"name":"CallWString","returntypeid":67108891,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"wstring CallWString(const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 4 arguments and returns wstring.","flags":[]},{"name":"CallWString","returntypeid":67108891,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"wstring CallWString(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 5 arguments and returns wstring.","flags":[]},{"name":"CallWString","returntypeid":67108891,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"wstring CallWString(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 6 arguments and returns wstring.","flags":[]},{"name":"CallWString","returntypeid":67108891,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"wstring CallWString(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 7 arguments and returns wstring.","flags":[]},{"name":"CallWString","returntypeid":67108891,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"wstring CallWString(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 8 arguments and returns wstring.","flags":[]},{"name":"CallWString","returntypeid":67108891,"returntypename":"wstring","returntypedecl":"wstring","returntypeflags":0,"args":[{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""},{"typedecl":"?","typeflags":5,"name":""}],"decl":"wstring CallWString(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)","group":"Import","desc":"Calls the function with 9 arguments and returns wstring.","flags":[]}],"props":[]},{"ns":"Import","id":67108954,"name":"Ref","group":"Import","desc":"A reference to a script variable.","flags":[],"behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1140850778,"returntypename":"Ref","returntypedecl":"Import::Ref@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"Import::Ref@ Ref(const string&in name)"}},{"type":3,"func":{"name":"$beh3","returntypeid":1140850778,"returntypename":"Ref","returntypedecl":"Import::Ref@","returntypeflags":0,"args":[{"typedecl":"?","typeflags":1,"name":"obj"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"Import::Ref@ Ref(?&in obj, const string&in name)"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[],"props":[]},{"ns":"IO","id":67108957,"name":"File","group":"IO","desc":"Manages a file reading or writing stream.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~File()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"File()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"File(const string&in filename)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"},{"typeid":92,"typename":"FileMode","typedecl":"IO::FileMode","typeflags":0,"name":"mode"}],"decl":"File(const string&in filename, IO::FileMode mode)"}}],"methods":[{"name":"Open","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"},{"typeid":92,"typename":"FileMode","typedecl":"IO::FileMode","typeflags":0,"name":"mode"}],"decl":"void Open(const string&in filename, IO::FileMode mode)"},{"name":"Open","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":92,"typename":"FileMode","typedecl":"IO::FileMode","typeflags":0,"name":"mode"}],"decl":"void Open(IO::FileMode mode)"},{"name":"Close","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Close()"},{"name":"Size","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 Size()"},{"name":"EOF","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool EOF()"},{"name":"Flush","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Flush()"},{"name":"GetMode","returntypeid":92,"returntypename":"FileMode","returntypedecl":"IO::FileMode","returntypeflags":0,"args":[],"decl":"IO::FileMode GetMode()"},{"name":"SetPos","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"pos"}],"decl":"void SetPos(uint64 pos)"},{"name":"Pos","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 Pos()"},{"name":"Read","returntypeid":1140850743,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer@","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"size"}],"decl":"MemoryBuffer@ Read(uint64 size)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108919,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":5,"name":"buffer"}],"decl":"void Write(const MemoryBuffer&in buffer)"},{"name":"ReadLine","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ReadLine()"},{"name":"ReadToEnd","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ReadToEnd()"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint8","typeflags":5,"name":"i"}],"decl":"void Write(const uint8&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint16","typeflags":5,"name":"i"}],"decl":"void Write(const uint16&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint","typeflags":5,"name":"i"}],"decl":"void Write(const uint&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":5,"name":"i"}],"decl":"void Write(const uint64&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int8","typeflags":5,"name":"i"}],"decl":"void Write(const int8&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int16","typeflags":5,"name":"i"}],"decl":"void Write(const int16&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":5,"name":"i"}],"decl":"void Write(const int&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":5,"name":"i"}],"decl":"void Write(const int64&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"float","typeflags":5,"name":"i"}],"decl":"void Write(const float&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"double","typeflags":5,"name":"i"}],"decl":"void Write(const double&in i)"},{"name":"Write","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"}],"decl":"void Write(const string&in str)"},{"name":"WriteLine","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str","default":"\"\""}],"decl":"void WriteLine(const string&in str = \"\")"}],"props":[]},{"ns":"IO","id":67108958,"name":"FileSource","group":"IO","desc":"Manages a file reading stream from a file source, such as a plugin's zip or folder contents.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~FileSource()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"filename"}],"decl":"FileSource(const string&in filename)"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108958,"typename":"FileSource","typedecl":"IO::FileSource","typeflags":5,"name":""}],"decl":"FileSource(const IO::FileSource&in)"}}],"methods":[{"name":"Size","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 Size()"},{"name":"EOF","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool EOF()"},{"name":"SetPos","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"pos"}],"decl":"void SetPos(uint64 pos)"},{"name":"Pos","returntypedecl":"uint64","returntypeflags":0,"args":[],"decl":"uint64 Pos()"},{"name":"Read","returntypeid":1140850743,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer@","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":"size"}],"decl":"MemoryBuffer@ Read(uint64 size)"},{"name":"ReadLine","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ReadLine()"},{"name":"ReadToEnd","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string ReadToEnd()"}],"props":[]},{"ns":"Settings","id":67108959,"name":"Section","group":"Settings","desc":"Represents a section in the settings file.","flags":[],"behaviors":[],"methods":[{"name":"Clear","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Clear()"},{"name":"GetBool","returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"key"},{"typedecl":"bool","typeflags":0,"name":"def","default":"false"}],"decl":"bool GetBool(const string&in key, bool def = false)"},{"name":"GetInt","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"key"},{"typedecl":"int","typeflags":0,"name":"def","default":"0"}],"decl":"int GetInt(const string&in key, int def = 0)"},{"name":"GetFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"key"},{"typedecl":"float","typeflags":0,"name":"def","default":"0.0f"}],"decl":"float GetFloat(const string&in key, float def = 0.0f)"},{"name":"GetString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"key"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"def","default":"\"\""}],"decl":"string GetString(const string&in key, const string&in def = \"\")"},{"name":"SetBool","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"key"},{"typedecl":"bool","typeflags":0,"name":"def","default":"false"}],"decl":"void SetBool(const string&in key, bool def = false)"},{"name":"SetInt","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"key"},{"typedecl":"int","typeflags":0,"name":"def","default":"0"}],"decl":"void SetInt(const string&in key, int def = 0)"},{"name":"SetFloat","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"key"},{"typedecl":"float","typeflags":0,"name":"def","default":"0.0f"}],"decl":"void SetFloat(const string&in key, float def = 0.0f)"},{"name":"SetString","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"key"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"def","default":"\"\""}],"decl":"void SetString(const string&in key, const string&in def = \"\")"},{"name":"GetKeys","returntypeid":1342180699,"returntypename":"array","returntypedecl":"string[]@","returntypeflags":0,"args":[],"decl":"string[]@ GetKeys()"}],"props":[]},{"ns":"SQLite","id":67108960,"name":"Statement","group":"SQLite","desc":"A prepared SQLite statement and result set. Note that SQLite statements can be relatively IO-heavy depending on its use. Refer to the SQLite documentation for more information.","flags":[],"behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"Reset","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Reset()"},{"name":"Execute","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void Execute()"},{"name":"NextRow","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool NextRow()"},{"name":"GetQuery","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string GetQuery()"},{"name":"GetQueryExpanded","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string GetQueryExpanded()"},{"name":"GetColumnCount","returntypedecl":"int","returntypeflags":0,"args":[],"decl":"int GetColumnCount()"},{"name":"GetColumnName","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"}],"decl":"string GetColumnName(int index)"},{"name":"GetColumnFloat","returntypedecl":"float","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"float GetColumnFloat(const string&in name)"},{"name":"GetColumnDouble","returntypedecl":"double","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"double GetColumnDouble(const string&in name)"},{"name":"GetColumnInt","returntypedecl":"int","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"int GetColumnInt(const string&in name)"},{"name":"GetColumnInt64","returntypedecl":"int64","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"int64 GetColumnInt64(const string&in name)"},{"name":"GetColumnString","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"string GetColumnString(const string&in name)"},{"name":"GetColumnBuffer","returntypeid":1140850743,"returntypename":"MemoryBuffer","returntypedecl":"MemoryBuffer@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"name"}],"decl":"MemoryBuffer@ GetColumnBuffer(const string&in name)"},{"name":"Bind","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"},{"typedecl":"float","typeflags":0,"name":""}],"decl":"void Bind(int index, float)"},{"name":"Bind","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"},{"typedecl":"double","typeflags":0,"name":""}],"decl":"void Bind(int index, double)"},{"name":"Bind","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"},{"typedecl":"int64","typeflags":0,"name":""}],"decl":"void Bind(int index, int64)"},{"name":"Bind","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"void Bind(int index, const string&in)"},{"name":"Bind","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"index"},{"typeid":67108919,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":5,"name":""}],"decl":"void Bind(int index, const MemoryBuffer&in)"},{"name":"Bind","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"name"},{"typedecl":"float","typeflags":0,"name":""}],"decl":"void Bind(const string&in name, float)"},{"name":"Bind","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"name"},{"typedecl":"double","typeflags":0,"name":""}],"decl":"void Bind(const string&in name, double)"},{"name":"Bind","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"name"},{"typedecl":"int64","typeflags":0,"name":""}],"decl":"void Bind(const string&in name, int64)"},{"name":"Bind","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"name"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"void Bind(const string&in name, const string&in)"},{"name":"Bind","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"name"},{"typeid":67108919,"typename":"MemoryBuffer","typedecl":"MemoryBuffer","typeflags":5,"name":""}],"decl":"void Bind(const string&in name, const MemoryBuffer&in)"}],"props":[]},{"ns":"SQLite","id":67108961,"name":"Database","group":"SQLite","desc":"An SQLite database.","flags":[],"behaviors":[{"type":3,"func":{"name":"$beh3","returntypeid":1140850785,"returntypename":"Database","returntypedecl":"SQLite::Database@","returntypeflags":0,"args":[],"decl":"SQLite::Database@ Database()"}},{"type":3,"func":{"name":"$beh3","returntypeid":1140850785,"returntypename":"Database","returntypedecl":"SQLite::Database@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"path"}],"decl":"SQLite::Database@ Database(const string&in path)"}},{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"Execute","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"query"}],"decl":"void Execute(const string&in query)","group":"SQLite","desc":"Run a query directly against the database without binding any parameters or returning any rows.","flags":[]},{"name":"Prepare","returntypeid":1140850784,"returntypename":"Statement","returntypedecl":"SQLite::Statement@","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"query"}],"decl":"SQLite::Statement@ Prepare(const string&in query)","group":"SQLite","desc":"Prepare a query in the database. The query is not executed immediately.","flags":[]}],"props":[]},{"ns":"Discord","id":67108963,"name":"Status","group":"Discord","desc":"A Discord status update.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~Status()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"Status()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108963,"typename":"Status","typedecl":"Discord::Status","typeflags":5,"name":""}],"decl":"Status(const Discord::Status&in)"}}],"methods":[],"props":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"State"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"Details"},{"typedecl":"int64","typeflags":0,"name":"StartTimestamp"},{"typedecl":"int64","typeflags":0,"name":"EndTimestamp"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"LargeImageKey"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"LargeImageText"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"SmallImageKey"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"SmallImageText"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"PartyId"},{"typedecl":"int","typeflags":0,"name":"PartySize"},{"typedecl":"int","typeflags":0,"name":"PartyMax"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"MatchSecret"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"JoinSecret"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"SpectateSecret"}]},{"ns":"Discord","id":67108964,"name":"User","group":"Discord","desc":"Information about a user.","flags":[],"behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[],"props":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"ID"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"Name"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"Discriminator"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":0,"name":"Avatar"}]},{"ns":"nvg","id":67108965,"name":"Texture","group":"NanoVG","desc":"Represents a texture for the NanoVG API.","flags":[],"behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"GetSize","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetSize()","group":"NanoVG","desc":"Gets the size of the texture in pixels.","flags":[]}],"props":[]},{"ns":"nvg","id":67108967,"name":"Paint","group":"NanoVG","desc":"A paint style that can be used as a fill or a stroke.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~Paint()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"Paint()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108967,"typename":"Paint","typedecl":"nvg::Paint","typeflags":5,"name":""}],"decl":"Paint(const nvg::Paint&in)"}}],"methods":[{"name":"opAssign","returntypeid":67108967,"returntypename":"Paint","returntypedecl":"nvg::Paint","returntypeflags":3,"args":[{"typeid":67108967,"typename":"Paint","typedecl":"nvg::Paint","typeflags":5,"name":""}],"decl":"nvg::Paint& opAssign(const nvg::Paint&in)"}],"props":[]},{"ns":"UI","id":67108971,"name":"Texture","group":"UI","desc":"Represents a texture for the UI API.","flags":[],"behaviors":[{"type":5,"func":{"name":"$beh5","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh5()"}},{"type":6,"func":{"name":"$beh6","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void $beh6()"}}],"methods":[{"name":"GetSize","returntypeid":67108904,"returntypename":"vec2","returntypedecl":"vec2","returntypeflags":0,"args":[],"decl":"vec2 GetSize()","group":"UI","desc":"Gets the size of the texture in pixels.","flags":[]}],"props":[]},{"ns":"UI","id":67108972,"name":"Font","group":"UI","desc":"Represents a font for the UI API.","flags":[],"behaviors":[],"methods":[{"name":"get_FontSize","returntypedecl":"float","returntypeflags":0,"args":[],"decl":"float get_FontSize()","group":"UI","desc":"Gets the size of the font.","flags":[]}],"props":[]},{"ns":"UI","id":67108975,"name":"ListClipper","group":"UI","desc":"Helper class to manually clip large lists of items. To use this, create an instance on the stack. Call Begin, or pass the the total item count the constructor which will call Begin for you. Make a while loop with the condition `clipper.Step()`. Inside of the loop, make a for loop with `int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++`. Inside of the for loop, put whatever UI elements you need for the item at index i. Remember that all UI items in the list must be the same height for ListClipper to work.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~ListClipper()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"items_count","default":"-1"},{"typedecl":"float","typeflags":0,"name":"items_height","default":"-1.0f"}],"decl":"ListClipper(int items_count = -1, float items_height = -1.0f)"}}],"methods":[{"name":"Begin","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"items_count"},{"typedecl":"float","typeflags":0,"name":"items_height","default":"-1.0f"}],"decl":"void Begin(int items_count, float items_height = -1.0f)","group":"UI","desc":"","flags":[]},{"name":"Step","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool Step()","group":"UI","desc":"Call until it returns false. The DisplayStart/DisplayEnd fields will be set and you can process/draw those items.","flags":[]},{"name":"End","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void End()","group":"UI","desc":"Automatically called on the last call of Step() that returns false.","flags":[]}],"props":[{"typedecl":"int","typeflags":0,"name":"DisplayStart"},{"typedecl":"int","typeflags":0,"name":"DisplayEnd"},{"typedecl":"int","typeflags":0,"name":"ItemsCount"},{"typedecl":"float","typeflags":0,"name":"ItemsHeight"}]},{"ns":"UI","id":67109003,"name":"InputTextCallbackData","group":"UI","desc":"Callback data for text input widgets. Do not keep handles of this around!","flags":[],"behaviors":[],"methods":[{"name":"get_Text","returntypeid":67108890,"returntypename":"string","returntypedecl":"string","returntypeflags":0,"args":[],"decl":"string get_Text()"},{"name":"set_Text","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"text"}],"decl":"void set_Text(const string&in text)"},{"name":"DeleteChars","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"pos"},{"typedecl":"int","typeflags":0,"name":"bytes_count"}],"decl":"void DeleteChars(int pos, int bytes_count)"},{"name":"InsertChars","returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int","typeflags":0,"name":"pos"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"text"}],"decl":"void InsertChars(int pos, const string&in text)"},{"name":"SelectAll","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void SelectAll()"},{"name":"ClearSelection","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void ClearSelection()"},{"name":"HasSelection","returntypedecl":"bool","returntypeflags":0,"args":[],"decl":"bool HasSelection()"}],"props":[{"typeid":122,"typename":"InputTextFlags","typedecl":"UI::InputTextFlags","typeflags":0,"name":"EventFlag"},{"typeid":122,"typename":"InputTextFlags","typedecl":"UI::InputTextFlags","typeflags":0,"name":"Flags"},{"typedecl":"uint","typeflags":0,"name":"EventChar"},{"typeid":134,"typename":"Key","typedecl":"UI::Key","typeflags":0,"name":"EventKey"},{"typedecl":"int","typeflags":0,"name":"TextLength"},{"typedecl":"int","typeflags":0,"name":"CursorPos"},{"typedecl":"int","typeflags":0,"name":"SelectionStart"},{"typedecl":"int","typeflags":0,"name":"SelectionEnd"}]},{"ns":"UI","id":67109005,"name":"TableColumnSortSpecs","group":"UI","desc":"Sorting specification for a single column of a table.","flags":[],"behaviors":[{"type":2,"func":{"name":"$beh2","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"~TableColumnSortSpecs()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"TableColumnSortSpecs()"}},{"type":0,"func":{"name":"$beh0","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67109005,"typename":"TableColumnSortSpecs","typedecl":"UI::TableColumnSortSpecs","typeflags":5,"name":""}],"decl":"TableColumnSortSpecs(const UI::TableColumnSortSpecs&in)"}}],"methods":[{"name":"get_SortDirection","returntypeid":132,"returntypename":"SortDirection","returntypedecl":"UI::SortDirection","returntypeflags":0,"args":[],"decl":"UI::SortDirection get_SortDirection()"}],"props":[{"typedecl":"uint","typeflags":0,"name":"ColumnUserID"},{"typedecl":"int16","typeflags":0,"name":"ColumnIndex"},{"typedecl":"int16","typeflags":0,"name":"SortOrder"}]},{"ns":"UI","id":67109006,"name":"TableSortSpecs","group":"UI","desc":"Sorting information for tables. Do not keep this object around! Use the Dirty property to see if the sorting changed, then set it to false when you've sorted your list.","flags":[],"behaviors":[],"methods":[{"name":"get_Specs","returntypeid":1342180715,"returntypename":"array","returntypedecl":"UI::TableColumnSortSpecs[]@","returntypeflags":0,"args":[],"decl":"UI::TableColumnSortSpecs[]@ get_Specs()"}],"props":[{"typedecl":"bool","typeflags":0,"name":"Dirty"}]},{"ns":"UI","id":67109030,"name":"DrawList","group":"UI","desc":"A drawing list for a layer on the UI.","flags":[],"behaviors":[],"methods":[{"name":"PushClipRect","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"rect"},{"typedecl":"bool","typeflags":0,"name":"intersectWithCurrentClipRect","default":"false"}],"decl":"void PushClipRect(const vec4&in rect, bool intersectWithCurrentClipRect = false)","group":"UI","desc":"Pushes a scissoring rectangle to the stack.","flags":[]},{"name":"PushClipRectFullScreen","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void PushClipRectFullScreen()","group":"UI","desc":"Pushes a fullscreen scissoring rectangle to the stack.","flags":[]},{"name":"PopClipRect","returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void PopClipRect()","group":"UI","desc":"Pops a previously pushed scissoring rectangle to the stack.","flags":[]},{"name":"AddRect","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"rect"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"float","typeflags":0,"name":"rounding","default":"0.0f"},{"typedecl":"float","typeflags":0,"name":"thickness","default":"1.0f"}],"decl":"void AddRect(const vec4&in rect, const vec4&in color, float rounding = 0.0f, float thickness = 1.0f)","group":"UI","desc":"Draws a border rectangle.","flags":[]},{"name":"AddRectFilled","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"rect"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"float","typeflags":0,"name":"rounding","default":"0.0f"}],"decl":"void AddRectFilled(const vec4&in rect, const vec4&in color, float rounding = 0.0f)","group":"UI","desc":"Draws a filled rectangle.","flags":[]},{"name":"AddRectFilledMultiColor","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"rect"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"colUL"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"colUR"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"colBL"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"colBR"}],"decl":"void AddRectFilledMultiColor(const vec4&in rect, const vec4&in colUL, const vec4&in colUR, const vec4&in colBL, const vec4&in colBR)","group":"UI","desc":"Draws a filled rectangle.","flags":[]},{"name":"AddQuad","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"topLeft"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"topRight"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"bottomRight"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"bottomLeft"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"float","typeflags":0,"name":"thickness","default":"1.0f"}],"decl":"void AddQuad(const vec2&in topLeft, const vec2&in topRight, const vec2&in bottomRight, const vec2&in bottomLeft, const vec4&in color, float thickness = 1.0f)","group":"UI","desc":"Draws a border quad.","flags":[]},{"name":"AddQuadFilled","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"topLeft"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"topRight"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"bottomRight"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"bottomLeft"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"}],"decl":"void AddQuadFilled(const vec2&in topLeft, const vec2&in topRight, const vec2&in bottomRight, const vec2&in bottomLeft, const vec4&in color)","group":"UI","desc":"Draws a filled quad.","flags":[]},{"name":"AddTriangle","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"p1"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"p2"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"p3"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"float","typeflags":0,"name":"thickness","default":"1.0f"}],"decl":"void AddTriangle(const vec2&in p1, const vec2&in p2, const vec2&in p3, const vec4&in color, float thickness = 1.0f)","group":"UI","desc":"Draws a border triangle.","flags":[]},{"name":"AddQuadFilled","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"p1"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"p2"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"p3"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"}],"decl":"void AddQuadFilled(const vec2&in p1, const vec2&in p2, const vec2&in p3, const vec4&in color)","group":"UI","desc":"Draws a filled triangle.","flags":[]},{"name":"AddCircle","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typedecl":"float","typeflags":0,"name":"radius"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"int","typeflags":0,"name":"segments","default":"0"},{"typedecl":"float","typeflags":0,"name":"thickness","default":"1.0f"}],"decl":"void AddCircle(const vec2&in pos, float radius, const vec4&in color, int segments = 0, float thickness = 1.0f)","group":"UI","desc":"Draws a border circle.","flags":[]},{"name":"AddCircleFilled","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typedecl":"float","typeflags":0,"name":"radius"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"int","typeflags":0,"name":"segments","default":"0"}],"decl":"void AddCircleFilled(const vec2&in pos, float radius, const vec4&in color, int segments = 0)","group":"UI","desc":"Draws a filled circle.","flags":[]},{"name":"AddNgon","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typedecl":"float","typeflags":0,"name":"radius"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"int","typeflags":0,"name":"segments"},{"typedecl":"float","typeflags":0,"name":"thickness","default":"1.0f"}],"decl":"void AddNgon(const vec2&in pos, float radius, const vec4&in color, int segments, float thickness = 1.0f)","group":"UI","desc":"Draws a border N-gon.","flags":[]},{"name":"AddNgonFilled","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typedecl":"float","typeflags":0,"name":"radius"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"int","typeflags":0,"name":"segments"}],"decl":"void AddNgonFilled(const vec2&in pos, float radius, const vec4&in color, int segments)","group":"UI","desc":"Draws a filled N-gon.","flags":[]},{"name":"AddLine","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"a"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"b"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"float","typeflags":0,"name":"thickness","default":"1.0f"}],"decl":"void AddLine(const vec2&in a, const vec2&in b, const vec4&in color, float thickness = 1.0f)","group":"UI","desc":"Draws a line.","flags":[]},{"name":"AddBezierCubic","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"p1"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"p2"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"p3"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"p4"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"float","typeflags":0,"name":"thickness","default":"1.0f"},{"typedecl":"int","typeflags":0,"name":"segments","default":"0"}],"decl":"void AddBezierCubic(const vec2&in p1, const vec2&in p2, const vec2&in p3, const vec2&in p4, const vec4&in color, float thickness = 1.0f, int segments = 0)","group":"UI","desc":"Draws a line following a cubic bezier curve.","flags":[]},{"name":"AddBezierQuadratic","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"p1"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"p2"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"p3"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typedecl":"float","typeflags":0,"name":"thickness","default":"1.0f"},{"typedecl":"int","typeflags":0,"name":"segments","default":"0"}],"decl":"void AddBezierQuadratic(const vec2&in p1, const vec2&in p2, const vec2&in p3, const vec4&in color, float thickness = 1.0f, int segments = 0)","group":"UI","desc":"Draws a line following a quadratic bezier curve.","flags":[]},{"name":"AddText","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"color"},{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":"str"},{"typeid":1140850796,"typename":"Font","typedecl":"UI::Font@","typeflags":0,"name":"font","default":"null"},{"typedecl":"float","typeflags":0,"name":"size","default":"0.0f"},{"typedecl":"float","typeflags":0,"name":"wrapWidth","default":"0.0f"}],"decl":"void AddText(const vec2&in pos, const vec4&in color, const string&in str, UI::Font@ font = null, float size = 0.0f, float wrapWidth = 0.0f)","group":"UI","desc":"Draws a text.","flags":[]},{"name":"AddImage","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850795,"typename":"Texture","typedecl":"UI::Texture@","typeflags":0,"name":"texture"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"}],"decl":"void AddImage(UI::Texture@ texture, const vec2&in pos)","group":"UI","desc":"Draws a texture.","flags":[]},{"name":"AddImage","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850795,"typename":"Texture","typedecl":"UI::Texture@","typeflags":0,"name":"texture"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"}],"decl":"void AddImage(UI::Texture@ texture, const vec2&in pos, const vec2&in size)","group":"UI","desc":"Draws a texture scaled to a specific size.","flags":[]},{"name":"AddImage","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850795,"typename":"Texture","typedecl":"UI::Texture@","typeflags":0,"name":"texture"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"uint","typeflags":0,"name":"color"}],"decl":"void AddImage(UI::Texture@ texture, const vec2&in pos, const vec2&in size, uint color)","group":"UI","desc":"Draws a texture scaled to a specific size and blend color (in 0xRRGGBBAA hexadecimal format).","flags":[]},{"name":"AddImage","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850795,"typename":"Texture","typedecl":"UI::Texture@","typeflags":0,"name":"texture"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"uint","typeflags":0,"name":"color"},{"typedecl":"float","typeflags":0,"name":"rotation"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"origin","default":"vec2(0, 0)"}],"decl":"void AddImage(UI::Texture@ texture, const vec2&in pos, const vec2&in size, uint color, float rotation, const vec2&in origin = vec2(0, 0))","group":"UI","desc":"Draws a texture scaled to a specific size, blend color (in 0xRRGGBBAA hexadecimal format), and rotation around an origin.","flags":[]},{"name":"AddImage","returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850795,"typename":"Texture","typedecl":"UI::Texture@","typeflags":0,"name":"texture"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"pos"},{"typeid":67108904,"typename":"vec2","typedecl":"vec2","typeflags":5,"name":"size"},{"typedecl":"uint","typeflags":0,"name":"color"},{"typeid":67108906,"typename":"vec4","typedecl":"vec4","typeflags":5,"name":"uv"}],"decl":"void AddImage(UI::Texture@ texture, const vec2&in pos, const vec2&in size, uint color, const vec4&in uv)","group":"UI","desc":"Draws a texture with the given UV pixel offset.","flags":[]}],"props":[]}],"enums":[{"ns":"Json","id":58,"name":"Type","group":"Json","desc":"Json value type that a Value might be.","flags":[],"values":{"Unknown":{"v":0},"String":{"v":1},"Number":{"v":2},"Object":{"v":3},"Array":{"v":4},"Boolean":{"v":5},"Null":{"v":6}}},{"ns":"Net","id":59,"name":"HttpMethod","group":"Net","desc":"","flags":[],"values":{"Get":{"v":0},"Post":{"v":1},"Head":{"v":2},"Put":{"v":3},"Delete":{"v":4},"Patch":{"v":5}}},{"ns":"Meta","id":65,"name":"TextEditorType","group":"Meta","desc":"Type of text editor.","flags":[],"values":{"None":{"v":0},"NotepadPlusPlus":{"v":1},"SublimeText":{"v":2},"VSCode":{"v":3},"VSCodium":{"v":4},"Vim":{"v":5},"Neovim":{"v":6},"Helix":{"v":7}}},{"ns":"Meta","id":66,"name":"PluginType","group":"Meta","desc":"The type of plugin.","flags":[],"values":{"Unknown":{"v":0},"Legacy":{"d":"Plugin that is loaded from the legacy Scripts folder.","v":1},"Folder":{"d":"Plugin that is loaded from a plain plugin folder.","v":2},"Zip":{"d":"Plugin that is loaded as a zip (.op) file.","v":3}}},{"ns":"Meta","id":67,"name":"PluginSource","group":"Meta","desc":"Where this plugin is loaded from.","flags":[],"values":{"Unknown":{"v":0},"ApplicationFolder":{"d":"Openplanet's application directory.","v":1},"UserFolder":{"d":"The user's own Openplanet user folder.","v":2}}},{"ns":"Meta","id":68,"name":"PluginSettingType","group":"Meta","desc":"The type of this setting variable.","flags":[],"values":{"Unknown":{"v":0},"Bool":{"v":1},"Enum":{"v":2},"Float":{"v":3},"Double":{"v":4},"Int8":{"v":5},"Int16":{"v":6},"Int32":{"v":7},"String":{"v":8},"Vec2":{"v":9},"Vec3":{"v":10},"Vec4":{"v":11},"Uint8":{"v":12},"Uint16":{"v":13},"Uint32":{"v":14}}},{"ns":"Meta","id":74,"name":"RunContext","group":"Meta","desc":"Execution context for a coroutine.","flags":[],"values":{"Main":{"d":"The main Openplanet script loop.","v":0},"BeforeScripts":{"d":"Before the game executes Maniascript.","v":1},"MainLoop":{"d":"During script execution in the game's loop.","v":2},"GameLoop":{"d":"During script execution in the game app's loop.","v":3},"AfterMainLoop":{"v":4},"NetworkAfterMainLoop":{"v":5},"AfterScripts":{"d":"After the game executes Maniascript.","v":6},"UpdateSceneEngine":{"v":7}}},{"ns":"Dev","id":76,"name":"PushRegisters","group":"Dev","desc":"","flags":[],"values":{"Basic":{"v":0},"SSE":{"v":1}}},{"ns":"Regex","id":81,"name":"Flags","group":"Regex","desc":"Flags that can be passed to regular expression functions.","flags":[],"values":{"None":{"v":0},"CaseInsensitive":{"v":256},"NoSubs":{"v":512},"Optimize":{"v":1024},"Collate":{"v":2048},"ECMAScript":{"v":1},"Basic":{"v":2},"Extended":{"v":4},"Awk":{"v":8},"Grep":{"v":16},"Egrep":{"v":32}}},{"ns":"Import","id":91,"name":"CallConvention","group":"Import","desc":"The calling convention to use for this call on 32 bit builds. Convention options don't matter on 64 bit builds.","flags":[],"values":{"cdecl":{"v":0},"stdcall":{"v":1}}},{"ns":"IO","id":92,"name":"FileMode","group":"IO","desc":"The file mode to put the file stream in.","flags":[],"values":{"None":{"v":0},"Read":{"v":1},"Write":{"v":2},"Append":{"v":3}}},{"ns":"Discord","id":98,"name":"Response","group":"Discord","desc":"The response code for Discord::Respond().","flags":[],"values":{"No":{"v":0},"Yes":{"v":1},"Ignore":{"v":2}}},{"ns":"nvg","id":102,"name":"TextureFlags","group":"NanoVG","desc":"Flags to use when loading NanoVG textures.","flags":[],"values":{"None":{"v":0},"GenerateMipmaps":{"v":1},"RepeatX":{"v":2},"RepeatY":{"v":4},"FlipY":{"v":8},"Premultiplied":{"v":16},"Nearest":{"v":32}}},{"ns":"nvg","id":104,"name":"LineCapType","group":"NanoVG","desc":"","flags":[],"values":{"Butt":{"v":0},"Round":{"v":1},"Square":{"v":2},"Bevel":{"v":3},"Miter":{"v":4}}},{"ns":"nvg","id":105,"name":"Winding","group":"NanoVG","desc":"","flags":[],"values":{"CCW":{"v":1},"CW":{"v":2}}},{"ns":"nvg","id":106,"name":"Align","group":"NanoVG","desc":"","flags":[],"values":{"Left":{"v":1},"Center":{"v":2},"Right":{"v":4},"Top":{"v":8},"Middle":{"v":16},"Bottom":{"v":32},"Baseline":{"v":64}}},{"ns":"UI","id":109,"name":"InputBlocking","group":"UI","desc":"How to handle inputs going forward.","flags":[],"values":{"DoNothing":{"v":0},"Block":{"v":1}}},{"ns":"UI","id":112,"name":"WindowFlags","group":"UI","desc":"Window flags that can be passed to UI::Begin().","flags":[],"values":{"None":{"v":0},"NoTitleBar":{"v":1},"NoResize":{"v":2},"NoMove":{"v":4},"NoScrollbar":{"v":8},"NoScrollWithMouse":{"v":16},"NoCollapse":{"v":32},"AlwaysAutoResize":{"v":64},"NoSavedSettings":{"v":256},"MenuBar":{"v":1024},"HorizontalScrollbar":{"v":2048},"NoFocusOnAppearing":{"v":4096},"NoBringToFrontOnFocus":{"v":8192},"AlwaysVerticalScrollbar":{"v":16384},"AlwaysHorizontalScrollbar":{"v":32768},"NoNavInputs":{"v":65536},"NoNavFocus":{"v":131072},"UnsavedDocument":{"v":262144},"NoDocking":{"v":524288},"NoNav":{"v":196608},"NoDecoration":{"v":43},"NoInputs":{"v":197120}}},{"ns":"UI","id":113,"name":"ChildFlags","group":"UI","desc":"Child flags that can be passed to UI::BeginChild().","flags":[],"values":{"None":{"v":0},"Border":{"v":1},"AlwaysUseWindowPadding":{"v":2},"ResizeX":{"v":4},"ResizeY":{"v":8},"AutoResizeX":{"v":16},"AutoResizeY":{"v":32},"AlwaysAutoResize":{"v":64},"FrameStyle":{"v":128},"NavFlattened":{"v":256}}},{"ns":"UI","id":114,"name":"ButtonFlags","group":"UI","desc":"Button flags that can be passed to UI::InvisibleButton().","flags":[],"values":{"None":{"v":0},"MouseButtonLeft":{"v":1},"MouseButtonRight":{"v":2},"MouseButtonMiddle":{"v":4}}},{"ns":"UI","id":115,"name":"Col","group":"UI","desc":"Color variables that can be passed to UI::PushStyleColor().","flags":[],"values":{"Text":{"v":0},"TextDisabled":{"v":1},"WindowBg":{"v":2},"ChildBg":{"v":3},"PopupBg":{"v":4},"Border":{"v":5},"BorderShadow":{"v":6},"FrameBg":{"v":7},"FrameBgHovered":{"v":8},"FrameBgActive":{"v":9},"TitleBg":{"v":10},"TitleBgActive":{"v":11},"TitleBgCollapsed":{"v":12},"MenuBarBg":{"v":13},"ScrollbarBg":{"v":14},"ScrollbarGrab":{"v":15},"ScrollbarGrabHovered":{"v":16},"ScrollbarGrabActive":{"v":17},"CheckMark":{"v":18},"SliderGrab":{"v":19},"SliderGrabActive":{"v":20},"Button":{"v":21},"ButtonHovered":{"v":22},"ButtonActive":{"v":23},"Header":{"v":24},"HeaderHovered":{"v":25},"HeaderActive":{"v":26},"Separator":{"v":27},"SeparatorHovered":{"v":28},"SeparatorActive":{"v":29},"ResizeGrip":{"v":30},"ResizeGripHovered":{"v":31},"ResizeGripActive":{"v":32},"TabActive":{"v":35},"TabUnfocused":{"v":37},"TabUnfocusedActive":{"v":38},"Tab":{"v":34},"TabHovered":{"v":33},"TabSelected":{"v":35},"TabSelectedOverline":{"v":36},"TabDimmed":{"v":37},"TabDimmedSelected":{"v":38},"TabDimmedSelectedOverline":{"v":39},"DockingPreview":{"v":40},"DockingEmptyBg":{"v":41},"PlotLines":{"v":42},"PlotLinesHovered":{"v":43},"PlotHistogram":{"v":44},"PlotHistogramHovered":{"v":45},"TableHeaderBg":{"v":46},"TableBorderStrong":{"v":47},"TableBorderLight":{"v":48},"TableRowBg":{"v":49},"TableRowBgAlt":{"v":50},"TextLink":{"v":51},"TextSelectedBg":{"v":52},"DragDropTarget":{"v":53},"NavHighlight":{"v":54},"NavWindowingHighlight":{"v":55},"NavWindowingDimBg":{"v":56},"ModalWindowDimBg":{"v":57}}},{"ns":"UI","id":116,"name":"StyleVar","group":"UI","desc":"Style variables that can be passed to UI::PushStyleVar().","flags":[],"values":{"Alpha":{"v":0},"DisabledAlpha":{"v":1},"WindowPadding":{"v":2},"WindowRounding":{"v":3},"WindowBorderSize":{"v":4},"WindowMinSize":{"v":5},"WindowTitleAlign":{"v":6},"ChildRounding":{"v":7},"ChildBorderSize":{"v":8},"PopupRounding":{"v":9},"PopupBorderSize":{"v":10},"FramePadding":{"v":11},"FrameRounding":{"v":12},"FrameBorderSize":{"v":13},"ItemSpacing":{"v":14},"ItemInnerSpacing":{"v":15},"IndentSpacing":{"v":16},"CellPadding":{"v":17},"ScrollbarSize":{"v":18},"ScrollbarRounding":{"v":19},"GrabMinSize":{"v":20},"GrabRounding":{"v":21},"TabRounding":{"v":22},"TabBorderSize":{"v":23},"TabBarBorderSize":{"v":24},"TabBarOverlineSize":{"v":25},"TableAngledHeadersAngle":{"v":26},"TableAngledHeadersTextAlign":{"v":27},"ButtonTextAlign":{"v":28},"SelectableTextAlign":{"v":29},"SeparatorTextBorderSize":{"v":30},"SeparatorTextAlign":{"v":31},"SeparatorTextPadding":{"v":32},"DockingSeparatorSize":{"v":33}}},{"ns":"UI","id":117,"name":"FocusedFlags","group":"UI","desc":"Flags for UI::IsWindowFocused().","flags":[],"values":{"None":{"v":0},"ChildWindows":{"v":1},"RootWindow":{"v":2},"AnyWindow":{"v":4},"RootAndChildWindows":{"v":3}}},{"ns":"UI","id":118,"name":"ComboFlags","group":"UI","desc":"Combo flags that can be passed to UI::BeginCombo().","flags":[],"values":{"None":{"v":0},"PopupAlignLeft":{"v":1},"HeightSmall":{"v":2},"HeightRegular":{"v":4},"HeightLarge":{"v":8},"HeightLargest":{"v":16},"NoArrowButton":{"v":32},"NoPreview":{"v":64}}},{"ns":"UI","id":119,"name":"SelectableFlags","group":"UI","desc":"Selectable flags that can be passed to UI::Selectable().","flags":[],"values":{"None":{"v":0},"NoAutoClosePopups":{"v":1},"SpanAllColumns":{"v":2},"AllowDoubleClick":{"v":4},"Disabled":{"v":8},"AllowOverlap":{"v":16}}},{"ns":"UI","id":120,"name":"TreeNodeFlags","group":"UI","desc":"Flags that can be passed to UI::TreeNode().","flags":[],"values":{"None":{"v":0},"Selected":{"v":1},"Framed":{"v":2},"AllowOverlap":{"v":4},"NoTreePushOnOpen":{"v":8},"NoAutoOpenOnLog":{"v":16},"DefaultOpen":{"v":32},"OpenOnDoubleClick":{"v":64},"OpenOnArrow":{"v":128},"Leaf":{"v":256},"Bullet":{"v":512},"FramePadding":{"v":1024},"SpanAvailWidth":{"v":2048},"SpanFullWidth":{"v":4096},"SpanTextWidth":{"v":8192},"SpanAllColumns":{"v":16384},"NavLeftJumpsBackHere":{"v":32768},"CollapsingHeader":{"v":26}}},{"ns":"UI","id":121,"name":"ItemFlags","group":"UI","desc":"Flags that can be passed to UI::PushItemFlag().","flags":[],"values":{"None":{"v":0},"NoTabStop":{"d":"Disable keyboard tabbing. This is a \"lighter\" version of UI::ItemFlags::NoNav.","v":1},"NoNav":{"d":"Disable any form of focusing (keyboard/gamepad directional navigation and SetKeyboardFocusHere() calls).","v":2},"NoNavDefaultFocus":{"d":"Disable item being a candidate for default focus (e.g. used by title bar items).","v":4},"ButtonRepeat":{"d":"Any button-like behavior will have repeat mode enabled (based on io.KeyRepeatDelay and io.KeyRepeatRate values). Note that you can also call IsItemActive() after any button to tell if it is being held.","v":8},"AutoClosePopups":{"d":"MenuItem()/Selectable() automatically close their parent popup window.","v":16}}},{"ns":"UI","id":122,"name":"InputTextFlags","group":"UI","desc":"Flags that can be passed to UI::InputText().","flags":[],"values":{"None":{"v":0},"CharsDecimal":{"d":"Allow 0123456789.+-*/","v":1},"CharsHexadecimal":{"d":"Allow 0123456789ABCDEFabcdef","v":2},"CharsScientific":{"d":"Allow 0123456789.+-*/eE (Scientific notation input)","v":4},"CharsUppercase":{"d":"Turn a..z into A..Z","v":8},"CharsNoBlank":{"d":"Filter out spaces, tabs","v":16},"AllowTabInput":{"d":"Pressing TAB input a '\t' character into the text field","v":32},"EnterReturnsTrue":{"d":"Return 'true' when Enter is pressed (as opposed to every time the value was modified). Consider looking at the IsItemDeactivatedAfterEdit() function.","v":64},"EscapeClearsAll":{"d":"Escape key clears content if not empty, and deactivate otherwise (contrast to default behavior of Escape to revert)","v":128},"CtrlEnterForNewLine":{"d":"In multi-line mode, validate with Enter, add new line with Ctrl+Enter (default is opposite: validate with Ctrl+Enter, add line with Enter).","v":256},"ReadOnly":{"d":"Read-only mode","v":512},"Password":{"d":"Password mode, display all characters as '*', disable copy","v":1024},"AlwaysOverwrite":{"d":"Overwrite mode","v":2048},"AutoSelectAll":{"d":"Select entire text when first taking mouse focus","v":4096},"ParseEmptyRefVal":{"d":"InputFloat(), InputInt(), InputScalar() etc. only: parse empty string as zero value.","v":8192},"DisplayEmptyRefVal":{"d":"InputFloat(), InputInt(), InputScalar() etc. only: when value is zero, do not display it. Generally used with ImGuiInputTextFlags_ParseEmptyRefVal.","v":16384},"NoHorizontalScroll":{"d":"Disable following the cursor horizontally","v":32768},"NoUndoRedo":{"d":"Disable undo/redo. Note that input text owns the text data while active, if you want to provide your own undo/redo stack you need e.g. to call ClearActiveID().","v":65536},"CallbackCompletion":{"d":"Callback on pressing TAB (for completion handling)","v":131072},"CallbackHistory":{"d":"Callback on pressing Up/Down arrows (for history handling)","v":262144},"CallbackAlways":{"d":"Callback on each iteration. User code may query cursor position, modify text buffer.","v":524288},"CallbackCharFilter":{"d":"Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard.","v":1048576}}},{"ns":"UI","id":123,"name":"SliderFlags","group":"UI","desc":"Flags that can be passed to UI::Slider*().","flags":[],"values":{"None":{"v":0},"AlwaysClamp":{"d":"Clamp value to min/max bounds when input manually with CTRL+Click. By default CTRL+Click allows going out of bounds.","v":16},"Logarithmic":{"d":"Make the widget logarithmic (linear otherwise). Consider using ImGuiSliderFlags_NoRoundToFormat with this if using a format-string with small amount of digits.","v":32},"NoRoundToFormat":{"d":"Disable rounding underlying value to match precision of the display format string (e.g. %.3f values are rounded to those 3 digits)","v":64},"NoInput":{"d":"Disable CTRL+Click or Enter key allowing to input text directly into the widget","v":128},"WrapAround":{"d":"Enable wrapping around from max to min and from min to max (only supported by DragXXX() functions for now.)","v":256}}},{"ns":"UI","id":124,"name":"ColorEditFlags","group":"UI","desc":"Flags that can be passed to UI::InputColor*().","flags":[],"values":{"None":{"v":0},"NoAlpha":{"d":"ColorEdit, ColorPicker, ColorButton: ignore Alpha component (will only read 3 components from the input pointer).","v":2},"NoPicker":{"d":"ColorEdit: disable picker when clicking on color square.","v":4},"NoOptions":{"d":"ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.","v":8},"NoSmallPreview":{"d":"ColorEdit, ColorPicker: disable color square preview next to the inputs. (e.g. to show only the inputs)","v":16},"NoInputs":{"d":"ColorEdit, ColorPicker: disable inputs sliders/text widgets (e.g. to show only the small preview color square).","v":32},"NoTooltip":{"d":"ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.","v":64},"NoLabel":{"d":"ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker).","v":128},"NoSidePreview":{"d":"ColorPicker: disable bigger color preview on right side of the picker, use small color square preview instead.","v":256},"NoDragDrop":{"d":"ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.","v":512},"NoBorder":{"d":"ColorButton: disable border (which is enforced by default)","v":1024},"AlphaBar":{"d":"ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.","v":65536},"AlphaPreview":{"d":"ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque.","v":131072},"AlphaPreviewHalf":{"d":"ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard, instead of opaque.","v":262144},"HDR":{"d":"(WIP) ColorEdit: Currently only disable 0.0f..1.0f limits in RGBA edition (note: you probably want to use ImGuiColorEditFlags_Float flag as well).","v":524288},"DisplayRGB":{"d":"ColorEdit: override _display_ type among RGB/HSV/Hex. ColorPicker: select any combination using one or more of RGB/HSV/Hex.","v":1048576},"DisplayHSV":{"v":2097152},"DisplayHex":{"v":4194304},"Uint8":{"d":"ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.","v":8388608},"Float":{"d":"ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0f..1.0f floats instead of 0..255 integers. No round-trip of value via integers.","v":16777216},"PickerHueBar":{"d":"ColorPicker: bar for Hue, rectangle for Sat/Value.","v":33554432},"PickerHueWheel":{"d":"ColorPicker: wheel for Hue, triangle for Sat/Value.","v":67108864},"InputRGB":{"d":"ColorEdit, ColorPicker: input and output data in RGB format.","v":134217728},"InputHSV":{"d":"ColorEdit, ColorPicker: input and output data in HSV format.","v":268435456}}},{"ns":"UI","id":126,"name":"TableFlags","group":"UI","desc":"Flags that can be passed to UI::BeginTable().","flags":[],"values":{"None":{"v":0},"Resizable":{"v":1},"Reorderable":{"v":2},"Hideable":{"v":4},"Sortable":{"v":8},"NoSavedSettings":{"v":16},"ContextMenuInBody":{"v":32},"RowBg":{"v":64},"BordersInnerH":{"v":128},"BordersOuterH":{"v":256},"BordersInnerV":{"v":512},"BordersOuterV":{"v":1024},"BordersH":{"v":384},"BordersV":{"v":1536},"BordersInner":{"v":640},"BordersOuter":{"v":1280},"Borders":{"v":1920},"NoBordersInBody":{"v":2048},"NoBordersInBodyUntilResize":{"v":4096},"SizingFixedFit":{"v":8192},"SizingFixedSame":{"v":16384},"SizingStretchProp":{"v":24576},"SizingStretchSame":{"v":32768},"NoHostExtendX":{"v":65536},"NoHostExtendY":{"v":131072},"NoKeepColumnsVisible":{"v":262144},"PreciseWidths":{"v":524288},"NoClip":{"v":1048576},"PadOuterX":{"v":2097152},"NoPadOuterX":{"v":4194304},"NoPadInnerX":{"v":8388608},"ScrollX":{"v":16777216},"ScrollY":{"v":33554432},"SortMulti":{"v":67108864},"SortTristate":{"v":134217728}}},{"ns":"UI","id":127,"name":"TableRowFlags","group":"UI","desc":"Flags that can be passed to UI::TableNextRow().","flags":[],"values":{"None":{"v":0},"Headers":{"v":1}}},{"ns":"UI","id":128,"name":"TableColumnFlags","group":"UI","desc":"Flags that can be passed to UI::TableSetupColumn().","flags":[],"values":{"None":{"v":0},"DefaultHide":{"v":2},"DefaultSort":{"v":4},"WidthStretch":{"v":8},"WidthFixed":{"v":16},"NoResize":{"v":32},"NoReorder":{"v":64},"NoHide":{"v":128},"NoClip":{"v":256},"NoSort":{"v":512},"NoSortAscending":{"v":1024},"NoSortDescending":{"v":2048},"NoHeaderWidth":{"v":8192},"PreferSortAscending":{"v":16384},"PreferSortDescending":{"v":32768},"IndentEnable":{"v":65536},"IndentDisable":{"v":131072},"IsEnabled":{"v":16777216},"IsVisible":{"v":33554432},"IsSorted":{"v":67108864},"IsHovered":{"v":134217728}}},{"ns":"UI","id":129,"name":"TableBgTarget","group":"UI","desc":"Background colors are rendering in 3 layers: Layer 0: draw with RowBg0 color if set, otherwise draw with ColumnBg0 if set. Layer 1: draw with RowBg1 color if set, otherwise draw with ColumnBg1 if set. Layer 2: draw with CellBg color if set. The purpose of the two row/columns layers is to let you decide if a background color changes should override or blend with the existing color. When using UI::TableFlags::RowBg on the table, each row has the RowBg0 color automatically set for odd/even rows. If you set the color of RowBg0 target, your color will override the existing RowBg0 color. If you set the color of RowBg1 or ColumnBg1 target, your color will blend over the RowBg0 color.","flags":[],"values":{"None":{"v":0},"RowBg0":{"v":1},"RowBg1":{"v":2},"CellBg":{"v":3}}},{"ns":"UI","id":130,"name":"TabBarFlags","group":"UI","desc":"Flags that can be passed to UI::BeginTab().","flags":[],"values":{"None":{"v":0},"Reorderable":{"v":1},"AutoSelectNewTabs":{"v":2},"TabListPopupButton":{"v":4},"NoCloseWithMiddleMouseButton":{"v":8},"NoTabListScrollingButtons":{"v":16},"NoTooltip":{"v":32},"DrawSelectedOverline":{"v":64},"FittingPolicyResizeDown":{"v":128},"FittingPolicyScroll":{"v":256}}},{"ns":"UI","id":131,"name":"TabItemFlags","group":"UI","desc":"Flags that can be passed to UI::BeginTabItem().","flags":[],"values":{"None":{"v":0},"UnsavedDocument":{"v":1},"SetSelected":{"v":2},"NoCloseWithMiddleMouseButton":{"v":4},"NoPushId":{"v":8},"NoTooltip":{"v":16},"NoReorder":{"v":32},"Leading":{"v":64},"Trailing":{"v":128}}},{"ns":"UI","id":132,"name":"SortDirection","group":"UI","desc":"","flags":[],"values":{"None":{"v":0},"Ascending":{"v":1},"Descending":{"v":2}}},{"ns":"UI","id":133,"name":"Cond","group":"UI","desc":"Conditions for certain UI set operations.","flags":[],"values":{"None":{"v":0},"Always":{"v":1},"Once":{"v":2},"FirstUseEver":{"v":4},"Appearing":{"v":8}}},{"ns":"UI","id":134,"name":"Key","group":"UI","desc":"UI-specific keys.","flags":[],"values":{"None":{"v":0},"Tab":{"v":512},"LeftArrow":{"v":513},"RightArrow":{"v":514},"UpArrow":{"v":515},"DownArrow":{"v":516},"PageUp":{"v":517},"PageDown":{"v":518},"Home":{"v":519},"End":{"v":520},"Insert":{"v":521},"Delete":{"v":522},"Backspace":{"v":523},"Space":{"v":524},"Enter":{"v":525},"Escape":{"v":526},"LeftCtrl":{"v":527},"LeftShift":{"v":528},"LeftAlt":{"v":529},"LeftSuper":{"v":530},"RightCtrl":{"v":531},"RightShift":{"v":532},"RightAlt":{"v":533},"RightSuper":{"v":534},"Menu":{"v":535},"N0":{"v":536},"N1":{"v":537},"N2":{"v":538},"N3":{"v":539},"N4":{"v":540},"N5":{"v":541},"N6":{"v":542},"N7":{"v":543},"N8":{"v":544},"N9":{"v":545},"A":{"v":546},"B":{"v":547},"C":{"v":548},"D":{"v":549},"E":{"v":550},"F":{"v":551},"G":{"v":552},"H":{"v":553},"I":{"v":554},"J":{"v":555},"K":{"v":556},"L":{"v":557},"M":{"v":558},"N":{"v":559},"O":{"v":560},"P":{"v":561},"Q":{"v":562},"R":{"v":563},"S":{"v":564},"T":{"v":565},"U":{"v":566},"V":{"v":567},"W":{"v":568},"X":{"v":569},"Y":{"v":570},"Z":{"v":571},"F1":{"v":572},"F2":{"v":573},"F3":{"v":574},"F4":{"v":575},"F5":{"v":576},"F6":{"v":577},"F7":{"v":578},"F8":{"v":579},"F9":{"v":580},"F10":{"v":581},"F11":{"v":582},"F12":{"v":583},"F13":{"v":584},"F14":{"v":585},"F15":{"v":586},"F16":{"v":587},"F17":{"v":588},"F18":{"v":589},"F19":{"v":590},"F20":{"v":591},"F21":{"v":592},"F22":{"v":593},"F23":{"v":594},"F24":{"v":595},"Apostrophe":{"v":596},"Comma":{"v":597},"Minus":{"v":598},"Period":{"v":599},"Slash":{"v":600},"Semicolon":{"v":601},"Equal":{"v":602},"LeftBracket":{"v":603},"Backslash":{"v":604},"RightBracket":{"v":605},"GraveAccent":{"v":606},"CapsLock":{"v":607},"ScrollLock":{"v":608},"NumLock":{"v":609},"PrintScreen":{"v":610},"Pause":{"v":611},"Keypad0":{"v":612},"Keypad1":{"v":613},"Keypad2":{"v":614},"Keypad3":{"v":615},"Keypad4":{"v":616},"Keypad5":{"v":617},"Keypad6":{"v":618},"Keypad7":{"v":619},"Keypad8":{"v":620},"Keypad9":{"v":621},"KeypadDecimal":{"v":622},"KeypadDivide":{"v":623},"KeypadMultiply":{"v":624},"KeypadSubtract":{"v":625},"KeypadAdd":{"v":626},"KeypadEnter":{"v":627},"KeyPadEnter":{"v":627},"KeypadEqual":{"v":628},"AppBack":{"v":629},"AppForward":{"v":630},"MouseLeft":{"v":655},"MouseRight":{"v":656},"MouseMiddle":{"v":657},"MouseX1":{"v":658},"MouseX2":{"v":659},"MouseWheelX":{"v":660},"MouseWheelY":{"v":661},"ModCtrl":{"v":4096},"ModShift":{"v":8192},"ModAlt":{"v":16384},"ModSuper":{"v":32768}}},{"ns":"UI","id":135,"name":"MouseButton","group":"UI","desc":"UI-specific mouse buttons.","flags":[],"values":{"Left":{"v":0},"Right":{"v":1},"Middle":{"v":2}}},{"ns":"UI","id":136,"name":"HoveredFlags","group":"UI","desc":"Flags that can be passed to IsItemHovered.","flags":[],"values":{"None":{"v":0},"ChildWindows":{"v":1},"RootWindow":{"v":2},"AnyWindow":{"v":4},"NoPopupHierarchy":{"v":8},"DockHierarchy":{"v":16},"AllowWhenBlockedByPopup":{"v":32},"AllowWhenBlockedByActiveItem":{"v":128},"AllowWhenOverlappedByItem":{"v":256},"AllowWhenOverlappedByWindow":{"v":512},"AllowWhenDisabled":{"v":1024},"NoNavOverride":{"v":2048},"AllowWhenOverlapped":{"v":768},"RectOnly":{"v":928},"RootAndChildWindows":{"v":3},"ForTooltip":{"v":4096},"Stationary":{"v":8192},"DelayNone":{"v":16384},"DelayShort":{"v":32768},"DelayNormal":{"v":65536},"NoSharedDelay":{"v":131072}}},{"ns":"UI","id":137,"name":"InputFlags","group":"UI","desc":"Flags that can be passed to Shortcut and SetNextItemShortcut.","flags":[],"values":{"None":{"v":0},"Repeat":{"d":"Enable repeat. Return true on successive repeats. Default for legacy IsKeyPressed(). NOT Default for legacy IsMouseClicked(). MUST BE == 1.","v":1},"RouteActive":{"d":"Route to active item only.","v":1024},"RouteFocused":{"d":"Route to windows in the focus stack (DEFAULT). Deep-most focused window takes inputs. Active item takes inputs over deep-most focused window.","v":2048},"RouteGlobal":{"d":"Global route (unless a focused window or active item registered the route).","v":4096},"RouteAlways":{"d":"Do not register route, poll keys directly.","v":8192},"RouteOverFocused":{"d":"Option: global route: higher priority than focused route (unless active item in focused route).","v":16384},"RouteOverActive":{"d":"Option: global route: higher priority than active item. Unlikely you need to use that: will interfere with every active items, e.g. CTRL+A registered by InputText will be overridden by this. May not be fully honored as user/internal code is likely to always assume they can access keys when active.","v":32768},"RouteUnlessBgFocused":{"d":"Option: global route: will not be applied if underlying background/void is focused (== no Dear ImGui windows are focused). Useful for overlay applications.","v":65536},"RouteFromRootWindow":{"d":"Option: route evaluated from the point of view of root window rather than current window.","v":131072},"Tooltip":{"d":"Automatically display a tooltip when hovering item [BETA] Unsure of right api (opt-in/opt-out)","v":262144}}},{"ns":"UI","id":138,"name":"MouseCursor","group":"UI","desc":"Cursors that can be passed to SetMouseCursor.","flags":[],"values":{"None":{"v":-1},"Arrow":{"v":0},"TextInput":{"v":1},"ResizeAll":{"v":2},"ResizeNS":{"v":3},"ResizeEW":{"v":4},"ResizeNESW":{"v":5},"ResizeNWSE":{"v":6},"Hand":{"v":7},"NotAllowed":{"v":8}}},{"ns":"UI::Plot","id":143,"name":"PlotFlags","group":"UI::Plot","desc":"Flags that can be passed to `UI::Plot::BeginPlot`.","flags":[],"values":{"None":{"v":0},"NoTitle":{"d":"The plot title will not be displayed (titles are also hidden if preceeded by double hashes, e.g. `##MyPlot`)","v":1},"NoLegend":{"d":"The legend will not be displayed","v":2},"NoMouseText":{"d":"The mouse position, in plot coordinates, will not be displayed inside of the plot","v":4},"NoInputs":{"d":"The user will not be able to interact with the plot","v":8},"NoMenus":{"d":"The user will not be able to open context menus","v":16},"NoBoxSelect":{"d":"The user will not be able to box-select","v":32},"NoFrame":{"d":"The ImGui frame will not be rendered","v":64},"Equal":{"d":"X and y axes pairs will be constrained to have the same units/pixel","v":128},"Crosshairs":{"d":"The default mouse cursor will be replaced with a crosshair when hovered","v":256},"CanvasOnly":{"v":55}}},{"ns":"UI::Plot","id":144,"name":"Axis","group":"UI::Plot","desc":"Plot axes.","flags":[],"values":{"X1":{"v":0},"X2":{"v":1},"X3":{"v":2},"Y1":{"v":3},"Y2":{"v":4},"Y3":{"v":5}}},{"ns":"UI::Plot","id":145,"name":"AxisFlags","group":"UI::Plot","desc":"Flags that can be passed to `UI::Plot::SetupAxis`.","flags":[],"values":{"None":{"v":0},"NoLabel":{"d":"The axis label will not be displayed (axis labels are also hidden if the supplied string name is nullpt","v":1},"NoGridLines":{"d":"No grid lines will be displayed","v":2},"NoTickMarks":{"d":"No tick marks will be displayed","v":4},"NoTickLabels":{"d":"No text labels will be displayed","v":8},"NoInitialFit":{"d":"Axis will not be initially fit to data extents on the first rendered frame","v":16},"NoMenus":{"d":"The user will not be able to open context menus with right-click","v":32},"NoSideSwitch":{"d":"The user will not be able to switch the axis side by dragging it","v":64},"NoHighlight":{"d":"The axis will not have its background highlighted when hovered or held","v":128},"Opposite":{"d":"Axis ticks and labels will be rendered on the conventionally opposite side (i.e, right or top)","v":256},"Foreground":{"d":"Grid lines will be displayed in the foreground (i.e. on top of data) instead of the background","v":512},"Invert":{"d":"The axis will be inverted","v":1024},"AutoFit":{"d":"Axis will be auto-fitting to data extents","v":2048},"RangeFit":{"d":"Axis will only fit points if the point is in the visible range of the **orthogonal** axis","v":4096},"PanStretch":{"d":"Panning in a locked or constrained state will cause the axis to stretch if possible","v":8192},"LockMin":{"d":"The axis minimum value will be locked when panning/zooming","v":16384},"LockMax":{"d":"The axis maximum value will be locked when panning/zooming","v":32768},"Lock":{"v":49152},"NoDecorations":{"v":15},"AuxDefault":{"v":258}}},{"ns":"UI::Plot","id":146,"name":"Location","group":"UI::Plot","desc":"Used to position items on a plot (e.g. legends, labels, etc.)","flags":[],"values":{"Center":{"d":"Center-center","v":0},"North":{"d":"Top-center","v":1},"South":{"d":"Bottom-center","v":2},"West":{"d":"Center-left","v":4},"East":{"d":"Center-right","v":8},"NorthWest":{"d":"Top-left","v":5},"NorthEast":{"d":"Top-right","v":9},"SouthWest":{"d":"Bottom-left","v":6},"SouthEast":{"d":"Bottom-right","v":10}}},{"ns":"UI::Plot","id":147,"name":"LegendFlags","group":"UI::Plot","desc":"Flags that can be passed to `UI::Plot::SetupLegend`.","flags":[],"values":{"None":{"v":0},"NoButtons":{"d":"Legend icons will not function as hide/show buttons","v":1},"NoHighlightItem":{"d":"Plot items will not be highlighted when their legend entry is hovered","v":2},"NoHighlightAxis":{"d":"Axes will not be highlighted when legend entries are hovered (only relevant if x/y-axis count > 1)","v":4},"NoMenus":{"d":"The user will not be able to open context menus with right-click","v":8},"Outside":{"d":"Legend will be rendered outside of the plot area","v":16},"Horizontal":{"d":"Legend entries will be displayed horizontally","v":32},"Sort":{"d":"Legend entries will be displayed in alphabetical order","v":64}}},{"ns":"UI::Plot","id":148,"name":"MouseTextFlags","group":"UI::Plot","desc":"Flags that can be passed to `UI::Plot::SetupMouseText`.","flags":[],"values":{"None":{"v":0},"NoAuxAxes":{"d":"Only show the mouse position for primary axes","v":1},"NoFormat":{"d":"Axes label formatters won't be used to render text","v":2},"ShowAlways":{"d":"Always display mouse position even if plot not hovered","v":4}}},{"ns":"UI::Plot","id":149,"name":"Scale","group":"UI::Plot","desc":"Axis scale.","flags":[],"values":{"Linear":{"d":"Default linear scale","v":0},"Time":{"d":"Date/time scale","v":1},"Log10":{"d":"Base 10 logartithmic scale","v":2},"SymLog":{"d":"Symmetric log scale","v":3}}},{"ns":"UI::Plot","id":150,"name":"Marker","group":"UI::Plot","desc":"Marker specifications.","flags":[],"values":{"Auto":{"d":"No marker","v":-1},"None":{"d":"No marker","v":-1},"Circle":{"d":"A circle marker (default)","v":0},"Square":{"d":"A square maker","v":1},"Diamond":{"d":"A diamond marker","v":2},"Up":{"d":"An upward-pointing triangle marker","v":3},"Down":{"d":"A downward-pointing triangle marker","v":4},"Left":{"d":"A leftward-pointing triangle marker","v":5},"Right":{"d":"A rightward-pointing triangle marker","v":6},"Cross":{"d":"A cross marker (not fillable)","v":7},"Plus":{"d":"A plus marker (not fillable)","v":8},"Asterisk":{"d":"An asterisk marker (not fillable)","v":9}}},{"ns":"UI::Plot","id":151,"name":"Bin","group":"UI::Plot","desc":"Different automatic histogram binning methods (k = bin count or w = bin width).","flags":[],"values":{"Sqrt":{"d":"k = sqrt(n)","v":-1},"Sturges":{"d":"k = 1 + log2(n)","v":-2},"Rice":{"d":"k = 2 * cbrt(n)","v":-3},"Scott":{"d":"w = 3.49 * sigma / cbrt(n)","v":-4}}},{"ns":"UI::Plot","id":152,"name":"Cond","group":"UI::Plot","desc":"Represents a condition for `SetupAxisLimits` etc.","flags":[],"values":{"None":{"d":"No condition (always set the variable), same as `Always`","v":0},"Always":{"d":"No condition (always set the variable)","v":1},"Once":{"d":"Set the variable once per runtime session (only the first call will succeed)","v":2}}},{"ns":"UI::Plot","id":153,"name":"Colormap","group":"UI::Plot","desc":"Built-in colormaps","flags":[],"values":{"Auto":{"d":"Automatic colormap","v":-1},"Deep":{"d":"seaborn deep (qual=true, n=10) (default)","v":0},"Dark":{"d":"matplotlib \"Set1\" (qual=true, n=9 )","v":1},"Pastel":{"d":"matplotlib \"Pastel1\" (qual=true, n=9 )","v":2},"Paired":{"d":"matplotlib \"Paired\" (qual=true, n=12)","v":3},"Viridis":{"d":"matplotlib \"viridis\" (qual=false, n=11)","v":4},"Plasma":{"d":"matplotlib \"plasma\" (qual=false, n=11)","v":5},"Hot":{"d":"matplotlib/MATLAB \"hot\"  (qual=false, n=11)","v":6},"Cool":{"d":"matplotlib/MATLAB \"cool\" (qual=false, n=11)","v":7},"Pink":{"d":"matplotlib/MATLAB \"pink\" (qual=false, n=11)","v":8},"Jet":{"d":"MATLAB \"jet\" (qual=false, n=11)","v":9},"Twilight":{"d":"matplotlib \"twilight\" (qual=false, n=11)","v":10},"RdBu":{"d":"red/blue, Color Brewer (qual=false, n=11)","v":11},"BrBG":{"d":"brown/blue-green, Color Brewer (qual=false, n=11)","v":12},"PiYG":{"d":"pink/yellow-green, Color Brewer (qual=false, n=11)","v":13},"Spectral":{"d":"color spectrum, Color Brewer (qual=false, n=11)","v":14},"Greys":{"d":"white/black (qual=false, n=2 )","v":15}}},{"ns":"UI::Plot","id":154,"name":"ColormapScaleFlags","group":"UI::Plot","desc":"Flags that can be passed to `UI::Plot::ColormapScale`.","flags":[],"values":{"None":{"v":0},"NoLabel":{"d":"The colormap axis label will not be displayed","v":1},"Opposite":{"d":"Render the colormap label and tick labels on the opposite side","v":2},"Invert":{"d":"Invert the colormap bar and axis scale (this only affects rendering; if you only want to reverse the scale mapping, make scale_min > scale_max)","v":4}}},{"ns":"UI::Plot","id":155,"name":"LineFlags","group":"UI::Plot","desc":"Flags that can be passed to `UI::Plot::PlotLine`.","flags":[],"values":{"None":{"v":0},"Segments":{"d":"A line segment will be rendered from every two consecutive points","v":1024},"Loop":{"d":"The last and first point will be connected to form a closed loop","v":2048},"SkipNaN":{"d":"NaNs values will be skipped instead of rendered as missing data","v":4096},"NoClip":{"d":"Markers (if displayed) on the edge of a plot will not be clipped","v":8192},"Shaded":{"d":"A filled region between the line and horizontal origin will be rendered; use PlotShaded for more advanced cases","v":16384}}},{"ns":"UI::Plot","id":156,"name":"BarsFlags","group":"UI::Plot","desc":"Flags that can be passed to `UI::Plot::PlotBars`.","flags":[],"values":{"None":{"v":0},"Horizontal":{"d":"Bars will be rendered horizontally on the current y-axis","v":1024}}},{"ns":"UI::Plot","id":157,"name":"ErrorBarsFlags","group":"UI::Plot","desc":"Flags that can be passed to `UI::Plot::PlotErrorBars`.","flags":[],"values":{"None":{"v":0},"Horizontal":{"d":"Bars will be rendered horizontally on the current y-axis","v":1024}}},{"ns":"UI::Plot","id":158,"name":"ShadedFlags","group":"UI::Plot","desc":"Flags that can be passed to `UI::Plot::PlotShaded`.","flags":[],"values":{"None":{"v":0}}},{"ns":"UI::Plot","id":159,"name":"ScatterFlags","group":"UI::Plot","desc":"Flags that can be passed to `UI::Plot::PlotScatter`.","flags":[],"values":{"None":{"v":0},"NoClip":{"d":"Markers on the edge of a plot will not be clipped","v":1024}}},{"ns":"UI::Plot","id":160,"name":"BarGroupsFlags","group":"UI::Plot","desc":"Flags that can be passed to `UI::Plot::PlotBarGroups`.","flags":[],"values":{"None":{"v":0},"Horizontal":{"d":"Bar groups will be rendered horizontally on the current y-axis","v":1024},"Stacked":{"d":"Items in a group will be stacked on top of each other","v":2048}}},{"ns":"UI::Plot","id":161,"name":"StemsFlags","group":"UI::Plot","desc":"Flags that can be passed to `UI::Plot::PlotStems`.","flags":[],"values":{"None":{"v":0},"Horizontal":{"d":"Stems will be rendered horizontally on the current y-axis","v":1024}}},{"ns":"UI::Plot","id":162,"name":"StairsFlags","group":"UI::Plot","desc":"Flags that can be passed to `UI::Plot::PlotStairs`.","flags":[],"values":{"None":{"v":0},"PreStep":{"d":"The y value is continued constantly to the left from every x position, i.e. the interval (x[i-1], x[i]] has the value y[i]","v":1024},"Shaded":{"d":"A filled region between the stairs and horizontal origin will be rendered; use PlotShaded for more advanced cases","v":2048}}},{"ns":"UI::Plot","id":163,"name":"PieChartFlags","group":"UI::Plot","desc":"Flags that can be passed to `UI::Plot::PlotPieChart`.","flags":[],"values":{"None":{"v":0},"Normalize":{"d":"Force normalization of pie chart values (i.e. always make a full circle if sum < 0)","v":1024},"IgnoreHidden":{"d":"Ignore hidden slices when drawing the pie chart (as if they were not there)","v":2048}}},{"ns":"UI::Plot","id":164,"name":"HeatmapFlags","group":"UI::Plot","desc":"Flags that can be passed to `UI::Plot::PlotHeatmap`.","flags":[],"values":{"None":{"v":0},"ColMajor":{"d":"Data will be read in column major order","v":1024}}},{"ns":"UI::Plot","id":165,"name":"HistogramFlags","group":"UI::Plot","desc":"Flags that can be passed to `UI::Plot::PlotHistogram`.","flags":[],"values":{"None":{"v":0},"Horizontal":{"d":"Histogram bars will be rendered horizontally (not supported by PlotHistogram2D)","v":1024},"Cumulative":{"d":"Each bin will contain its count plus the counts of all previous bins (not supported by PlotHistogram2D)","v":2048},"Density":{"d":"Counts will be normalized, i.e. the PDF will be visualized, or the CDF will be visualized if Cumulative is also set","v":4096},"NoOutliers":{"d":"Exclude values outside the specifed histogram range from the count toward normalizing and cumulative counts","v":8192},"ColMajor":{"d":"Data will be read in column major order (not supported by PlotHistogram)","v":16384}}},{"id":167,"name":"VirtualKey","group":"Input","desc":"Virtual keys that can be pressed by the user and received in scripts.","flags":[],"values":{"LButton":{"v":1},"RButton":{"v":2},"Cancel":{"v":3},"Mbutton":{"v":4},"XButton1":{"v":5},"XButton2":{"v":6},"Back":{"v":8},"Tab":{"v":9},"Clear":{"v":12},"Return":{"v":13},"Shift":{"v":16},"Control":{"v":17},"Menu":{"v":18},"Pause":{"v":19},"Capital":{"v":20},"Kana":{"v":21},"Hanguel":{"v":21},"Hangul":{"v":21},"Junja":{"v":23},"Final":{"v":24},"Hanja":{"v":25},"Kanji":{"v":25},"Escape":{"v":27},"Convert":{"v":28},"NonConvert":{"v":29},"Accept":{"v":30},"ModeChange":{"v":31},"Space":{"v":32},"Prior":{"v":33},"Next":{"v":34},"End":{"v":35},"Home":{"v":36},"Left":{"v":37},"Up":{"v":38},"Right":{"v":39},"Down":{"v":40},"Select":{"v":41},"Print":{"v":42},"Execute":{"v":43},"Snapshot":{"v":44},"Insert":{"v":45},"Delete":{"v":46},"Help":{"v":47},"N0":{"v":48},"N1":{"v":49},"N2":{"v":50},"N3":{"v":51},"N4":{"v":52},"N5":{"v":53},"N6":{"v":54},"N7":{"v":55},"N8":{"v":56},"N9":{"v":57},"A":{"v":65},"B":{"v":66},"C":{"v":67},"D":{"v":68},"E":{"v":69},"F":{"v":70},"G":{"v":71},"H":{"v":72},"I":{"v":73},"J":{"v":74},"K":{"v":75},"L":{"v":76},"M":{"v":77},"N":{"v":78},"O":{"v":79},"P":{"v":80},"Q":{"v":81},"R":{"v":82},"S":{"v":83},"T":{"v":84},"U":{"v":85},"V":{"v":86},"W":{"v":87},"X":{"v":88},"Y":{"v":89},"Z":{"v":90},"Lwin":{"v":91},"Rwin":{"v":92},"Apps":{"v":93},"Sleep":{"v":95},"Numpad0":{"v":96},"Numpad1":{"v":97},"Numpad2":{"v":98},"Numpad3":{"v":99},"Numpad4":{"v":100},"Numpad5":{"v":101},"Numpad6":{"v":102},"Numpad7":{"v":103},"Numpad8":{"v":104},"Numpad9":{"v":105},"Multiply":{"v":106},"Add":{"v":107},"Separator":{"v":108},"Subtract":{"v":109},"Decimal":{"v":110},"Divide":{"v":111},"F1":{"v":112},"F2":{"v":113},"F3":{"v":114},"F4":{"v":115},"F5":{"v":116},"F6":{"v":117},"F7":{"v":118},"F8":{"v":119},"F9":{"v":120},"F10":{"v":121},"F11":{"v":122},"F12":{"v":123},"F13":{"v":124},"F14":{"v":125},"F15":{"v":126},"F16":{"v":127},"F17":{"v":128},"F18":{"v":129},"F19":{"v":130},"F20":{"v":131},"F21":{"v":132},"F22":{"v":133},"F23":{"v":134},"F24":{"v":135},"NumLock":{"v":144},"Scroll":{"v":145},"LShift":{"v":160},"RShift":{"v":161},"LControl":{"v":162},"RControl":{"v":163},"LMenu":{"v":164},"RMenu":{"v":165},"BrowserBack":{"v":166},"BrowserForward":{"v":167},"BrowserRefresh":{"v":168},"BrowserStop":{"v":169},"BrowserSearch":{"v":170},"BrowserFavorites":{"v":171},"BrowserHome":{"v":172},"VolumeMute":{"v":173},"VolumeDown":{"v":174},"VolumeUp":{"v":175},"MediaNextTrack":{"v":176},"MediaPrevTrack":{"v":177},"MediaStop":{"v":178},"MediaPlayPause":{"v":179},"LaunchMail":{"v":180},"LaunchMediaSelect":{"v":181},"LaunchApp1":{"v":182},"LaunchApp2":{"v":183},"Oem1":{"v":186},"OemPlus":{"v":187},"OemComma":{"v":188},"OemMinus":{"v":189},"OemPeriod":{"v":190},"Oem2":{"v":191},"Oem3":{"v":192},"Oem4":{"v":219},"Oem5":{"v":220},"Oem6":{"v":221},"Oem7":{"v":222},"Oem8":{"v":223},"Oem102":{"v":226},"ProcessKey":{"v":229},"Packet":{"v":231},"Attn":{"v":246},"Crsel":{"v":247},"Exsel":{"v":248},"Ereof":{"v":249},"Play":{"v":250},"Zoom":{"v":251},"Noname":{"v":252},"Pa1":{"v":253},"OemClear":{"v":254}}}],"funcdefs":[{"id":67108889,"name":"less_nonconst","group":"Core","desc":"Non-const sorting funcdef, used in SortNonConst.","flags":[],"returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67112287,"typename":"T","typedecl":"T","typeflags":1,"name":"a"},{"typeid":67112287,"typename":"T","typedecl":"T","typeflags":1,"name":"b"}],"decl":"bool less_nonconst(T&in a, T&in b)"},{"id":67108896,"name":"CoroutineFunc","group":"Core","desc":"A basic coroutine function.","flags":[],"returntypedecl":"void","returntypeflags":0,"args":[],"decl":"void CoroutineFunc()"},{"id":67108897,"name":"CoroutineFuncUserdata","group":"Core","desc":"A coroutine function with a userdata handle.","flags":[],"returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108895,"typename":"ref","typedecl":"ref","typeflags":0,"name":""}],"decl":"void CoroutineFuncUserdata(ref)"},{"id":67108898,"name":"CoroutineFuncUserdataInt64","group":"Core","desc":"A coroutine function with a userdata integer.","flags":[],"returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"int64","typeflags":0,"name":""}],"decl":"void CoroutineFuncUserdataInt64(int64)"},{"id":67108899,"name":"CoroutineFuncUserdataUint64","group":"Core","desc":"A coroutine function with a userdata unsigned integer.","flags":[],"returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"uint64","typeflags":0,"name":""}],"decl":"void CoroutineFuncUserdataUint64(uint64)"},{"id":67108900,"name":"CoroutineFuncUserdataDouble","group":"Core","desc":"A coroutine function with a userdata double.","flags":[],"returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"double","typeflags":0,"name":""}],"decl":"void CoroutineFuncUserdataDouble(double)"},{"id":67108901,"name":"CoroutineFuncUserdataBool","group":"Core","desc":"A coroutine function with a userdata boolean.","flags":[],"returntypedecl":"void","returntypeflags":0,"args":[{"typedecl":"bool","typeflags":0,"name":""}],"decl":"void CoroutineFuncUserdataBool(bool)"},{"id":67108902,"name":"CoroutineFuncUserdataString","group":"Core","desc":"A coroutine function with a userdata string.","flags":[],"returntypedecl":"void","returntypeflags":0,"args":[{"typeid":67108890,"typename":"string","typedecl":"string","typeflags":5,"name":""}],"decl":"void CoroutineFuncUserdataString(const string&in)"},{"ns":"Dev","id":67108943,"name":"ProcIntercept","group":"Dev","desc":"","flags":[],"returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108939,"typename":"CMwStack","typedecl":"CMwStack","typeflags":1,"name":""}],"decl":"bool ProcIntercept(CMwStack&in)"},{"ns":"Dev","id":67108944,"name":"ProcInterceptEx","group":"Dev","desc":"","flags":[],"returntypedecl":"bool","returntypeflags":0,"args":[{"typeid":67108939,"typename":"CMwStack","typedecl":"CMwStack","typeflags":1,"name":""},{"typeid":1140850701,"typename":"CMwNod","typedecl":"CMwNod@","typeflags":0,"name":""}],"decl":"bool ProcInterceptEx(CMwStack&in, CMwNod@)"},{"ns":"UI","id":67108974,"name":"NodTreeMemberCallback","group":"UI","desc":"Callback function for UI::NodTree.","flags":[],"returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850701,"typename":"CMwNod","typedecl":"CMwNod@","typeflags":0,"name":"nod","desc":"The nod that is being rendered."},{"typeid":1140850751,"typename":"MwMemberInfo","typedecl":"Reflection::MwMemberInfo@","typeflags":0,"name":"info","desc":"Information about the member that is being rendered."}],"decl":"void NodTreeMemberCallback(CMwNod@ nod, Reflection::MwMemberInfo@ info)"},{"ns":"UI","id":67109004,"name":"InputTextCallback","group":"UI","desc":"Callback function for UI::InputText.","flags":[],"returntypedecl":"void","returntypeflags":0,"args":[{"typeid":1140850827,"typename":"InputTextCallbackData","typedecl":"UI::InputTextCallbackData@","typeflags":0,"name":"data"}],"decl":"void InputTextCallback(InputTextCallbackData@ data)"}]}